
c:/Users/linus/iCloudDrive/Desktop/UM/SI612/Project/target/5.9.0/p2/Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023fc3e0  085fc0a8  0000c3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   00003c10  023fc3e8  085fc0b0  0000c3e8  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000080  1007ad70  085ffcc0  0001ad70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000020c  1007adf0  1007adf0  0002adf0  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffd40  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 00000274  085ffd44  085ffd44  0001fd44  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fd44  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   001bb6af  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00017906  00000000  00000000  001db6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000656cc  00000000  00000000  001f2fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003690  00000000  00000000  00258681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00010340  00000000  00000000  0025bd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ba28  00000000  00000000  0026c051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000540f2  00000000  00000000  00297a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00152e50  00000000  00000000  002ebb6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009f64  00000000  00000000  0043e9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	4813      	ldr	r0, [pc, #76]	; (85fc068 <module_user_pre_init+0x50>)
 85fc01a:	4914      	ldr	r1, [pc, #80]	; (85fc06c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a13      	ldr	r2, [pc, #76]	; (85fc070 <module_user_pre_init+0x58>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b12      	ldr	r3, [pc, #72]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	4812      	ldr	r0, [pc, #72]	; (85fc078 <module_user_pre_init+0x60>)
 85fc030:	4a12      	ldr	r2, [pc, #72]	; (85fc07c <module_user_pre_init+0x64>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b12      	ldr	r3, [pc, #72]	; (85fc080 <module_user_pre_init+0x68>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85fc03a:	4812      	ldr	r0, [pc, #72]	; (85fc084 <module_user_pre_init+0x6c>)
 85fc03c:	4912      	ldr	r1, [pc, #72]	; (85fc088 <module_user_pre_init+0x70>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a12      	ldr	r2, [pc, #72]	; (85fc08c <module_user_pre_init+0x74>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85fc048:	4b0a      	ldr	r3, [pc, #40]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc04e:	4810      	ldr	r0, [pc, #64]	; (85fc090 <module_user_pre_init+0x78>)
 85fc050:	4910      	ldr	r1, [pc, #64]	; (85fc094 <module_user_pre_init+0x7c>)
 85fc052:	4288      	cmp	r0, r1
 85fc054:	d005      	beq.n	85fc062 <module_user_pre_init+0x4a>
 85fc056:	4a10      	ldr	r2, [pc, #64]	; (85fc098 <module_user_pre_init+0x80>)
 85fc058:	4282      	cmp	r2, r0
 85fc05a:	d002      	beq.n	85fc062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc05c:	4b05      	ldr	r3, [pc, #20]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc05e:	1a12      	subs	r2, r2, r0
 85fc060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc062:	4801      	ldr	r0, [pc, #4]	; (85fc068 <module_user_pre_init+0x50>)
 85fc064:	bd08      	pop	{r3, pc}
 85fc066:	bf00      	nop
 85fc068:	1007ad70 	.word	0x1007ad70
 85fc06c:	085ffcc0 	.word	0x085ffcc0
 85fc070:	1007adf0 	.word	0x1007adf0
 85fc074:	10110d2d 	.word	0x10110d2d
 85fc078:	1007adf0 	.word	0x1007adf0
 85fc07c:	1007affc 	.word	0x1007affc
 85fc080:	10110ea1 	.word	0x10110ea1
 85fc084:	023fc3e0 	.word	0x023fc3e0
 85fc088:	085fc0a8 	.word	0x085fc0a8
 85fc08c:	023fc3e8 	.word	0x023fc3e8
 85fc090:	023fc3e8 	.word	0x023fc3e8
 85fc094:	085fc0b0 	.word	0x085fc0b0
 85fc098:	023ffff8 	.word	0x023ffff8

085fc09c <dynalib_preinit>:
 85fc09c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fc3e8 <strcmp>:
 23fc3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 23fc3ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 23fc3f0:	2a01      	cmp	r2, #1
 23fc3f2:	bf28      	it	cs
 23fc3f4:	429a      	cmpcs	r2, r3
 23fc3f6:	d0f7      	beq.n	23fc3e8 <strcmp>
 23fc3f8:	1ad0      	subs	r0, r2, r3
 23fc3fa:	4770      	bx	lr

023fc3fc <strlen>:
 23fc3fc:	4603      	mov	r3, r0
 23fc3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fc402:	2a00      	cmp	r2, #0
 23fc404:	d1fb      	bne.n	23fc3fe <strlen+0x2>
 23fc406:	1a18      	subs	r0, r3, r0
 23fc408:	3801      	subs	r0, #1
 23fc40a:	4770      	bx	lr

023fc40c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fc40c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fc40e:	f002 fb25 	bl	23fea5c <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc412:	2500      	movs	r5, #0
 23fc414:	4e05      	ldr	r6, [pc, #20]	; (23fc42c <module_user_init+0x20>)
 23fc416:	4c06      	ldr	r4, [pc, #24]	; (23fc430 <module_user_init+0x24>)
 23fc418:	1ba4      	subs	r4, r4, r6
 23fc41a:	08a4      	lsrs	r4, r4, #2
 23fc41c:	42ac      	cmp	r4, r5
 23fc41e:	d100      	bne.n	23fc422 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fc420:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fc422:	f856 3b04 	ldr.w	r3, [r6], #4
 23fc426:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fc428:	3501      	adds	r5, #1
 23fc42a:	e7f7      	b.n	23fc41c <module_user_init+0x10>
 23fc42c:	023fffd0 	.word	0x023fffd0
 23fc430:	023ffff8 	.word	0x023ffff8

023fc434 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fc434:	f000 b8a4 	b.w	23fc580 <setup>

023fc438 <module_user_loop>:
}

void module_user_loop() {
 23fc438:	b508      	push	{r3, lr}
    loop();
 23fc43a:	f000 f8e1 	bl	23fc600 <loop>
    _post_loop();
}
 23fc43e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fc442:	f002 bac3 	b.w	23fe9cc <_post_loop>

023fc446 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fc446:	f001 b841 	b.w	23fd4cc <malloc>

023fc44a <_Znaj>:
 23fc44a:	f001 b83f 	b.w	23fd4cc <malloc>

023fc44e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fc44e:	f001 b84b 	b.w	23fd4e8 <free>
	...

023fc454 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc454:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23fc456:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23fc458:	4a02      	ldr	r2, [pc, #8]	; (23fc464 <__cxa_pure_virtual+0x10>)
 23fc45a:	4903      	ldr	r1, [pc, #12]	; (23fc468 <__cxa_pure_virtual+0x14>)
 23fc45c:	f000 fed8 	bl	23fd210 <panic_>
  while (1);
 23fc460:	e7fe      	b.n	23fc460 <__cxa_pure_virtual+0xc>
 23fc462:	bf00      	nop
 23fc464:	023fcd79 	.word	0x023fcd79
 23fc468:	023ffaa8 	.word	0x023ffaa8

023fc46c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fc46c:	7800      	ldrb	r0, [r0, #0]
 23fc46e:	fab0 f080 	clz	r0, r0
 23fc472:	0940      	lsrs	r0, r0, #5
 23fc474:	4770      	bx	lr

023fc476 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fc476:	2301      	movs	r3, #1
 23fc478:	7003      	strb	r3, [r0, #0]
 23fc47a:	4770      	bx	lr

023fc47c <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23fc47c:	4770      	bx	lr
	...

023fc480 <_Z7setMode6String>:
  frequency = atoi(inFrequency.c_str());
  return 0;
}

int setMode(String _){
  wave = !wave;
 23fc480:	4a03      	ldr	r2, [pc, #12]	; (23fc490 <_Z7setMode6String+0x10>)
  return 0;
}
 23fc482:	2000      	movs	r0, #0
  wave = !wave;
 23fc484:	7813      	ldrb	r3, [r2, #0]
 23fc486:	f083 0301 	eor.w	r3, r3, #1
 23fc48a:	7013      	strb	r3, [r2, #0]
}
 23fc48c:	4770      	bx	lr
 23fc48e:	bf00      	nop
 23fc490:	1007ae48 	.word	0x1007ae48

023fc494 <_Z8setColor6String>:
int setColor(String inColorName){
 23fc494:	b508      	push	{r3, lr}
  colorName = inColorName.c_str()[0];
 23fc496:	6803      	ldr	r3, [r0, #0]
  bar.setBrightness(50);
 23fc498:	2132      	movs	r1, #50	; 0x32
  colorName = inColorName.c_str()[0];
 23fc49a:	781a      	ldrb	r2, [r3, #0]
 23fc49c:	4b03      	ldr	r3, [pc, #12]	; (23fc4ac <_Z8setColor6String+0x18>)
  bar.setBrightness(50);
 23fc49e:	4804      	ldr	r0, [pc, #16]	; (23fc4b0 <_Z8setColor6String+0x1c>)
  colorName = inColorName.c_str()[0];
 23fc4a0:	701a      	strb	r2, [r3, #0]
  bar.setBrightness(50);
 23fc4a2:	f000 fbe0 	bl	23fcc66 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
}
 23fc4a6:	2000      	movs	r0, #0
 23fc4a8:	bd08      	pop	{r3, pc}
 23fc4aa:	bf00      	nop
 23fc4ac:	1007ad74 	.word	0x1007ad74
 23fc4b0:	1007ae08 	.word	0x1007ae08

023fc4b4 <_Z12setFrequency6String>:
int setFrequency(String inFrequency){
 23fc4b4:	b508      	push	{r3, lr}
  frequency = atoi(inFrequency.c_str());
 23fc4b6:	6800      	ldr	r0, [r0, #0]
 23fc4b8:	f003 f948 	bl	23ff74c <atoi>
 23fc4bc:	4b01      	ldr	r3, [pc, #4]	; (23fc4c4 <_Z12setFrequency6String+0x10>)
 23fc4be:	6018      	str	r0, [r3, #0]
}
 23fc4c0:	2000      	movs	r0, #0
 23fc4c2:	bd08      	pop	{r3, pc}
 23fc4c4:	1007ad78 	.word	0x1007ad78

023fc4c8 <_Z13setBrightness6String>:
int setBrightness(String brightness){
 23fc4c8:	b508      	push	{r3, lr}
  bar.setBrightness(atoi(brightness.c_str()));
 23fc4ca:	6800      	ldr	r0, [r0, #0]
 23fc4cc:	f003 f93e 	bl	23ff74c <atoi>
 23fc4d0:	4601      	mov	r1, r0
 23fc4d2:	4804      	ldr	r0, [pc, #16]	; (23fc4e4 <_Z13setBrightness6String+0x1c>)
 23fc4d4:	b2c9      	uxtb	r1, r1
 23fc4d6:	f000 fbc6 	bl	23fcc66 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  bar.show();
 23fc4da:	4802      	ldr	r0, [pc, #8]	; (23fc4e4 <_Z13setBrightness6String+0x1c>)
 23fc4dc:	f000 fa8c 	bl	23fc9f8 <_ZN17Adafruit_NeoPixel4showEv>
}
 23fc4e0:	2000      	movs	r0, #0
 23fc4e2:	bd08      	pop	{r3, pc}
 23fc4e4:	1007ae08 	.word	0x1007ae08

023fc4e8 <_Z10confirmSeq6String>:

int confirmSeq(String _){
 23fc4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  bar.setBrightness(50);
  for (int i = 0; i < LIGHT_COUNT; i++){
 23fc4ea:	2400      	movs	r4, #0
  bar.setBrightness(50);
 23fc4ec:	2132      	movs	r1, #50	; 0x32
 23fc4ee:	480e      	ldr	r0, [pc, #56]	; (23fc528 <_Z10confirmSeq6String+0x40>)
 23fc4f0:	f000 fbb9 	bl	23fcc66 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
    bar.setPixelColor(i, 0, 255, 0);
 23fc4f4:	4625      	mov	r5, r4
 23fc4f6:	b2a1      	uxth	r1, r4
 23fc4f8:	23ff      	movs	r3, #255	; 0xff
 23fc4fa:	2200      	movs	r2, #0
 23fc4fc:	480a      	ldr	r0, [pc, #40]	; (23fc528 <_Z10confirmSeq6String+0x40>)
 23fc4fe:	9500      	str	r5, [sp, #0]
  for (int i = 0; i < LIGHT_COUNT; i++){
 23fc500:	3401      	adds	r4, #1
    bar.setPixelColor(i, 0, 255, 0);
 23fc502:	f000 fb83 	bl	23fcc0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  for (int i = 0; i < LIGHT_COUNT; i++){
 23fc506:	2c18      	cmp	r4, #24
 23fc508:	d1f5      	bne.n	23fc4f6 <_Z10confirmSeq6String+0xe>
  }
  bar.show();
 23fc50a:	4807      	ldr	r0, [pc, #28]	; (23fc528 <_Z10confirmSeq6String+0x40>)
 23fc50c:	f000 fa74 	bl	23fc9f8 <_ZN17Adafruit_NeoPixel4showEv>
  delay(1000);
 23fc510:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 23fc514:	f002 fa22 	bl	23fe95c <delay>
  bar.setBrightness(0);
 23fc518:	2100      	movs	r1, #0
 23fc51a:	4803      	ldr	r0, [pc, #12]	; (23fc528 <_Z10confirmSeq6String+0x40>)
 23fc51c:	f000 fba3 	bl	23fcc66 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  return 0;
}
 23fc520:	2000      	movs	r0, #0
 23fc522:	b003      	add	sp, #12
 23fc524:	bd30      	pop	{r4, r5, pc}
 23fc526:	bf00      	nop
 23fc528:	1007ae08 	.word	0x1007ae08

023fc52c <_ZN10CloudClass8functionIA2_cJPFi6StringEEEEbRKT_DpT0_.isra.0>:
        static_assert(sizeof(T)==0, "\n\nIn Particle.variable(\"name\", myVar, STRING); myVar must be declared as char myVar[] not String myVar\n\n");
        return false;
    }

    template <typename T, class ... Types>
    static inline bool function(const T &name, Types ... args)
 23fc52c:	4602      	mov	r2, r0
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 23fc52e:	4801      	ldr	r0, [pc, #4]	; (23fc534 <_ZN10CloudClass8functionIA2_cJPFi6StringEEEEbRKT_DpT0_.isra.0+0x8>)
 23fc530:	f002 badc 	b.w	23feaec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 23fc534:	023feac1 	.word	0x023feac1

023fc538 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 23fc538:	b510      	push	{r4, lr}
 23fc53a:	4604      	mov	r4, r0
 23fc53c:	4b09      	ldr	r3, [pc, #36]	; (23fc564 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 23fc53e:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23fc540:	f001 fbbc 	bl	23fdcbc <_ZN5spark10LogManager8instanceEv>
 23fc544:	4621      	mov	r1, r4
 23fc546:	f001 fe05 	bl	23fe154 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 23fc54a:	f002 fbbb 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fc54e:	f002 fbad 	bl	23fecac <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
 23fc552:	4620      	mov	r0, r4
 23fc554:	4b04      	ldr	r3, [pc, #16]	; (23fc568 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 23fc556:	f840 3b04 	str.w	r3, [r0], #4
 23fc55a:	f001 fc85 	bl	23fde68 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23fc55e:	4620      	mov	r0, r4
 23fc560:	bd10      	pop	{r4, pc}
 23fc562:	bf00      	nop
 23fc564:	023ffae8 	.word	0x023ffae8
 23fc568:	023ffad0 	.word	0x023ffad0

023fc56c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
 23fc56c:	b510      	push	{r4, lr}
 23fc56e:	4604      	mov	r4, r0
    }
 23fc570:	f7ff ffe2 	bl	23fc538 <_ZN5spark16SerialLogHandlerD1Ev>
 23fc574:	4620      	mov	r0, r4
 23fc576:	2124      	movs	r1, #36	; 0x24
 23fc578:	f7ff ff69 	bl	23fc44e <_ZdlPvj>
 23fc57c:	4620      	mov	r0, r4
 23fc57e:	bd10      	pop	{r4, pc}

023fc580 <setup>:

// setup() runs once, when the device is first turned on
void setup() {
 23fc580:	b507      	push	{r0, r1, r2, lr}
  Particle.function("C", setColor);
 23fc582:	4914      	ldr	r1, [pc, #80]	; (23fc5d4 <setup+0x54>)
 23fc584:	4814      	ldr	r0, [pc, #80]	; (23fc5d8 <setup+0x58>)
 23fc586:	f7ff ffd1 	bl	23fc52c <_ZN10CloudClass8functionIA2_cJPFi6StringEEEEbRKT_DpT0_.isra.0>
  Particle.function("B", setBrightness);
 23fc58a:	4914      	ldr	r1, [pc, #80]	; (23fc5dc <setup+0x5c>)
 23fc58c:	4814      	ldr	r0, [pc, #80]	; (23fc5e0 <setup+0x60>)
 23fc58e:	f7ff ffcd 	bl	23fc52c <_ZN10CloudClass8functionIA2_cJPFi6StringEEEEbRKT_DpT0_.isra.0>
  Particle.function("F", setFrequency);
 23fc592:	4914      	ldr	r1, [pc, #80]	; (23fc5e4 <setup+0x64>)
 23fc594:	4814      	ldr	r0, [pc, #80]	; (23fc5e8 <setup+0x68>)
 23fc596:	f7ff ffc9 	bl	23fc52c <_ZN10CloudClass8functionIA2_cJPFi6StringEEEEbRKT_DpT0_.isra.0>
  Particle.function("M", setMode);
 23fc59a:	4914      	ldr	r1, [pc, #80]	; (23fc5ec <setup+0x6c>)
 23fc59c:	4814      	ldr	r0, [pc, #80]	; (23fc5f0 <setup+0x70>)
 23fc59e:	f7ff ffc5 	bl	23fc52c <_ZN10CloudClass8functionIA2_cJPFi6StringEEEEbRKT_DpT0_.isra.0>
  Particle.function("I", confirmSeq);
 23fc5a2:	4914      	ldr	r1, [pc, #80]	; (23fc5f4 <setup+0x74>)
 23fc5a4:	4814      	ldr	r0, [pc, #80]	; (23fc5f8 <setup+0x78>)
 23fc5a6:	f7ff ffc1 	bl	23fc52c <_ZN10CloudClass8functionIA2_cJPFi6StringEEEEbRKT_DpT0_.isra.0>
  bar.begin();
 23fc5aa:	4814      	ldr	r0, [pc, #80]	; (23fc5fc <setup+0x7c>)
 23fc5ac:	f000 f9be 	bl	23fc92c <_ZN17Adafruit_NeoPixel5beginEv>
  bar.setBrightness(0);
 23fc5b0:	2100      	movs	r1, #0
 23fc5b2:	4812      	ldr	r0, [pc, #72]	; (23fc5fc <setup+0x7c>)
 23fc5b4:	f000 fb57 	bl	23fcc66 <_ZN17Adafruit_NeoPixel13setBrightnessEh>
  bar.setPixelColor(0, 255, 255, 0);
 23fc5b8:	2100      	movs	r1, #0
 23fc5ba:	23ff      	movs	r3, #255	; 0xff
 23fc5bc:	480f      	ldr	r0, [pc, #60]	; (23fc5fc <setup+0x7c>)
 23fc5be:	461a      	mov	r2, r3
 23fc5c0:	9100      	str	r1, [sp, #0]
 23fc5c2:	f000 fb23 	bl	23fcc0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
  bar.show();
 23fc5c6:	480d      	ldr	r0, [pc, #52]	; (23fc5fc <setup+0x7c>)
}
 23fc5c8:	b003      	add	sp, #12
 23fc5ca:	f85d eb04 	ldr.w	lr, [sp], #4
  bar.show();
 23fc5ce:	f000 ba13 	b.w	23fc9f8 <_ZN17Adafruit_NeoPixel4showEv>
 23fc5d2:	bf00      	nop
 23fc5d4:	023fc495 	.word	0x023fc495
 23fc5d8:	023ffabd 	.word	0x023ffabd
 23fc5dc:	023fc4c9 	.word	0x023fc4c9
 23fc5e0:	023ffabf 	.word	0x023ffabf
 23fc5e4:	023fc4b5 	.word	0x023fc4b5
 23fc5e8:	023ffac1 	.word	0x023ffac1
 23fc5ec:	023fc481 	.word	0x023fc481
 23fc5f0:	023ffac3 	.word	0x023ffac3
 23fc5f4:	023fc4e9 	.word	0x023fc4e9
 23fc5f8:	023ffac5 	.word	0x023ffac5
 23fc5fc:	1007ae08 	.word	0x1007ae08

023fc600 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 23fc600:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint8_t red = 0, green = 0, blue = 0;
  switch (colorName)
 23fc604:	4b2d      	ldr	r3, [pc, #180]	; (23fc6bc <loop+0xbc>)
 23fc606:	781b      	ldrb	r3, [r3, #0]
 23fc608:	3b42      	subs	r3, #66	; 0x42
 23fc60a:	b2db      	uxtb	r3, r3
 23fc60c:	2b17      	cmp	r3, #23
 23fc60e:	d830      	bhi.n	23fc672 <loop+0x72>
 23fc610:	4a2b      	ldr	r2, [pc, #172]	; (23fc6c0 <loop+0xc0>)
 23fc612:	5cd5      	ldrb	r5, [r2, r3]
 23fc614:	4a2b      	ldr	r2, [pc, #172]	; (23fc6c4 <loop+0xc4>)
 23fc616:	5cd6      	ldrb	r6, [r2, r3]
 23fc618:	4a2b      	ldr	r2, [pc, #172]	; (23fc6c8 <loop+0xc8>)
 23fc61a:	5cd7      	ldrb	r7, [r2, r3]
    red = green = blue = 255;
    break;
  default:
    break;
  }
  if (wave){
 23fc61c:	4b2b      	ldr	r3, [pc, #172]	; (23fc6cc <loop+0xcc>)
 23fc61e:	781c      	ldrb	r4, [r3, #0]
 23fc620:	2300      	movs	r3, #0
 23fc622:	b354      	cbz	r4, 23fc67a <loop+0x7a>
    bar.setPixelColor(currentPos, 0, 0, 0);
    bar.setPixelColor((currentPos + 1) % LIGHT_COUNT, red, green, blue);
 23fc624:	f04f 0818 	mov.w	r8, #24
    bar.setPixelColor(currentPos, 0, 0, 0);
 23fc628:	4c29      	ldr	r4, [pc, #164]	; (23fc6d0 <loop+0xd0>)
 23fc62a:	9300      	str	r3, [sp, #0]
 23fc62c:	461a      	mov	r2, r3
 23fc62e:	8821      	ldrh	r1, [r4, #0]
 23fc630:	4828      	ldr	r0, [pc, #160]	; (23fc6d4 <loop+0xd4>)
 23fc632:	f000 faeb 	bl	23fcc0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    bar.setPixelColor((currentPos + 1) % LIGHT_COUNT, red, green, blue);
 23fc636:	6821      	ldr	r1, [r4, #0]
 23fc638:	462a      	mov	r2, r5
 23fc63a:	3101      	adds	r1, #1
 23fc63c:	fb91 f3f8 	sdiv	r3, r1, r8
 23fc640:	fb08 1113 	mls	r1, r8, r3, r1
 23fc644:	4823      	ldr	r0, [pc, #140]	; (23fc6d4 <loop+0xd4>)
 23fc646:	4633      	mov	r3, r6
 23fc648:	9700      	str	r7, [sp, #0]
 23fc64a:	b289      	uxth	r1, r1
 23fc64c:	f000 fade 	bl	23fcc0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    currentPos = (currentPos + 1) % LIGHT_COUNT;
 23fc650:	6823      	ldr	r3, [r4, #0]
 23fc652:	3301      	adds	r3, #1
 23fc654:	fb93 f2f8 	sdiv	r2, r3, r8
 23fc658:	fb08 3312 	mls	r3, r8, r2, r3
 23fc65c:	6023      	str	r3, [r4, #0]
    delay(frequency);
    for (int i = 0; i < LIGHT_COUNT; i++){
      bar.setPixelColor(i, 0, 0, 0);
    }
  }
  bar.show();
 23fc65e:	481d      	ldr	r0, [pc, #116]	; (23fc6d4 <loop+0xd4>)
 23fc660:	f000 f9ca 	bl	23fc9f8 <_ZN17Adafruit_NeoPixel4showEv>
  delay(frequency);
 23fc664:	4b1c      	ldr	r3, [pc, #112]	; (23fc6d8 <loop+0xd8>)
 23fc666:	6818      	ldr	r0, [r3, #0]
}
 23fc668:	b002      	add	sp, #8
 23fc66a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  delay(frequency);
 23fc66e:	f002 b975 	b.w	23fe95c <delay>
  switch (colorName)
 23fc672:	2700      	movs	r7, #0
 23fc674:	463e      	mov	r6, r7
 23fc676:	463d      	mov	r5, r7
 23fc678:	e7d0      	b.n	23fc61c <loop+0x1c>
      bar.setPixelColor(i, red, green, blue);
 23fc67a:	f8df 8058 	ldr.w	r8, [pc, #88]	; 23fc6d4 <loop+0xd4>
 23fc67e:	b2a1      	uxth	r1, r4
 23fc680:	4633      	mov	r3, r6
 23fc682:	462a      	mov	r2, r5
 23fc684:	4640      	mov	r0, r8
 23fc686:	9700      	str	r7, [sp, #0]
    for (int i = 0; i < LIGHT_COUNT; i++){
 23fc688:	3401      	adds	r4, #1
      bar.setPixelColor(i, red, green, blue);
 23fc68a:	f000 fabf 	bl	23fcc0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < LIGHT_COUNT; i++){
 23fc68e:	2c18      	cmp	r4, #24
 23fc690:	d1f5      	bne.n	23fc67e <loop+0x7e>
    for (int i = 0; i < LIGHT_COUNT; i++){
 23fc692:	2400      	movs	r4, #0
    bar.show();
 23fc694:	480f      	ldr	r0, [pc, #60]	; (23fc6d4 <loop+0xd4>)
 23fc696:	f000 f9af 	bl	23fc9f8 <_ZN17Adafruit_NeoPixel4showEv>
    delay(frequency);
 23fc69a:	4b0f      	ldr	r3, [pc, #60]	; (23fc6d8 <loop+0xd8>)
      bar.setPixelColor(i, 0, 0, 0);
 23fc69c:	4626      	mov	r6, r4
    delay(frequency);
 23fc69e:	6818      	ldr	r0, [r3, #0]
 23fc6a0:	f002 f95c 	bl	23fe95c <delay>
      bar.setPixelColor(i, 0, 0, 0);
 23fc6a4:	4d0b      	ldr	r5, [pc, #44]	; (23fc6d4 <loop+0xd4>)
 23fc6a6:	2300      	movs	r3, #0
 23fc6a8:	b2a1      	uxth	r1, r4
 23fc6aa:	461a      	mov	r2, r3
 23fc6ac:	4628      	mov	r0, r5
 23fc6ae:	9600      	str	r6, [sp, #0]
    for (int i = 0; i < LIGHT_COUNT; i++){
 23fc6b0:	3401      	adds	r4, #1
      bar.setPixelColor(i, 0, 0, 0);
 23fc6b2:	f000 faab 	bl	23fcc0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    for (int i = 0; i < LIGHT_COUNT; i++){
 23fc6b6:	2c18      	cmp	r4, #24
 23fc6b8:	d1f5      	bne.n	23fc6a6 <loop+0xa6>
 23fc6ba:	e7d0      	b.n	23fc65e <loop+0x5e>
 23fc6bc:	1007ad74 	.word	0x1007ad74
 23fc6c0:	023ffaf8 	.word	0x023ffaf8
 23fc6c4:	023ffb10 	.word	0x023ffb10
 23fc6c8:	023ffb28 	.word	0x023ffb28
 23fc6cc:	1007ae48 	.word	0x1007ae48
 23fc6d0:	1007ae20 	.word	0x1007ae20
 23fc6d4:	1007ae08 	.word	0x1007ae08
 23fc6d8:	1007ad78 	.word	0x1007ad78

023fc6dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc6dc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fc6de:	2614      	movs	r6, #20
 23fc6e0:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fc6e4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fc6e6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fc6ea:	42ae      	cmp	r6, r5
 23fc6ec:	d004      	beq.n	23fc6f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fc6ee:	4628      	mov	r0, r5
 23fc6f0:	f001 f830 	bl	23fd754 <_ZN6StringD1Ev>
 23fc6f4:	3514      	adds	r5, #20
 23fc6f6:	e7f8      	b.n	23fc6ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fc6f8:	6820      	ldr	r0, [r4, #0]
 23fc6fa:	f000 fef5 	bl	23fd4e8 <free>
    AllocatorT::free(data_);
}
 23fc6fe:	4620      	mov	r0, r4
 23fc700:	bd70      	pop	{r4, r5, r6, pc}

023fc702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fc702:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fc704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fc706:	4604      	mov	r4, r0
 23fc708:	460d      	mov	r5, r1
 23fc70a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fc70c:	d916      	bls.n	23fc73c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fc70e:	4290      	cmp	r0, r2
 23fc710:	d215      	bcs.n	23fc73e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fc712:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fc716:	1a75      	subs	r5, r6, r1
 23fc718:	f1a1 0714 	sub.w	r7, r1, #20
 23fc71c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fc71e:	42b7      	cmp	r7, r6
 23fc720:	d01c      	beq.n	23fc75c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fc722:	b12c      	cbz	r4, 23fc730 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fc724:	4631      	mov	r1, r6
 23fc726:	4620      	mov	r0, r4
 23fc728:	f001 f891 	bl	23fd84e <_ZN6StringC1EOS_>
 23fc72c:	7c33      	ldrb	r3, [r6, #16]
 23fc72e:	7423      	strb	r3, [r4, #16]
 23fc730:	4630      	mov	r0, r6
 23fc732:	f001 f80f 	bl	23fd754 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fc736:	3e14      	subs	r6, #20
 23fc738:	3c14      	subs	r4, #20
 23fc73a:	e7f0      	b.n	23fc71e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fc73c:	d00e      	beq.n	23fc75c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fc73e:	42b5      	cmp	r5, r6
 23fc740:	d00c      	beq.n	23fc75c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fc742:	b12c      	cbz	r4, 23fc750 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fc744:	4629      	mov	r1, r5
 23fc746:	4620      	mov	r0, r4
 23fc748:	f001 f881 	bl	23fd84e <_ZN6StringC1EOS_>
 23fc74c:	7c2b      	ldrb	r3, [r5, #16]
 23fc74e:	7423      	strb	r3, [r4, #16]
 23fc750:	4628      	mov	r0, r5
 23fc752:	f000 ffff 	bl	23fd754 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fc756:	3514      	adds	r5, #20
 23fc758:	3414      	adds	r4, #20
 23fc75a:	e7f0      	b.n	23fc73e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fc75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fc75e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fc75e:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fc764:	e9c0 3300 	strd	r3, r3, [r0]
 23fc768:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc76a:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc76c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc76e:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fc770:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fc772:	dd24      	ble.n	23fc7be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fc774:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fc778:	fb08 f007 	mul.w	r0, r8, r7
 23fc77c:	f000 fea6 	bl	23fd4cc <malloc>
            if (!d) {
 23fc780:	4605      	mov	r5, r0
 23fc782:	b1e0      	cbz	r0, 23fc7be <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fc784:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fc788:	fb08 1202 	mla	r2, r8, r2, r1
 23fc78c:	f7ff ffb9 	bl	23fc702 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fc790:	6820      	ldr	r0, [r4, #0]
 23fc792:	f000 fea9 	bl	23fd4e8 <free>
        data_ = d;
 23fc796:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fc798:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fc79a:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fc79e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fc7a2:	45b8      	cmp	r8, r7
 23fc7a4:	d009      	beq.n	23fc7ba <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fc7a6:	4639      	mov	r1, r7
 23fc7a8:	4628      	mov	r0, r5
 23fc7aa:	f001 f86a 	bl	23fd882 <_ZN6StringC1ERKS_>
 23fc7ae:	7c3b      	ldrb	r3, [r7, #16]
 23fc7b0:	3514      	adds	r5, #20
 23fc7b2:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fc7b6:	3714      	adds	r7, #20
 23fc7b8:	e7f3      	b.n	23fc7a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fc7ba:	6873      	ldr	r3, [r6, #4]
 23fc7bc:	6063      	str	r3, [r4, #4]
}
 23fc7be:	4620      	mov	r0, r4
 23fc7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fc7c4 <_GLOBAL__sub_I_SystemMode>:
}
 23fc7c4:	b530      	push	{r4, r5, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fc7c6:	2400      	movs	r4, #0
 23fc7c8:	4b2d      	ldr	r3, [pc, #180]	; (23fc880 <_GLOBAL__sub_I_SystemMode+0xbc>)
    SleepResult() {}
 23fc7ca:	4a2e      	ldr	r2, [pc, #184]	; (23fc884 <_GLOBAL__sub_I_SystemMode+0xc0>)
 23fc7cc:	b08d      	sub	sp, #52	; 0x34
 23fc7ce:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23fc7d0:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fc7d4:	2001      	movs	r0, #1
 23fc7d6:	f000 fd53 	bl	23fd280 <set_system_mode>
SYSTEM_THREAD(ENABLED);
 23fc7da:	4621      	mov	r1, r4
 23fc7dc:	2001      	movs	r0, #1
 23fc7de:	f000 fd6b 	bl	23fd2b8 <system_thread_set_state>
        capacity_(0) {
 23fc7e2:	e9cd 4400 	strd	r4, r4, [sp]
 23fc7e6:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
 23fc7e8:	f002 fa6c 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fc7ec:	4605      	mov	r5, r0
 23fc7ee:	4669      	mov	r1, sp
 23fc7f0:	a803      	add	r0, sp, #12
 23fc7f2:	f7ff ffb4 	bl	23fc75e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 23fc7f6:	a903      	add	r1, sp, #12
 23fc7f8:	a806      	add	r0, sp, #24
 23fc7fa:	f7ff ffb0 	bl	23fc75e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fc7fe:	4c22      	ldr	r4, [pc, #136]	; (23fc888 <_GLOBAL__sub_I_SystemMode+0xc4>)
 23fc800:	4b22      	ldr	r3, [pc, #136]	; (23fc88c <_GLOBAL__sub_I_SystemMode+0xc8>)
 23fc802:	a906      	add	r1, sp, #24
 23fc804:	6023      	str	r3, [r4, #0]
 23fc806:	a809      	add	r0, sp, #36	; 0x24
 23fc808:	f7ff ffa9 	bl	23fc75e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fc80c:	aa09      	add	r2, sp, #36	; 0x24
 23fc80e:	211e      	movs	r1, #30
 23fc810:	1d20      	adds	r0, r4, #4
 23fc812:	f001 fd81 	bl	23fe318 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fc816:	a809      	add	r0, sp, #36	; 0x24
 23fc818:	f7ff ff60 	bl	23fc6dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fc81c:	a806      	add	r0, sp, #24
 23fc81e:	f7ff ff5d 	bl	23fc6dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc822:	4b1b      	ldr	r3, [pc, #108]	; (23fc890 <_GLOBAL__sub_I_SystemMode+0xcc>)
 23fc824:	6225      	str	r5, [r4, #32]
 23fc826:	6023      	str	r3, [r4, #0]
 23fc828:	a803      	add	r0, sp, #12
 23fc82a:	f7ff ff57 	bl	23fc6dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fc82e:	4b19      	ldr	r3, [pc, #100]	; (23fc894 <_GLOBAL__sub_I_SystemMode+0xd0>)
 23fc830:	6023      	str	r3, [r4, #0]
        Serial.begin();
 23fc832:	f002 fa47 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fc836:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fc83a:	f002 fa33 	bl	23feca4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 23fc83e:	f001 fa3d 	bl	23fdcbc <_ZN5spark10LogManager8instanceEv>
 23fc842:	4621      	mov	r1, r4
 23fc844:	f001 fc40 	bl	23fe0c8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
 23fc848:	4668      	mov	r0, sp
 23fc84a:	f7ff ff47 	bl	23fc6dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fc84e:	4c12      	ldr	r4, [pc, #72]	; (23fc898 <_GLOBAL__sub_I_SystemMode+0xd4>)
 23fc850:	e8d4 3f8f 	ldab	r3, [r4]
 23fc854:	07db      	lsls	r3, r3, #31
 23fc856:	d40a      	bmi.n	23fc86e <_GLOBAL__sub_I_SystemMode+0xaa>
 23fc858:	4620      	mov	r0, r4
 23fc85a:	f7ff fe07 	bl	23fc46c <__cxa_guard_acquire>
 23fc85e:	b130      	cbz	r0, 23fc86e <_GLOBAL__sub_I_SystemMode+0xaa>
 23fc860:	2101      	movs	r1, #1
 23fc862:	480e      	ldr	r0, [pc, #56]	; (23fc89c <_GLOBAL__sub_I_SystemMode+0xd8>)
 23fc864:	f000 fef7 	bl	23fd656 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fc868:	4620      	mov	r0, r4
 23fc86a:	f7ff fe04 	bl	23fc476 <__cxa_guard_release>
Adafruit_NeoPixel bar(LIGHT_COUNT, SPI1, WS2812);
 23fc86e:	2302      	movs	r3, #2
 23fc870:	2118      	movs	r1, #24
 23fc872:	4a0a      	ldr	r2, [pc, #40]	; (23fc89c <_GLOBAL__sub_I_SystemMode+0xd8>)
 23fc874:	480a      	ldr	r0, [pc, #40]	; (23fc8a0 <_GLOBAL__sub_I_SystemMode+0xdc>)
}
 23fc876:	b00d      	add	sp, #52	; 0x34
 23fc878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
Adafruit_NeoPixel bar(LIGHT_COUNT, SPI1, WS2812);
 23fc87c:	f000 b847 	b.w	23fc90e <_ZN17Adafruit_NeoPixelC1EtR8SPIClassh>
 23fc880:	1007adfc 	.word	0x1007adfc
 23fc884:	ffff0000 	.word	0xffff0000
 23fc888:	1007ae24 	.word	0x1007ae24
 23fc88c:	023ffad0 	.word	0x023ffad0
 23fc890:	023ffc80 	.word	0x023ffc80
 23fc894:	023ffae8 	.word	0x023ffae8
 23fc898:	1007adf0 	.word	0x1007adf0
 23fc89c:	1007adf4 	.word	0x1007adf4
 23fc8a0:	1007ae08 	.word	0x1007ae08

023fc8a4 <_ZNK5spark6Logger5errorEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
    va_end(args);
}

inline void spark::Logger::error(const char *fmt, ...) const {
 23fc8a4:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23fc8a6:	f04f 0c20 	mov.w	ip, #32
 23fc8aa:	2300      	movs	r3, #0
inline void spark::Logger::error(const char *fmt, ...) const {
 23fc8ac:	b500      	push	{lr}
 23fc8ae:	b08c      	sub	sp, #48	; 0x30
 23fc8b0:	aa0d      	add	r2, sp, #52	; 0x34
 23fc8b2:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23fc8b6:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc8ba:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23fc8be:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23fc8c0:	6801      	ldr	r1, [r0, #0]
 23fc8c2:	aa04      	add	r2, sp, #16
 23fc8c4:	2032      	movs	r0, #50	; 0x32
 23fc8c6:	f000 fcb1 	bl	23fd22c <log_message_v>
}
 23fc8ca:	b00c      	add	sp, #48	; 0x30
 23fc8cc:	f85d eb04 	ldr.w	lr, [sp], #4
 23fc8d0:	b003      	add	sp, #12
 23fc8d2:	4770      	bx	lr

023fc8d4 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

uint8_t Adafruit_NeoPixel::getType() const {
    return type;
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
 23fc8d4:	b538      	push	{r3, r4, r5, lr}
 23fc8d6:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
 23fc8d8:	68c0      	ldr	r0, [r0, #12]
void Adafruit_NeoPixel::updateLength(uint16_t n) {
 23fc8da:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
 23fc8dc:	b108      	cbz	r0, 23fc8e2 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
 23fc8de:	f000 fe03 	bl	23fd4e8 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
 23fc8e2:	79a3      	ldrb	r3, [r4, #6]
 23fc8e4:	2b06      	cmp	r3, #6
 23fc8e6:	bf0c      	ite	eq
 23fc8e8:	2004      	moveq	r0, #4
 23fc8ea:	2003      	movne	r0, #3
 23fc8ec:	fb10 f005 	smulbb	r0, r0, r5
 23fc8f0:	b280      	uxth	r0, r0
 23fc8f2:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
 23fc8f4:	f000 fdea 	bl	23fd4cc <malloc>
 23fc8f8:	60e0      	str	r0, [r4, #12]
 23fc8fa:	b128      	cbz	r0, 23fc908 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
 23fc8fc:	2100      	movs	r1, #0
 23fc8fe:	88a2      	ldrh	r2, [r4, #4]
 23fc900:	f002 ff57 	bl	23ff7b2 <memset>
    numLEDs = n;
 23fc904:	8065      	strh	r5, [r4, #2]
  } else {
    numLEDs = numBytes = 0;
  }
}
 23fc906:	bd38      	pop	{r3, r4, r5, pc}
    numLEDs = numBytes = 0;
 23fc908:	80a0      	strh	r0, [r4, #4]
 23fc90a:	8060      	strh	r0, [r4, #2]
}
 23fc90c:	e7fb      	b.n	23fc906 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x32>

023fc90e <_ZN17Adafruit_NeoPixelC1EtR8SPIClassh>:
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, SPIClass& spi, uint8_t t) :
 23fc90e:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 23fc910:	2500      	movs	r5, #0
Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, SPIClass& spi, uint8_t t) :
 23fc912:	4604      	mov	r4, r0
 23fc914:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
 23fc916:	e9c0 5503 	strd	r5, r5, [r0, #12]
 23fc91a:	7005      	strb	r5, [r0, #0]
 23fc91c:	7183      	strb	r3, [r0, #6]
 23fc91e:	7205      	strb	r5, [r0, #8]
  updateLength(n);
 23fc920:	f7ff ffd8 	bl	23fc8d4 <_ZN17Adafruit_NeoPixel12updateLengthEt>
}
 23fc924:	4620      	mov	r0, r4
  spi_ = &spi;
 23fc926:	6166      	str	r6, [r4, #20]
}
 23fc928:	bd70      	pop	{r4, r5, r6, pc}
	...

023fc92c <_ZN17Adafruit_NeoPixel5beginEv>:

void Adafruit_NeoPixel::begin(void) {
 23fc92c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if (PLATFORM_ID == 32)
  if (getType() == WS2812B) {
 23fc930:	7983      	ldrb	r3, [r0, #6]
void Adafruit_NeoPixel::begin(void) {
 23fc932:	4604      	mov	r4, r0
  if (getType() == WS2812B) {
 23fc934:	2b02      	cmp	r3, #2
 23fc936:	d14e      	bne.n	23fc9d6 <_ZN17Adafruit_NeoPixel5beginEv+0xaa>
  // Prevent copying
  SPIClass(const SPIClass&) = delete;
  SPIClass& operator=(const SPIClass&) = delete;

  hal_spi_interface_t interface() const {
    return _spi;
 23fc938:	6943      	ldr	r3, [r0, #20]
 23fc93a:	781b      	ldrb	r3, [r3, #0]
    if (spi_->interface() >= HAL_PLATFORM_SPI_NUM) {
 23fc93c:	2b01      	cmp	r3, #1
 23fc93e:	d906      	bls.n	23fc94e <_ZN17Adafruit_NeoPixel5beginEv+0x22>
      Log.error("SPI/SPI1 interface not defined!");
 23fc940:	4929      	ldr	r1, [pc, #164]	; (23fc9e8 <_ZN17Adafruit_NeoPixel5beginEv+0xbc>)
 23fc942:	482a      	ldr	r0, [pc, #168]	; (23fc9ec <_ZN17Adafruit_NeoPixel5beginEv+0xc0>)
 23fc944:	f7ff ffae 	bl	23fc8a4 <_ZNK5spark6Logger5errorEPKcz>
#else
  pinMode(pin, OUTPUT);
  digitalWrite(pin, LOW);
#endif // #if (PLATFORM_ID == 32)
  begun = true;
}
 23fc948:	b003      	add	sp, #12
 23fc94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      misoPin = MISO1;
 23fc94e:	2b00      	cmp	r3, #0
 23fc950:	bf0c      	ite	eq
 23fc952:	f04f 0911 	moveq.w	r9, #17
 23fc956:	f04f 0904 	movne.w	r9, #4
    PinMode sckPinMode = getPinMode(sckPin);
 23fc95a:	4648      	mov	r0, r9
      misoPin = MISO1;
 23fc95c:	bf0c      	ite	eq
 23fc95e:	2710      	moveq	r7, #16
 23fc960:	2703      	movne	r7, #3
    PinMode sckPinMode = getPinMode(sckPin);
 23fc962:	f002 fd6d 	bl	23ff440 <getPinMode>
 23fc966:	4606      	mov	r6, r0
    PinMode misoPinMode = getPinMode(misoPin);
 23fc968:	4638      	mov	r0, r7
 23fc96a:	f002 fd69 	bl	23ff440 <getPinMode>
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fc96e:	2e01      	cmp	r6, #1
    PinMode misoPinMode = getPinMode(misoPin);
 23fc970:	4605      	mov	r5, r0
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fc972:	d133      	bne.n	23fc9dc <_ZN17Adafruit_NeoPixel5beginEv+0xb0>
 23fc974:	4648      	mov	r0, r9
 23fc976:	f002 fdcd 	bl	23ff514 <digitalRead>
 23fc97a:	4682      	mov	sl, r0
    int misoValue = (misoPinMode == OUTPUT) ? digitalRead(misoPin) : 0;
 23fc97c:	2d01      	cmp	r5, #1
 23fc97e:	d130      	bne.n	23fc9e2 <_ZN17Adafruit_NeoPixel5beginEv+0xb6>
 23fc980:	4638      	mov	r0, r7
 23fc982:	f002 fdc7 	bl	23ff514 <digitalRead>
 23fc986:	4680      	mov	r8, r0
    spi_config.flags = (uint32_t)HAL_SPI_CONFIG_FLAG_MOSI_ONLY;
 23fc988:	f04f 0b01 	mov.w	fp, #1
 23fc98c:	4b18      	ldr	r3, [pc, #96]	; (23fc9f0 <_ZN17Adafruit_NeoPixel5beginEv+0xc4>)
 23fc98e:	6960      	ldr	r0, [r4, #20]
 23fc990:	e9cd 3b00 	strd	r3, fp, [sp]
    hal_spi_begin_ext(spi_->interface(), SPI_MODE_MASTER, PIN_INVALID, &spi_config);
 23fc994:	22ff      	movs	r2, #255	; 0xff
 23fc996:	466b      	mov	r3, sp
 23fc998:	2100      	movs	r1, #0
 23fc99a:	7800      	ldrb	r0, [r0, #0]
 23fc99c:	f000 fb90 	bl	23fd0c0 <hal_spi_begin_ext>
    spi_->setClockSpeed(3125000); // DVOS 5.7.0 requires setClockSpeed() to be set after begin()
 23fc9a0:	465a      	mov	r2, fp
 23fc9a2:	4914      	ldr	r1, [pc, #80]	; (23fc9f4 <_ZN17Adafruit_NeoPixel5beginEv+0xc8>)
 23fc9a4:	6960      	ldr	r0, [r4, #20]
 23fc9a6:	f000 fe7d 	bl	23fd6a4 <_ZN8SPIClass13setClockSpeedEjj>
    pinMode(sckPin, sckPinMode);
 23fc9aa:	4631      	mov	r1, r6
 23fc9ac:	4648      	mov	r0, r9
 23fc9ae:	f002 fd87 	bl	23ff4c0 <pinMode>
    pinMode(misoPin, misoPinMode);
 23fc9b2:	4629      	mov	r1, r5
 23fc9b4:	4638      	mov	r0, r7
 23fc9b6:	f002 fd83 	bl	23ff4c0 <pinMode>
    if (sckPinMode == OUTPUT) {
 23fc9ba:	455e      	cmp	r6, fp
 23fc9bc:	d104      	bne.n	23fc9c8 <_ZN17Adafruit_NeoPixel5beginEv+0x9c>
      digitalWrite(sckPin, sckValue);
 23fc9be:	4648      	mov	r0, r9
 23fc9c0:	fa5f f18a 	uxtb.w	r1, sl
 23fc9c4:	f002 fd8d 	bl	23ff4e2 <digitalWrite>
    if (misoPinMode == OUTPUT) {
 23fc9c8:	2d01      	cmp	r5, #1
 23fc9ca:	d104      	bne.n	23fc9d6 <_ZN17Adafruit_NeoPixel5beginEv+0xaa>
      digitalWrite(misoPin, misoValue);
 23fc9cc:	4638      	mov	r0, r7
 23fc9ce:	fa5f f188 	uxtb.w	r1, r8
 23fc9d2:	f002 fd86 	bl	23ff4e2 <digitalWrite>
  begun = true;
 23fc9d6:	2301      	movs	r3, #1
 23fc9d8:	7023      	strb	r3, [r4, #0]
 23fc9da:	e7b5      	b.n	23fc948 <_ZN17Adafruit_NeoPixel5beginEv+0x1c>
    int sckValue = (sckPinMode == OUTPUT) ? digitalRead(sckPin) : 0;
 23fc9dc:	f04f 0a00 	mov.w	sl, #0
 23fc9e0:	e7cc      	b.n	23fc97c <_ZN17Adafruit_NeoPixel5beginEv+0x50>
    int misoValue = (misoPinMode == OUTPUT) ? digitalRead(misoPin) : 0;
 23fc9e2:	f04f 0800 	mov.w	r8, #0
 23fc9e6:	e7cf      	b.n	23fc988 <_ZN17Adafruit_NeoPixel5beginEv+0x5c>
 23fc9e8:	023ffb40 	.word	0x023ffb40
 23fc9ec:	1007ae74 	.word	0x1007ae74
 23fc9f0:	000a0008 	.word	0x000a0008
 23fc9f4:	002faf08 	.word	0x002faf08

023fc9f8 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
 23fc9f8:	68c3      	ldr	r3, [r0, #12]
 23fc9fa:	2b00      	cmp	r3, #0
 23fc9fc:	f000 80fc 	beq.w	23fcbf8 <_ZN17Adafruit_NeoPixel4showEv+0x200>
void Adafruit_NeoPixel::show(void) {
 23fca00:	b570      	push	{r4, r5, r6, lr}
    return type;
 23fca02:	7983      	ldrb	r3, [r0, #6]
 23fca04:	4604      	mov	r4, r0
  }

  __enable_irq();

#elif (PLATFORM_ID == 32)
  if (getType() != WS2812B) { // WS2812 WS2812B and WS2813 supported for P2
 23fca06:	2b02      	cmp	r3, #2
void Adafruit_NeoPixel::show(void) {
 23fca08:	b082      	sub	sp, #8
  if (getType() != WS2812B) { // WS2812 WS2812B and WS2813 supported for P2
 23fca0a:	f040 80ef 	bne.w	23fcbec <_ZN17Adafruit_NeoPixel4showEv+0x1f4>
        resetOff = 20;
      } break;
  }

  constexpr uint8_t numBitsPerBit = 3; // How many SPI bits represent one neopixel bit
  uint32_t spiArraySize = (numBytes * numBitsPerBit) + resetOff + resetOff;
 23fca0e:	8886      	ldrh	r6, [r0, #4]
 23fca10:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 23fca14:	36f0      	adds	r6, #240	; 0xf0
  uint8_t* spiArray = NULL;
  spiArray = (uint8_t*) malloc(spiArraySize);
 23fca16:	4630      	mov	r0, r6
 23fca18:	f000 fd58 	bl	23fd4cc <malloc>

  if (spiArray == NULL) {
 23fca1c:	4605      	mov	r5, r0
 23fca1e:	2800      	cmp	r0, #0
 23fca20:	f000 80eb 	beq.w	23fcbfa <_ZN17Adafruit_NeoPixel4showEv+0x202>
    Log.error("Not enough memory available!");
    return;
  }

  memset(spiArray, 0, spiArraySize);
 23fca24:	4632      	mov	r2, r6
 23fca26:	2100      	movs	r1, #0
 23fca28:	f002 fec3 	bl	23ff7b2 <memset>
uint8_t *Adafruit_NeoPixel::getPixels(void) const {
  return pixels;
}

uint16_t Adafruit_NeoPixel::numPixels(void) const {
  return numLEDs;
 23fca2c:	8862      	ldrh	r2, [r4, #2]
  for (int x = 0; x < numPixels(); x++) {
 23fca2e:	2a00      	cmp	r2, #0
 23fca30:	f000 80c7 	beq.w	23fcbc2 <_ZN17Adafruit_NeoPixel4showEv+0x1ca>
 23fca34:	46ac      	mov	ip, r5
 23fca36:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 23fca3a:	68e1      	ldr	r1, [r4, #12]
 23fca3c:	442a      	add	r2, r5
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fca3e:	f991 3000 	ldrsb.w	r3, [r1]
 23fca42:	7808      	ldrb	r0, [r1, #0]
 23fca44:	2b00      	cmp	r3, #0
 23fca46:	bfb5      	itete	lt
 23fca48:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fca4c:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fca50:	23d8      	movlt	r3, #216	; 0xd8
 23fca52:	2398      	movge	r3, #152	; 0x98
 23fca54:	f010 0f40 	tst.w	r0, #64	; 0x40
 23fca58:	bf08      	it	eq
 23fca5a:	4673      	moveq	r3, lr
 23fca5c:	f010 0f20 	tst.w	r0, #32
 23fca60:	bf14      	ite	ne
 23fca62:	2003      	movne	r0, #3
 23fca64:	2002      	moveq	r0, #2
 23fca66:	4403      	add	r3, r0
 23fca68:	f88c 3078 	strb.w	r3, [ip, #120]	; 0x78
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fca6c:	7808      	ldrb	r0, [r1, #0]
  for (int x = 0; x < numPixels(); x++) {
 23fca6e:	f10c 0c09 	add.w	ip, ip, #9
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fca72:	f000 0310 	and.w	r3, r0, #16
 23fca76:	2b00      	cmp	r3, #0
 23fca78:	bf15      	itete	ne
 23fca7a:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fca7e:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fca82:	236d      	movne	r3, #109	; 0x6d
 23fca84:	234d      	moveq	r3, #77	; 0x4d
 23fca86:	f010 0f08 	tst.w	r0, #8
 23fca8a:	bf08      	it	eq
 23fca8c:	4673      	moveq	r3, lr
 23fca8e:	f88c 3070 	strb.w	r3, [ip, #112]	; 0x70
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fca92:	780b      	ldrb	r3, [r1, #0]
  for (int x = 0; x < numPixels(); x++) {
 23fca94:	3103      	adds	r1, #3
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fca96:	f013 0f02 	tst.w	r3, #2
 23fca9a:	bf14      	ite	ne
 23fca9c:	2030      	movne	r0, #48	; 0x30
 23fca9e:	2020      	moveq	r0, #32
 23fcaa0:	f013 0f01 	tst.w	r3, #1
 23fcaa4:	bf0c      	ite	eq
 23fcaa6:	f04f 0e04 	moveq.w	lr, #4
 23fcaaa:	f04f 0e06 	movne.w	lr, #6
 23fcaae:	015b      	lsls	r3, r3, #5
 23fcab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 23fcab4:	4403      	add	r3, r0
 23fcab6:	4473      	add	r3, lr
 23fcab8:	f88c 3071 	strb.w	r3, [ip, #113]	; 0x71
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fcabc:	f911 0c02 	ldrsb.w	r0, [r1, #-2]
 23fcac0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 23fcac4:	2800      	cmp	r0, #0
 23fcac6:	bfb5      	itete	lt
 23fcac8:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fcacc:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fcad0:	20d8      	movlt	r0, #216	; 0xd8
 23fcad2:	2098      	movge	r0, #152	; 0x98
 23fcad4:	f013 0f40 	tst.w	r3, #64	; 0x40
 23fcad8:	bf08      	it	eq
 23fcada:	4670      	moveq	r0, lr
 23fcadc:	f013 0f20 	tst.w	r3, #32
 23fcae0:	bf14      	ite	ne
 23fcae2:	2303      	movne	r3, #3
 23fcae4:	2302      	moveq	r3, #2
 23fcae6:	4403      	add	r3, r0
 23fcae8:	f88c 3072 	strb.w	r3, [ip, #114]	; 0x72
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fcaec:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 23fcaf0:	f000 0310 	and.w	r3, r0, #16
 23fcaf4:	2b00      	cmp	r3, #0
 23fcaf6:	bf15      	itete	ne
 23fcaf8:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fcafc:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fcb00:	236d      	movne	r3, #109	; 0x6d
 23fcb02:	234d      	moveq	r3, #77	; 0x4d
 23fcb04:	f010 0f08 	tst.w	r0, #8
 23fcb08:	bf08      	it	eq
 23fcb0a:	4673      	moveq	r3, lr
 23fcb0c:	f88c 3073 	strb.w	r3, [ip, #115]	; 0x73
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fcb10:	f811 ec02 	ldrb.w	lr, [r1, #-2]
 23fcb14:	f01e 0f02 	tst.w	lr, #2
 23fcb18:	bf14      	ite	ne
 23fcb1a:	2030      	movne	r0, #48	; 0x30
 23fcb1c:	2020      	moveq	r0, #32
 23fcb1e:	f01e 0f01 	tst.w	lr, #1
 23fcb22:	bf14      	ite	ne
 23fcb24:	2306      	movne	r3, #6
 23fcb26:	2304      	moveq	r3, #4
 23fcb28:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
 23fcb2c:	f00e 0e80 	and.w	lr, lr, #128	; 0x80
 23fcb30:	4486      	add	lr, r0
 23fcb32:	449e      	add	lr, r3
 23fcb34:	f88c e074 	strb.w	lr, [ip, #116]	; 0x74
      spiArray[(x*9)+(s*3)+0+resetOff] = ((0x80 & pixels[(x*3)+s])?(PIX_HI << 5):(PIX_LO << 5)) + ((0x40 & pixels[(x*3)+s])?(PIX_HI << 2):(PIX_LO << 2)) + ((0x20 & pixels[(x*3)+s])?(0b11):(0b10));
 23fcb38:	f911 3c01 	ldrsb.w	r3, [r1, #-1]
 23fcb3c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fcb40:	2b00      	cmp	r3, #0
 23fcb42:	bfb5      	itete	lt
 23fcb44:	f04f 0ed0 	movlt.w	lr, #208	; 0xd0
 23fcb48:	f04f 0e90 	movge.w	lr, #144	; 0x90
 23fcb4c:	23d8      	movlt	r3, #216	; 0xd8
 23fcb4e:	2398      	movge	r3, #152	; 0x98
 23fcb50:	f010 0f40 	tst.w	r0, #64	; 0x40
 23fcb54:	bf08      	it	eq
 23fcb56:	4673      	moveq	r3, lr
 23fcb58:	f010 0f20 	tst.w	r0, #32
 23fcb5c:	bf14      	ite	ne
 23fcb5e:	2003      	movne	r0, #3
 23fcb60:	2002      	moveq	r0, #2
 23fcb62:	4403      	add	r3, r0
 23fcb64:	f88c 3075 	strb.w	r3, [ip, #117]	; 0x75
      spiArray[(x*9)+(s*3)+1+resetOff] = 0 /* bit 7 always 0 */ + ((0x10 & pixels[(x*3)+s])?(PIX_HI << 4):(PIX_LO << 4)) + ((0x08 & pixels[(x*3)+s])?(PIX_HI << 1):(PIX_LO << 1)) + 1 /* bit 0 always 1 */;
 23fcb68:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fcb6c:	f000 0310 	and.w	r3, r0, #16
 23fcb70:	2b00      	cmp	r3, #0
 23fcb72:	bf15      	itete	ne
 23fcb74:	f04f 0e69 	movne.w	lr, #105	; 0x69
 23fcb78:	f04f 0e49 	moveq.w	lr, #73	; 0x49
 23fcb7c:	236d      	movne	r3, #109	; 0x6d
 23fcb7e:	234d      	moveq	r3, #77	; 0x4d
 23fcb80:	f010 0f08 	tst.w	r0, #8
 23fcb84:	bf08      	it	eq
 23fcb86:	4673      	moveq	r3, lr
 23fcb88:	f88c 3076 	strb.w	r3, [ip, #118]	; 0x76
      spiArray[(x*9)+(s*3)+2+resetOff] = ((0x04 & pixels[(x*3)+s])?(0b10 << 6):(0b00 << 6)) + ((0x02 & pixels[(x*3)+s])?(PIX_HI << 3):(PIX_LO << 3)) + ((0x01 & pixels[(x*3)+s])?(PIX_HI):(PIX_LO));
 23fcb8c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 23fcb90:	f010 0f02 	tst.w	r0, #2
 23fcb94:	bf14      	ite	ne
 23fcb96:	f04f 0e30 	movne.w	lr, #48	; 0x30
 23fcb9a:	f04f 0e20 	moveq.w	lr, #32
 23fcb9e:	0143      	lsls	r3, r0, #5
 23fcba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 23fcba4:	4473      	add	r3, lr
 23fcba6:	b2db      	uxtb	r3, r3
 23fcba8:	07c0      	lsls	r0, r0, #31
 23fcbaa:	f103 0e06 	add.w	lr, r3, #6
 23fcbae:	f103 0304 	add.w	r3, r3, #4
 23fcbb2:	bf4c      	ite	mi
 23fcbb4:	f88c e077 	strbmi.w	lr, [ip, #119]	; 0x77
 23fcbb8:	f88c 3077 	strbpl.w	r3, [ip, #119]	; 0x77
  for (int x = 0; x < numPixels(); x++) {
 23fcbbc:	4594      	cmp	ip, r2
 23fcbbe:	f47f af3e 	bne.w	23fca3e <_ZN17Adafruit_NeoPixel4showEv+0x46>
  spi_->beginTransaction();
 23fcbc2:	6960      	ldr	r0, [r4, #20]
 23fcbc4:	f000 fd51 	bl	23fd66a <_ZN8SPIClass16beginTransactionEv>
  spi_->transfer(spiArray, nullptr, spiArraySize, nullptr);
 23fcbc8:	2200      	movs	r2, #0
 23fcbca:	4633      	mov	r3, r6
 23fcbcc:	4629      	mov	r1, r5
 23fcbce:	6960      	ldr	r0, [r4, #20]
 23fcbd0:	9200      	str	r2, [sp, #0]
 23fcbd2:	f000 fd99 	bl	23fd708 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  spi_->endTransaction();
 23fcbd6:	6960      	ldr	r0, [r4, #20]
 23fcbd8:	f000 fd4a 	bl	23fd670 <_ZN8SPIClass14endTransactionEv>
  free(spiArray);
 23fcbdc:	4628      	mov	r0, r5
 23fcbde:	f000 fc83 	bl	23fd4e8 <free>
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 23fcbe2:	f000 f8d7 	bl	23fcd94 <HAL_Timer_Get_Micro_Seconds>
  endTime = micros(); // Save EOD time for latch on next call
 23fcbe6:	6120      	str	r0, [r4, #16]
}
 23fcbe8:	b002      	add	sp, #8
 23fcbea:	bd70      	pop	{r4, r5, r6, pc}
    Log.error("Pixel type not supported!");
 23fcbec:	4904      	ldr	r1, [pc, #16]	; (23fcc00 <_ZN17Adafruit_NeoPixel4showEv+0x208>)
    Log.error("Not enough memory available!");
 23fcbee:	4805      	ldr	r0, [pc, #20]	; (23fcc04 <_ZN17Adafruit_NeoPixel4showEv+0x20c>)
 23fcbf0:	f7ff fe58 	bl	23fc8a4 <_ZNK5spark6Logger5errorEPKcz>
}
 23fcbf4:	b002      	add	sp, #8
 23fcbf6:	bd70      	pop	{r4, r5, r6, pc}
 23fcbf8:	4770      	bx	lr
    Log.error("Not enough memory available!");
 23fcbfa:	4903      	ldr	r1, [pc, #12]	; (23fcc08 <_ZN17Adafruit_NeoPixel4showEv+0x210>)
 23fcbfc:	e7f7      	b.n	23fcbee <_ZN17Adafruit_NeoPixel4showEv+0x1f6>
 23fcbfe:	bf00      	nop
 23fcc00:	023ffb60 	.word	0x023ffb60
 23fcc04:	1007ae74 	.word	0x1007ae74
 23fcc08:	023ffb7c 	.word	0x023ffb7c

023fcc0c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 23fcc0c:	b570      	push	{r4, r5, r6, lr}
  if(n < numLEDs) {
 23fcc0e:	8844      	ldrh	r4, [r0, #2]
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
 23fcc10:	f89d 5010 	ldrb.w	r5, [sp, #16]
  if(n < numLEDs) {
 23fcc14:	428c      	cmp	r4, r1
 23fcc16:	d922      	bls.n	23fcc5e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x52>
    if(brightness) { // See notes in setBrightness()
 23fcc18:	7a04      	ldrb	r4, [r0, #8]
 23fcc1a:	b144      	cbz	r4, 23fcc2e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
 23fcc1c:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
 23fcc20:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
 23fcc24:	fb14 f405 	smulbb	r4, r4, r5
      r = (r * brightness) >> 8;
 23fcc28:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
 23fcc2a:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
 23fcc2c:	0a25      	lsrs	r5, r4, #8
    uint8_t *p = &pixels[n * 3];
 23fcc2e:	68c6      	ldr	r6, [r0, #12]
 23fcc30:	7980      	ldrb	r0, [r0, #6]
 23fcc32:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 23fcc36:	3802      	subs	r0, #2
 23fcc38:	1874      	adds	r4, r6, r1
    switch(type) {
 23fcc3a:	2806      	cmp	r0, #6
 23fcc3c:	d810      	bhi.n	23fcc60 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x54>
 23fcc3e:	e8df f000 	tbb	[pc, r0]
 23fcc42:	0f04      	.short	0x0f04
 23fcc44:	040f0408 	.word	0x040f0408
 23fcc48:	04          	.byte	0x04
 23fcc49:	00          	.byte	0x00
          *p++ = g;
 23fcc4a:	5473      	strb	r3, [r6, r1]
          *p++ = r;
 23fcc4c:	7062      	strb	r2, [r4, #1]
          *p = b;
 23fcc4e:	70a5      	strb	r5, [r4, #2]
}
 23fcc50:	e005      	b.n	23fcc5e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x52>
          *p++ = r;
 23fcc52:	2afe      	cmp	r2, #254	; 0xfe
 23fcc54:	bf28      	it	cs
 23fcc56:	22fe      	movcs	r2, #254	; 0xfe
 23fcc58:	5472      	strb	r2, [r6, r1]
          *p++ = b;
 23fcc5a:	7065      	strb	r5, [r4, #1]
          *p = g;
 23fcc5c:	70a3      	strb	r3, [r4, #2]
}
 23fcc5e:	bd70      	pop	{r4, r5, r6, pc}
          *p++ = r;
 23fcc60:	5472      	strb	r2, [r6, r1]
          *p++ = g;
 23fcc62:	7063      	strb	r3, [r4, #1]
 23fcc64:	e7f3      	b.n	23fcc4e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x42>

023fcc66 <_ZN17Adafruit_NeoPixel13setBrightnessEh>:
  // 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
  // adding 1 here may (intentionally) roll over...so 0 = max brightness
  // (color values are interpreted literally; no scaling), 1 = min
  // brightness (off), 255 = just below max brightness.
  uint8_t newBrightness = b + 1;
  if(newBrightness != brightness) { // Compare against prior value
 23fcc66:	7a03      	ldrb	r3, [r0, #8]
  uint8_t newBrightness = b + 1;
 23fcc68:	1c4a      	adds	r2, r1, #1
 23fcc6a:	b2d2      	uxtb	r2, r2
  if(newBrightness != brightness) { // Compare against prior value
 23fcc6c:	4293      	cmp	r3, r2
void Adafruit_NeoPixel::setBrightness(uint8_t b) {
 23fcc6e:	b570      	push	{r4, r5, r6, lr}
  if(newBrightness != brightness) { // Compare against prior value
 23fcc70:	d01f      	beq.n	23fccb2 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4c>
    // Brightness has changed -- re-scale existing data in RAM
    uint8_t  c,
            *ptr           = pixels,
             oldBrightness = brightness - 1; // De-wrap old brightness value
 23fcc72:	3b01      	subs	r3, #1
    uint16_t scale;
    if(oldBrightness == 0) scale = 0; // Avoid /0
 23fcc74:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
            *ptr           = pixels,
 23fcc78:	68c4      	ldr	r4, [r0, #12]
    if(oldBrightness == 0) scale = 0; // Avoid /0
 23fcc7a:	d00c      	beq.n	23fcc96 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x30>
    else if(b == 255) scale = 65535 / oldBrightness;
 23fcc7c:	29ff      	cmp	r1, #255	; 0xff
 23fcc7e:	bf0f      	iteee	eq
 23fcc80:	f64f 71ff 	movweq	r1, #65535	; 0xffff
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 23fcc84:	0211      	lslne	r1, r2, #8
 23fcc86:	f101 31ff 	addne.w	r1, r1, #4294967295
 23fcc8a:	fbb1 f3f3 	udivne	r3, r1, r3
    else if(b == 255) scale = 65535 / oldBrightness;
 23fcc8e:	bf0c      	ite	eq
 23fcc90:	fbb1 f3f3 	udiveq	r3, r1, r3
    else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
 23fcc94:	b29b      	uxthne	r3, r3
            *ptr           = pixels,
 23fcc96:	4625      	mov	r5, r4
    for(uint16_t i=0; i<numBytes; i++) {
 23fcc98:	8886      	ldrh	r6, [r0, #4]
 23fcc9a:	1b29      	subs	r1, r5, r4
 23fcc9c:	b289      	uxth	r1, r1
 23fcc9e:	428e      	cmp	r6, r1
 23fcca0:	d906      	bls.n	23fccb0 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x4a>
      c      = *ptr;
      *ptr++ = (c * scale) >> 8;
 23fcca2:	7829      	ldrb	r1, [r5, #0]
 23fcca4:	4359      	muls	r1, r3
 23fcca6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 23fccaa:	f805 1b01 	strb.w	r1, [r5], #1
    for(uint16_t i=0; i<numBytes; i++) {
 23fccae:	e7f3      	b.n	23fcc98 <_ZN17Adafruit_NeoPixel13setBrightnessEh+0x32>
    }
    brightness = newBrightness;
 23fccb0:	7202      	strb	r2, [r0, #8]
  }
}
 23fccb2:	bd70      	pop	{r4, r5, r6, pc}

023fccb4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fccb4:	b509      	push	{r0, r3, lr}
 23fccb6:	4804      	ldr	r0, [pc, #16]	; (23fccc8 <netdb_freeaddrinfo+0x14>)
 23fccb8:	6800      	ldr	r0, [r0, #0]
 23fccba:	4b04      	ldr	r3, [pc, #16]	; (23fcccc <netdb_freeaddrinfo+0x18>)
 23fccbc:	4403      	add	r3, r0
 23fccbe:	681b      	ldr	r3, [r3, #0]
 23fccc0:	689b      	ldr	r3, [r3, #8]
 23fccc2:	9302      	str	r3, [sp, #8]
 23fccc4:	bd09      	pop	{r0, r3, pc}
 23fccc6:	0000      	.short	0x0000
 23fccc8:	1007ad70 	.word	0x1007ad70
 23fcccc:	00000050 	.word	0x00000050

023fccd0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fccd0:	b509      	push	{r0, r3, lr}
 23fccd2:	4804      	ldr	r0, [pc, #16]	; (23fcce4 <netdb_getaddrinfo+0x14>)
 23fccd4:	6800      	ldr	r0, [r0, #0]
 23fccd6:	4b04      	ldr	r3, [pc, #16]	; (23fcce8 <netdb_getaddrinfo+0x18>)
 23fccd8:	4403      	add	r3, r0
 23fccda:	681b      	ldr	r3, [r3, #0]
 23fccdc:	68db      	ldr	r3, [r3, #12]
 23fccde:	9302      	str	r3, [sp, #8]
 23fcce0:	bd09      	pop	{r0, r3, pc}
 23fcce2:	0000      	.short	0x0000
 23fcce4:	1007ad70 	.word	0x1007ad70
 23fcce8:	00000050 	.word	0x00000050

023fccec <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fccec:	b509      	push	{r0, r3, lr}
 23fccee:	4804      	ldr	r0, [pc, #16]	; (23fcd00 <hal_gpio_mode+0x14>)
 23fccf0:	6800      	ldr	r0, [r0, #0]
 23fccf2:	4b04      	ldr	r3, [pc, #16]	; (23fcd04 <hal_gpio_mode+0x18>)
 23fccf4:	4403      	add	r3, r0
 23fccf6:	681b      	ldr	r3, [r3, #0]
 23fccf8:	689b      	ldr	r3, [r3, #8]
 23fccfa:	9302      	str	r3, [sp, #8]
 23fccfc:	bd09      	pop	{r0, r3, pc}
 23fccfe:	0000      	.short	0x0000
 23fcd00:	1007ad70 	.word	0x1007ad70
 23fcd04:	00000014 	.word	0x00000014

023fcd08 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fcd08:	b509      	push	{r0, r3, lr}
 23fcd0a:	4804      	ldr	r0, [pc, #16]	; (23fcd1c <hal_gpio_get_mode+0x14>)
 23fcd0c:	6800      	ldr	r0, [r0, #0]
 23fcd0e:	4b04      	ldr	r3, [pc, #16]	; (23fcd20 <hal_gpio_get_mode+0x18>)
 23fcd10:	4403      	add	r3, r0
 23fcd12:	681b      	ldr	r3, [r3, #0]
 23fcd14:	68db      	ldr	r3, [r3, #12]
 23fcd16:	9302      	str	r3, [sp, #8]
 23fcd18:	bd09      	pop	{r0, r3, pc}
 23fcd1a:	0000      	.short	0x0000
 23fcd1c:	1007ad70 	.word	0x1007ad70
 23fcd20:	00000014 	.word	0x00000014

023fcd24 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fcd24:	b509      	push	{r0, r3, lr}
 23fcd26:	4804      	ldr	r0, [pc, #16]	; (23fcd38 <hal_gpio_write+0x14>)
 23fcd28:	6800      	ldr	r0, [r0, #0]
 23fcd2a:	4b04      	ldr	r3, [pc, #16]	; (23fcd3c <hal_gpio_write+0x18>)
 23fcd2c:	4403      	add	r3, r0
 23fcd2e:	681b      	ldr	r3, [r3, #0]
 23fcd30:	691b      	ldr	r3, [r3, #16]
 23fcd32:	9302      	str	r3, [sp, #8]
 23fcd34:	bd09      	pop	{r0, r3, pc}
 23fcd36:	0000      	.short	0x0000
 23fcd38:	1007ad70 	.word	0x1007ad70
 23fcd3c:	00000014 	.word	0x00000014

023fcd40 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
 23fcd40:	b509      	push	{r0, r3, lr}
 23fcd42:	4804      	ldr	r0, [pc, #16]	; (23fcd54 <hal_gpio_read+0x14>)
 23fcd44:	6800      	ldr	r0, [r0, #0]
 23fcd46:	4b04      	ldr	r3, [pc, #16]	; (23fcd58 <hal_gpio_read+0x18>)
 23fcd48:	4403      	add	r3, r0
 23fcd4a:	681b      	ldr	r3, [r3, #0]
 23fcd4c:	695b      	ldr	r3, [r3, #20]
 23fcd4e:	9302      	str	r3, [sp, #8]
 23fcd50:	bd09      	pop	{r0, r3, pc}
 23fcd52:	0000      	.short	0x0000
 23fcd54:	1007ad70 	.word	0x1007ad70
 23fcd58:	00000014 	.word	0x00000014

023fcd5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fcd5c:	b509      	push	{r0, r3, lr}
 23fcd5e:	4804      	ldr	r0, [pc, #16]	; (23fcd70 <HAL_RNG_GetRandomNumber+0x14>)
 23fcd60:	6800      	ldr	r0, [r0, #0]
 23fcd62:	4b04      	ldr	r3, [pc, #16]	; (23fcd74 <HAL_RNG_GetRandomNumber+0x18>)
 23fcd64:	4403      	add	r3, r0
 23fcd66:	681b      	ldr	r3, [r3, #0]
 23fcd68:	685b      	ldr	r3, [r3, #4]
 23fcd6a:	9302      	str	r3, [sp, #8]
 23fcd6c:	bd09      	pop	{r0, r3, pc}
 23fcd6e:	0000      	.short	0x0000
 23fcd70:	1007ad70 	.word	0x1007ad70
 23fcd74:	00000000 	.word	0x00000000

023fcd78 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fcd78:	b509      	push	{r0, r3, lr}
 23fcd7a:	4804      	ldr	r0, [pc, #16]	; (23fcd8c <HAL_Delay_Microseconds+0x14>)
 23fcd7c:	6800      	ldr	r0, [r0, #0]
 23fcd7e:	4b04      	ldr	r3, [pc, #16]	; (23fcd90 <HAL_Delay_Microseconds+0x18>)
 23fcd80:	4403      	add	r3, r0
 23fcd82:	681b      	ldr	r3, [r3, #0]
 23fcd84:	68db      	ldr	r3, [r3, #12]
 23fcd86:	9302      	str	r3, [sp, #8]
 23fcd88:	bd09      	pop	{r0, r3, pc}
 23fcd8a:	0000      	.short	0x0000
 23fcd8c:	1007ad70 	.word	0x1007ad70
 23fcd90:	00000000 	.word	0x00000000

023fcd94 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 23fcd94:	b509      	push	{r0, r3, lr}
 23fcd96:	4804      	ldr	r0, [pc, #16]	; (23fcda8 <HAL_Timer_Get_Micro_Seconds+0x14>)
 23fcd98:	6800      	ldr	r0, [r0, #0]
 23fcd9a:	4b04      	ldr	r3, [pc, #16]	; (23fcdac <HAL_Timer_Get_Micro_Seconds+0x18>)
 23fcd9c:	4403      	add	r3, r0
 23fcd9e:	681b      	ldr	r3, [r3, #0]
 23fcda0:	691b      	ldr	r3, [r3, #16]
 23fcda2:	9302      	str	r3, [sp, #8]
 23fcda4:	bd09      	pop	{r0, r3, pc}
 23fcda6:	0000      	.short	0x0000
 23fcda8:	1007ad70 	.word	0x1007ad70
 23fcdac:	00000000 	.word	0x00000000

023fcdb0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fcdb0:	b509      	push	{r0, r3, lr}
 23fcdb2:	4804      	ldr	r0, [pc, #16]	; (23fcdc4 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fcdb4:	6800      	ldr	r0, [r0, #0]
 23fcdb6:	4b04      	ldr	r3, [pc, #16]	; (23fcdc8 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fcdb8:	4403      	add	r3, r0
 23fcdba:	681b      	ldr	r3, [r3, #0]
 23fcdbc:	695b      	ldr	r3, [r3, #20]
 23fcdbe:	9302      	str	r3, [sp, #8]
 23fcdc0:	bd09      	pop	{r0, r3, pc}
 23fcdc2:	0000      	.short	0x0000
 23fcdc4:	1007ad70 	.word	0x1007ad70
 23fcdc8:	00000000 	.word	0x00000000

023fcdcc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fcdcc:	b509      	push	{r0, r3, lr}
 23fcdce:	4804      	ldr	r0, [pc, #16]	; (23fcde0 <os_mutex_recursive_create+0x14>)
 23fcdd0:	6800      	ldr	r0, [r0, #0]
 23fcdd2:	4b04      	ldr	r3, [pc, #16]	; (23fcde4 <os_mutex_recursive_create+0x18>)
 23fcdd4:	4403      	add	r3, r0
 23fcdd6:	681b      	ldr	r3, [r3, #0]
 23fcdd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fcdda:	9302      	str	r3, [sp, #8]
 23fcddc:	bd09      	pop	{r0, r3, pc}
 23fcdde:	0000      	.short	0x0000
 23fcde0:	1007ad70 	.word	0x1007ad70
 23fcde4:	00000030 	.word	0x00000030

023fcde8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fcde8:	b509      	push	{r0, r3, lr}
 23fcdea:	4804      	ldr	r0, [pc, #16]	; (23fcdfc <os_mutex_recursive_destroy+0x14>)
 23fcdec:	6800      	ldr	r0, [r0, #0]
 23fcdee:	4b04      	ldr	r3, [pc, #16]	; (23fce00 <os_mutex_recursive_destroy+0x18>)
 23fcdf0:	4403      	add	r3, r0
 23fcdf2:	681b      	ldr	r3, [r3, #0]
 23fcdf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fcdf6:	9302      	str	r3, [sp, #8]
 23fcdf8:	bd09      	pop	{r0, r3, pc}
 23fcdfa:	0000      	.short	0x0000
 23fcdfc:	1007ad70 	.word	0x1007ad70
 23fce00:	00000030 	.word	0x00000030

023fce04 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fce04:	b509      	push	{r0, r3, lr}
 23fce06:	4804      	ldr	r0, [pc, #16]	; (23fce18 <os_mutex_recursive_lock+0x14>)
 23fce08:	6800      	ldr	r0, [r0, #0]
 23fce0a:	4b04      	ldr	r3, [pc, #16]	; (23fce1c <os_mutex_recursive_lock+0x18>)
 23fce0c:	4403      	add	r3, r0
 23fce0e:	681b      	ldr	r3, [r3, #0]
 23fce10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fce12:	9302      	str	r3, [sp, #8]
 23fce14:	bd09      	pop	{r0, r3, pc}
 23fce16:	0000      	.short	0x0000
 23fce18:	1007ad70 	.word	0x1007ad70
 23fce1c:	00000030 	.word	0x00000030

023fce20 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fce20:	b509      	push	{r0, r3, lr}
 23fce22:	4804      	ldr	r0, [pc, #16]	; (23fce34 <os_mutex_recursive_unlock+0x14>)
 23fce24:	6800      	ldr	r0, [r0, #0]
 23fce26:	4b04      	ldr	r3, [pc, #16]	; (23fce38 <os_mutex_recursive_unlock+0x18>)
 23fce28:	4403      	add	r3, r0
 23fce2a:	681b      	ldr	r3, [r3, #0]
 23fce2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fce2e:	9302      	str	r3, [sp, #8]
 23fce30:	bd09      	pop	{r0, r3, pc}
 23fce32:	0000      	.short	0x0000
 23fce34:	1007ad70 	.word	0x1007ad70
 23fce38:	00000030 	.word	0x00000030

023fce3c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fce3c:	b509      	push	{r0, r3, lr}
 23fce3e:	4804      	ldr	r0, [pc, #16]	; (23fce50 <inet_inet_ntop+0x14>)
 23fce40:	6800      	ldr	r0, [r0, #0]
 23fce42:	4b04      	ldr	r3, [pc, #16]	; (23fce54 <inet_inet_ntop+0x18>)
 23fce44:	4403      	add	r3, r0
 23fce46:	681b      	ldr	r3, [r3, #0]
 23fce48:	695b      	ldr	r3, [r3, #20]
 23fce4a:	9302      	str	r3, [sp, #8]
 23fce4c:	bd09      	pop	{r0, r3, pc}
 23fce4e:	0000      	.short	0x0000
 23fce50:	1007ad70 	.word	0x1007ad70
 23fce54:	0000004c 	.word	0x0000004c

023fce58 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23fce58:	b509      	push	{r0, r3, lr}
 23fce5a:	4804      	ldr	r0, [pc, #16]	; (23fce6c <hal_usart_end+0x14>)
 23fce5c:	6800      	ldr	r0, [r0, #0]
 23fce5e:	4b04      	ldr	r3, [pc, #16]	; (23fce70 <hal_usart_end+0x18>)
 23fce60:	4403      	add	r3, r0
 23fce62:	681b      	ldr	r3, [r3, #0]
 23fce64:	689b      	ldr	r3, [r3, #8]
 23fce66:	9302      	str	r3, [sp, #8]
 23fce68:	bd09      	pop	{r0, r3, pc}
 23fce6a:	0000      	.short	0x0000
 23fce6c:	1007ad70 	.word	0x1007ad70
 23fce70:	00000024 	.word	0x00000024

023fce74 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fce74:	b509      	push	{r0, r3, lr}
 23fce76:	4804      	ldr	r0, [pc, #16]	; (23fce88 <hal_usart_write+0x14>)
 23fce78:	6800      	ldr	r0, [r0, #0]
 23fce7a:	4b04      	ldr	r3, [pc, #16]	; (23fce8c <hal_usart_write+0x18>)
 23fce7c:	4403      	add	r3, r0
 23fce7e:	681b      	ldr	r3, [r3, #0]
 23fce80:	68db      	ldr	r3, [r3, #12]
 23fce82:	9302      	str	r3, [sp, #8]
 23fce84:	bd09      	pop	{r0, r3, pc}
 23fce86:	0000      	.short	0x0000
 23fce88:	1007ad70 	.word	0x1007ad70
 23fce8c:	00000024 	.word	0x00000024

023fce90 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fce90:	b509      	push	{r0, r3, lr}
 23fce92:	4804      	ldr	r0, [pc, #16]	; (23fcea4 <hal_usart_available+0x14>)
 23fce94:	6800      	ldr	r0, [r0, #0]
 23fce96:	4b04      	ldr	r3, [pc, #16]	; (23fcea8 <hal_usart_available+0x18>)
 23fce98:	4403      	add	r3, r0
 23fce9a:	681b      	ldr	r3, [r3, #0]
 23fce9c:	691b      	ldr	r3, [r3, #16]
 23fce9e:	9302      	str	r3, [sp, #8]
 23fcea0:	bd09      	pop	{r0, r3, pc}
 23fcea2:	0000      	.short	0x0000
 23fcea4:	1007ad70 	.word	0x1007ad70
 23fcea8:	00000024 	.word	0x00000024

023fceac <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fceac:	b509      	push	{r0, r3, lr}
 23fceae:	4804      	ldr	r0, [pc, #16]	; (23fcec0 <hal_usart_read+0x14>)
 23fceb0:	6800      	ldr	r0, [r0, #0]
 23fceb2:	4b04      	ldr	r3, [pc, #16]	; (23fcec4 <hal_usart_read+0x18>)
 23fceb4:	4403      	add	r3, r0
 23fceb6:	681b      	ldr	r3, [r3, #0]
 23fceb8:	695b      	ldr	r3, [r3, #20]
 23fceba:	9302      	str	r3, [sp, #8]
 23fcebc:	bd09      	pop	{r0, r3, pc}
 23fcebe:	0000      	.short	0x0000
 23fcec0:	1007ad70 	.word	0x1007ad70
 23fcec4:	00000024 	.word	0x00000024

023fcec8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fcec8:	b509      	push	{r0, r3, lr}
 23fceca:	4804      	ldr	r0, [pc, #16]	; (23fcedc <hal_usart_peek+0x14>)
 23fcecc:	6800      	ldr	r0, [r0, #0]
 23fcece:	4b04      	ldr	r3, [pc, #16]	; (23fcee0 <hal_usart_peek+0x18>)
 23fced0:	4403      	add	r3, r0
 23fced2:	681b      	ldr	r3, [r3, #0]
 23fced4:	699b      	ldr	r3, [r3, #24]
 23fced6:	9302      	str	r3, [sp, #8]
 23fced8:	bd09      	pop	{r0, r3, pc}
 23fceda:	0000      	.short	0x0000
 23fcedc:	1007ad70 	.word	0x1007ad70
 23fcee0:	00000024 	.word	0x00000024

023fcee4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fcee4:	b509      	push	{r0, r3, lr}
 23fcee6:	4804      	ldr	r0, [pc, #16]	; (23fcef8 <hal_usart_flush+0x14>)
 23fcee8:	6800      	ldr	r0, [r0, #0]
 23fceea:	4b04      	ldr	r3, [pc, #16]	; (23fcefc <hal_usart_flush+0x18>)
 23fceec:	4403      	add	r3, r0
 23fceee:	681b      	ldr	r3, [r3, #0]
 23fcef0:	69db      	ldr	r3, [r3, #28]
 23fcef2:	9302      	str	r3, [sp, #8]
 23fcef4:	bd09      	pop	{r0, r3, pc}
 23fcef6:	0000      	.short	0x0000
 23fcef8:	1007ad70 	.word	0x1007ad70
 23fcefc:	00000024 	.word	0x00000024

023fcf00 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fcf00:	b509      	push	{r0, r3, lr}
 23fcf02:	4804      	ldr	r0, [pc, #16]	; (23fcf14 <hal_usart_is_enabled+0x14>)
 23fcf04:	6800      	ldr	r0, [r0, #0]
 23fcf06:	4b04      	ldr	r3, [pc, #16]	; (23fcf18 <hal_usart_is_enabled+0x18>)
 23fcf08:	4403      	add	r3, r0
 23fcf0a:	681b      	ldr	r3, [r3, #0]
 23fcf0c:	6a1b      	ldr	r3, [r3, #32]
 23fcf0e:	9302      	str	r3, [sp, #8]
 23fcf10:	bd09      	pop	{r0, r3, pc}
 23fcf12:	0000      	.short	0x0000
 23fcf14:	1007ad70 	.word	0x1007ad70
 23fcf18:	00000024 	.word	0x00000024

023fcf1c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fcf1c:	b509      	push	{r0, r3, lr}
 23fcf1e:	4804      	ldr	r0, [pc, #16]	; (23fcf30 <hal_usart_available_data_for_write+0x14>)
 23fcf20:	6800      	ldr	r0, [r0, #0]
 23fcf22:	4b04      	ldr	r3, [pc, #16]	; (23fcf34 <hal_usart_available_data_for_write+0x18>)
 23fcf24:	4403      	add	r3, r0
 23fcf26:	681b      	ldr	r3, [r3, #0]
 23fcf28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcf2a:	9302      	str	r3, [sp, #8]
 23fcf2c:	bd09      	pop	{r0, r3, pc}
 23fcf2e:	0000      	.short	0x0000
 23fcf30:	1007ad70 	.word	0x1007ad70
 23fcf34:	00000024 	.word	0x00000024

023fcf38 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fcf38:	b509      	push	{r0, r3, lr}
 23fcf3a:	4804      	ldr	r0, [pc, #16]	; (23fcf4c <hal_usart_begin_config+0x14>)
 23fcf3c:	6800      	ldr	r0, [r0, #0]
 23fcf3e:	4b04      	ldr	r3, [pc, #16]	; (23fcf50 <hal_usart_begin_config+0x18>)
 23fcf40:	4403      	add	r3, r0
 23fcf42:	681b      	ldr	r3, [r3, #0]
 23fcf44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcf46:	9302      	str	r3, [sp, #8]
 23fcf48:	bd09      	pop	{r0, r3, pc}
 23fcf4a:	0000      	.short	0x0000
 23fcf4c:	1007ad70 	.word	0x1007ad70
 23fcf50:	00000024 	.word	0x00000024

023fcf54 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fcf54:	b509      	push	{r0, r3, lr}
 23fcf56:	4804      	ldr	r0, [pc, #16]	; (23fcf68 <hal_usart_init_ex+0x14>)
 23fcf58:	6800      	ldr	r0, [r0, #0]
 23fcf5a:	4b04      	ldr	r3, [pc, #16]	; (23fcf6c <hal_usart_init_ex+0x18>)
 23fcf5c:	4403      	add	r3, r0
 23fcf5e:	681b      	ldr	r3, [r3, #0]
 23fcf60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fcf62:	9302      	str	r3, [sp, #8]
 23fcf64:	bd09      	pop	{r0, r3, pc}
 23fcf66:	0000      	.short	0x0000
 23fcf68:	1007ad70 	.word	0x1007ad70
 23fcf6c:	00000024 	.word	0x00000024

023fcf70 <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fcf70:	b509      	push	{r0, r3, lr}
 23fcf72:	4804      	ldr	r0, [pc, #16]	; (23fcf84 <hal_i2c_write+0x14>)
 23fcf74:	6800      	ldr	r0, [r0, #0]
 23fcf76:	4b04      	ldr	r3, [pc, #16]	; (23fcf88 <hal_i2c_write+0x18>)
 23fcf78:	4403      	add	r3, r0
 23fcf7a:	681b      	ldr	r3, [r3, #0]
 23fcf7c:	6a1b      	ldr	r3, [r3, #32]
 23fcf7e:	9302      	str	r3, [sp, #8]
 23fcf80:	bd09      	pop	{r0, r3, pc}
 23fcf82:	0000      	.short	0x0000
 23fcf84:	1007ad70 	.word	0x1007ad70
 23fcf88:	00000010 	.word	0x00000010

023fcf8c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fcf8c:	b509      	push	{r0, r3, lr}
 23fcf8e:	4804      	ldr	r0, [pc, #16]	; (23fcfa0 <hal_i2c_available+0x14>)
 23fcf90:	6800      	ldr	r0, [r0, #0]
 23fcf92:	4b04      	ldr	r3, [pc, #16]	; (23fcfa4 <hal_i2c_available+0x18>)
 23fcf94:	4403      	add	r3, r0
 23fcf96:	681b      	ldr	r3, [r3, #0]
 23fcf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fcf9a:	9302      	str	r3, [sp, #8]
 23fcf9c:	bd09      	pop	{r0, r3, pc}
 23fcf9e:	0000      	.short	0x0000
 23fcfa0:	1007ad70 	.word	0x1007ad70
 23fcfa4:	00000010 	.word	0x00000010

023fcfa8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fcfa8:	b509      	push	{r0, r3, lr}
 23fcfaa:	4804      	ldr	r0, [pc, #16]	; (23fcfbc <hal_i2c_read+0x14>)
 23fcfac:	6800      	ldr	r0, [r0, #0]
 23fcfae:	4b04      	ldr	r3, [pc, #16]	; (23fcfc0 <hal_i2c_read+0x18>)
 23fcfb0:	4403      	add	r3, r0
 23fcfb2:	681b      	ldr	r3, [r3, #0]
 23fcfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fcfb6:	9302      	str	r3, [sp, #8]
 23fcfb8:	bd09      	pop	{r0, r3, pc}
 23fcfba:	0000      	.short	0x0000
 23fcfbc:	1007ad70 	.word	0x1007ad70
 23fcfc0:	00000010 	.word	0x00000010

023fcfc4 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fcfc4:	b509      	push	{r0, r3, lr}
 23fcfc6:	4804      	ldr	r0, [pc, #16]	; (23fcfd8 <hal_i2c_peek+0x14>)
 23fcfc8:	6800      	ldr	r0, [r0, #0]
 23fcfca:	4b04      	ldr	r3, [pc, #16]	; (23fcfdc <hal_i2c_peek+0x18>)
 23fcfcc:	4403      	add	r3, r0
 23fcfce:	681b      	ldr	r3, [r3, #0]
 23fcfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fcfd2:	9302      	str	r3, [sp, #8]
 23fcfd4:	bd09      	pop	{r0, r3, pc}
 23fcfd6:	0000      	.short	0x0000
 23fcfd8:	1007ad70 	.word	0x1007ad70
 23fcfdc:	00000010 	.word	0x00000010

023fcfe0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fcfe0:	b509      	push	{r0, r3, lr}
 23fcfe2:	4804      	ldr	r0, [pc, #16]	; (23fcff4 <hal_i2c_flush+0x14>)
 23fcfe4:	6800      	ldr	r0, [r0, #0]
 23fcfe6:	4b04      	ldr	r3, [pc, #16]	; (23fcff8 <hal_i2c_flush+0x18>)
 23fcfe8:	4403      	add	r3, r0
 23fcfea:	681b      	ldr	r3, [r3, #0]
 23fcfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fcfee:	9302      	str	r3, [sp, #8]
 23fcff0:	bd09      	pop	{r0, r3, pc}
 23fcff2:	0000      	.short	0x0000
 23fcff4:	1007ad70 	.word	0x1007ad70
 23fcff8:	00000010 	.word	0x00000010

023fcffc <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fcffc:	b509      	push	{r0, r3, lr}
 23fcffe:	4804      	ldr	r0, [pc, #16]	; (23fd010 <hal_i2c_is_enabled+0x14>)
 23fd000:	6800      	ldr	r0, [r0, #0]
 23fd002:	4b04      	ldr	r3, [pc, #16]	; (23fd014 <hal_i2c_is_enabled+0x18>)
 23fd004:	4403      	add	r3, r0
 23fd006:	681b      	ldr	r3, [r3, #0]
 23fd008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd00a:	9302      	str	r3, [sp, #8]
 23fd00c:	bd09      	pop	{r0, r3, pc}
 23fd00e:	0000      	.short	0x0000
 23fd010:	1007ad70 	.word	0x1007ad70
 23fd014:	00000010 	.word	0x00000010

023fd018 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fd018:	b509      	push	{r0, r3, lr}
 23fd01a:	4804      	ldr	r0, [pc, #16]	; (23fd02c <hal_i2c_init+0x14>)
 23fd01c:	6800      	ldr	r0, [r0, #0]
 23fd01e:	4b04      	ldr	r3, [pc, #16]	; (23fd030 <hal_i2c_init+0x18>)
 23fd020:	4403      	add	r3, r0
 23fd022:	681b      	ldr	r3, [r3, #0]
 23fd024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd026:	9302      	str	r3, [sp, #8]
 23fd028:	bd09      	pop	{r0, r3, pc}
 23fd02a:	0000      	.short	0x0000
 23fd02c:	1007ad70 	.word	0x1007ad70
 23fd030:	00000010 	.word	0x00000010

023fd034 <hal_spi_set_clock_divider>:

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
 23fd034:	b509      	push	{r0, r3, lr}
 23fd036:	4804      	ldr	r0, [pc, #16]	; (23fd048 <hal_spi_set_clock_divider+0x14>)
 23fd038:	6800      	ldr	r0, [r0, #0]
 23fd03a:	4b04      	ldr	r3, [pc, #16]	; (23fd04c <hal_spi_set_clock_divider+0x18>)
 23fd03c:	4403      	add	r3, r0
 23fd03e:	681b      	ldr	r3, [r3, #0]
 23fd040:	691b      	ldr	r3, [r3, #16]
 23fd042:	9302      	str	r3, [sp, #8]
 23fd044:	bd09      	pop	{r0, r3, pc}
 23fd046:	0000      	.short	0x0000
 23fd048:	1007ad70 	.word	0x1007ad70
 23fd04c:	00000018 	.word	0x00000018

023fd050 <hal_spi_init>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fd050:	b509      	push	{r0, r3, lr}
 23fd052:	4804      	ldr	r0, [pc, #16]	; (23fd064 <hal_spi_init+0x14>)
 23fd054:	6800      	ldr	r0, [r0, #0]
 23fd056:	4b04      	ldr	r3, [pc, #16]	; (23fd068 <hal_spi_init+0x18>)
 23fd058:	4403      	add	r3, r0
 23fd05a:	681b      	ldr	r3, [r3, #0]
 23fd05c:	69db      	ldr	r3, [r3, #28]
 23fd05e:	9302      	str	r3, [sp, #8]
 23fd060:	bd09      	pop	{r0, r3, pc}
 23fd062:	0000      	.short	0x0000
 23fd064:	1007ad70 	.word	0x1007ad70
 23fd068:	00000018 	.word	0x00000018

023fd06c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fd06c:	b509      	push	{r0, r3, lr}
 23fd06e:	4804      	ldr	r0, [pc, #16]	; (23fd080 <hal_spi_is_enabled+0x14>)
 23fd070:	6800      	ldr	r0, [r0, #0]
 23fd072:	4b04      	ldr	r3, [pc, #16]	; (23fd084 <hal_spi_is_enabled+0x18>)
 23fd074:	4403      	add	r3, r0
 23fd076:	681b      	ldr	r3, [r3, #0]
 23fd078:	6a1b      	ldr	r3, [r3, #32]
 23fd07a:	9302      	str	r3, [sp, #8]
 23fd07c:	bd09      	pop	{r0, r3, pc}
 23fd07e:	0000      	.short	0x0000
 23fd080:	1007ad70 	.word	0x1007ad70
 23fd084:	00000018 	.word	0x00000018

023fd088 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fd088:	b509      	push	{r0, r3, lr}
 23fd08a:	4804      	ldr	r0, [pc, #16]	; (23fd09c <hal_spi_info+0x14>)
 23fd08c:	6800      	ldr	r0, [r0, #0]
 23fd08e:	4b04      	ldr	r3, [pc, #16]	; (23fd0a0 <hal_spi_info+0x18>)
 23fd090:	4403      	add	r3, r0
 23fd092:	681b      	ldr	r3, [r3, #0]
 23fd094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd096:	9302      	str	r3, [sp, #8]
 23fd098:	bd09      	pop	{r0, r3, pc}
 23fd09a:	0000      	.short	0x0000
 23fd09c:	1007ad70 	.word	0x1007ad70
 23fd0a0:	00000018 	.word	0x00000018

023fd0a4 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
 23fd0a4:	b509      	push	{r0, r3, lr}
 23fd0a6:	4804      	ldr	r0, [pc, #16]	; (23fd0b8 <hal_spi_transfer_dma+0x14>)
 23fd0a8:	6800      	ldr	r0, [r0, #0]
 23fd0aa:	4b04      	ldr	r3, [pc, #16]	; (23fd0bc <hal_spi_transfer_dma+0x18>)
 23fd0ac:	4403      	add	r3, r0
 23fd0ae:	681b      	ldr	r3, [r3, #0]
 23fd0b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fd0b2:	9302      	str	r3, [sp, #8]
 23fd0b4:	bd09      	pop	{r0, r3, pc}
 23fd0b6:	0000      	.short	0x0000
 23fd0b8:	1007ad70 	.word	0x1007ad70
 23fd0bc:	00000018 	.word	0x00000018

023fd0c0 <hal_spi_begin_ext>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, const hal_spi_config_t*))
 23fd0c0:	b509      	push	{r0, r3, lr}
 23fd0c2:	4804      	ldr	r0, [pc, #16]	; (23fd0d4 <hal_spi_begin_ext+0x14>)
 23fd0c4:	6800      	ldr	r0, [r0, #0]
 23fd0c6:	4b04      	ldr	r3, [pc, #16]	; (23fd0d8 <hal_spi_begin_ext+0x18>)
 23fd0c8:	4403      	add	r3, r0
 23fd0ca:	681b      	ldr	r3, [r3, #0]
 23fd0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd0ce:	9302      	str	r3, [sp, #8]
 23fd0d0:	bd09      	pop	{r0, r3, pc}
 23fd0d2:	0000      	.short	0x0000
 23fd0d4:	1007ad70 	.word	0x1007ad70
 23fd0d8:	00000018 	.word	0x00000018

023fd0dc <hal_spi_transfer_dma_status>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
 23fd0dc:	b509      	push	{r0, r3, lr}
 23fd0de:	4804      	ldr	r0, [pc, #16]	; (23fd0f0 <hal_spi_transfer_dma_status+0x14>)
 23fd0e0:	6800      	ldr	r0, [r0, #0]
 23fd0e2:	4b04      	ldr	r3, [pc, #16]	; (23fd0f4 <hal_spi_transfer_dma_status+0x18>)
 23fd0e4:	4403      	add	r3, r0
 23fd0e6:	681b      	ldr	r3, [r3, #0]
 23fd0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fd0ea:	9302      	str	r3, [sp, #8]
 23fd0ec:	bd09      	pop	{r0, r3, pc}
 23fd0ee:	0000      	.short	0x0000
 23fd0f0:	1007ad70 	.word	0x1007ad70
 23fd0f4:	00000018 	.word	0x00000018

023fd0f8 <hal_spi_acquire>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fd0f8:	b509      	push	{r0, r3, lr}
 23fd0fa:	4804      	ldr	r0, [pc, #16]	; (23fd10c <hal_spi_acquire+0x14>)
 23fd0fc:	6800      	ldr	r0, [r0, #0]
 23fd0fe:	4b04      	ldr	r3, [pc, #16]	; (23fd110 <hal_spi_acquire+0x18>)
 23fd100:	4403      	add	r3, r0
 23fd102:	681b      	ldr	r3, [r3, #0]
 23fd104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd106:	9302      	str	r3, [sp, #8]
 23fd108:	bd09      	pop	{r0, r3, pc}
 23fd10a:	0000      	.short	0x0000
 23fd10c:	1007ad70 	.word	0x1007ad70
 23fd110:	00000018 	.word	0x00000018

023fd114 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fd114:	b509      	push	{r0, r3, lr}
 23fd116:	4804      	ldr	r0, [pc, #16]	; (23fd128 <hal_spi_release+0x14>)
 23fd118:	6800      	ldr	r0, [r0, #0]
 23fd11a:	4b04      	ldr	r3, [pc, #16]	; (23fd12c <hal_spi_release+0x18>)
 23fd11c:	4403      	add	r3, r0
 23fd11e:	681b      	ldr	r3, [r3, #0]
 23fd120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd122:	9302      	str	r3, [sp, #8]
 23fd124:	bd09      	pop	{r0, r3, pc}
 23fd126:	0000      	.short	0x0000
 23fd128:	1007ad70 	.word	0x1007ad70
 23fd12c:	00000018 	.word	0x00000018

023fd130 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fd130:	b509      	push	{r0, r3, lr}
 23fd132:	4804      	ldr	r0, [pc, #16]	; (23fd144 <HAL_USB_USART_Init+0x14>)
 23fd134:	6800      	ldr	r0, [r0, #0]
 23fd136:	4b04      	ldr	r3, [pc, #16]	; (23fd148 <HAL_USB_USART_Init+0x18>)
 23fd138:	4403      	add	r3, r0
 23fd13a:	681b      	ldr	r3, [r3, #0]
 23fd13c:	681b      	ldr	r3, [r3, #0]
 23fd13e:	9302      	str	r3, [sp, #8]
 23fd140:	bd09      	pop	{r0, r3, pc}
 23fd142:	0000      	.short	0x0000
 23fd144:	1007ad70 	.word	0x1007ad70
 23fd148:	00000034 	.word	0x00000034

023fd14c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fd14c:	b509      	push	{r0, r3, lr}
 23fd14e:	4804      	ldr	r0, [pc, #16]	; (23fd160 <HAL_USB_USART_Begin+0x14>)
 23fd150:	6800      	ldr	r0, [r0, #0]
 23fd152:	4b04      	ldr	r3, [pc, #16]	; (23fd164 <HAL_USB_USART_Begin+0x18>)
 23fd154:	4403      	add	r3, r0
 23fd156:	681b      	ldr	r3, [r3, #0]
 23fd158:	685b      	ldr	r3, [r3, #4]
 23fd15a:	9302      	str	r3, [sp, #8]
 23fd15c:	bd09      	pop	{r0, r3, pc}
 23fd15e:	0000      	.short	0x0000
 23fd160:	1007ad70 	.word	0x1007ad70
 23fd164:	00000034 	.word	0x00000034

023fd168 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fd168:	b509      	push	{r0, r3, lr}
 23fd16a:	4804      	ldr	r0, [pc, #16]	; (23fd17c <HAL_USB_USART_End+0x14>)
 23fd16c:	6800      	ldr	r0, [r0, #0]
 23fd16e:	4b04      	ldr	r3, [pc, #16]	; (23fd180 <HAL_USB_USART_End+0x18>)
 23fd170:	4403      	add	r3, r0
 23fd172:	681b      	ldr	r3, [r3, #0]
 23fd174:	689b      	ldr	r3, [r3, #8]
 23fd176:	9302      	str	r3, [sp, #8]
 23fd178:	bd09      	pop	{r0, r3, pc}
 23fd17a:	0000      	.short	0x0000
 23fd17c:	1007ad70 	.word	0x1007ad70
 23fd180:	00000034 	.word	0x00000034

023fd184 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fd184:	b509      	push	{r0, r3, lr}
 23fd186:	4804      	ldr	r0, [pc, #16]	; (23fd198 <HAL_USB_USART_Available_Data+0x14>)
 23fd188:	6800      	ldr	r0, [r0, #0]
 23fd18a:	4b04      	ldr	r3, [pc, #16]	; (23fd19c <HAL_USB_USART_Available_Data+0x18>)
 23fd18c:	4403      	add	r3, r0
 23fd18e:	681b      	ldr	r3, [r3, #0]
 23fd190:	691b      	ldr	r3, [r3, #16]
 23fd192:	9302      	str	r3, [sp, #8]
 23fd194:	bd09      	pop	{r0, r3, pc}
 23fd196:	0000      	.short	0x0000
 23fd198:	1007ad70 	.word	0x1007ad70
 23fd19c:	00000034 	.word	0x00000034

023fd1a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fd1a0:	b509      	push	{r0, r3, lr}
 23fd1a2:	4804      	ldr	r0, [pc, #16]	; (23fd1b4 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fd1a4:	6800      	ldr	r0, [r0, #0]
 23fd1a6:	4b04      	ldr	r3, [pc, #16]	; (23fd1b8 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fd1a8:	4403      	add	r3, r0
 23fd1aa:	681b      	ldr	r3, [r3, #0]
 23fd1ac:	695b      	ldr	r3, [r3, #20]
 23fd1ae:	9302      	str	r3, [sp, #8]
 23fd1b0:	bd09      	pop	{r0, r3, pc}
 23fd1b2:	0000      	.short	0x0000
 23fd1b4:	1007ad70 	.word	0x1007ad70
 23fd1b8:	00000034 	.word	0x00000034

023fd1bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd1bc:	b509      	push	{r0, r3, lr}
 23fd1be:	4804      	ldr	r0, [pc, #16]	; (23fd1d0 <HAL_USB_USART_Receive_Data+0x14>)
 23fd1c0:	6800      	ldr	r0, [r0, #0]
 23fd1c2:	4b04      	ldr	r3, [pc, #16]	; (23fd1d4 <HAL_USB_USART_Receive_Data+0x18>)
 23fd1c4:	4403      	add	r3, r0
 23fd1c6:	681b      	ldr	r3, [r3, #0]
 23fd1c8:	699b      	ldr	r3, [r3, #24]
 23fd1ca:	9302      	str	r3, [sp, #8]
 23fd1cc:	bd09      	pop	{r0, r3, pc}
 23fd1ce:	0000      	.short	0x0000
 23fd1d0:	1007ad70 	.word	0x1007ad70
 23fd1d4:	00000034 	.word	0x00000034

023fd1d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fd1d8:	b509      	push	{r0, r3, lr}
 23fd1da:	4804      	ldr	r0, [pc, #16]	; (23fd1ec <HAL_USB_USART_Send_Data+0x14>)
 23fd1dc:	6800      	ldr	r0, [r0, #0]
 23fd1de:	4b04      	ldr	r3, [pc, #16]	; (23fd1f0 <HAL_USB_USART_Send_Data+0x18>)
 23fd1e0:	4403      	add	r3, r0
 23fd1e2:	681b      	ldr	r3, [r3, #0]
 23fd1e4:	69db      	ldr	r3, [r3, #28]
 23fd1e6:	9302      	str	r3, [sp, #8]
 23fd1e8:	bd09      	pop	{r0, r3, pc}
 23fd1ea:	0000      	.short	0x0000
 23fd1ec:	1007ad70 	.word	0x1007ad70
 23fd1f0:	00000034 	.word	0x00000034

023fd1f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fd1f4:	b509      	push	{r0, r3, lr}
 23fd1f6:	4804      	ldr	r0, [pc, #16]	; (23fd208 <HAL_USB_USART_Flush_Data+0x14>)
 23fd1f8:	6800      	ldr	r0, [r0, #0]
 23fd1fa:	4b04      	ldr	r3, [pc, #16]	; (23fd20c <HAL_USB_USART_Flush_Data+0x18>)
 23fd1fc:	4403      	add	r3, r0
 23fd1fe:	681b      	ldr	r3, [r3, #0]
 23fd200:	6a1b      	ldr	r3, [r3, #32]
 23fd202:	9302      	str	r3, [sp, #8]
 23fd204:	bd09      	pop	{r0, r3, pc}
 23fd206:	0000      	.short	0x0000
 23fd208:	1007ad70 	.word	0x1007ad70
 23fd20c:	00000034 	.word	0x00000034

023fd210 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fd210:	b509      	push	{r0, r3, lr}
 23fd212:	4804      	ldr	r0, [pc, #16]	; (23fd224 <panic_+0x14>)
 23fd214:	6800      	ldr	r0, [r0, #0]
 23fd216:	4b04      	ldr	r3, [pc, #16]	; (23fd228 <panic_+0x18>)
 23fd218:	4403      	add	r3, r0
 23fd21a:	681b      	ldr	r3, [r3, #0]
 23fd21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd21e:	9302      	str	r3, [sp, #8]
 23fd220:	bd09      	pop	{r0, r3, pc}
 23fd222:	0000      	.short	0x0000
 23fd224:	1007ad70 	.word	0x1007ad70
 23fd228:	00000048 	.word	0x00000048

023fd22c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fd22c:	b509      	push	{r0, r3, lr}
 23fd22e:	4804      	ldr	r0, [pc, #16]	; (23fd240 <log_message_v+0x14>)
 23fd230:	6800      	ldr	r0, [r0, #0]
 23fd232:	4b04      	ldr	r3, [pc, #16]	; (23fd244 <log_message_v+0x18>)
 23fd234:	4403      	add	r3, r0
 23fd236:	681b      	ldr	r3, [r3, #0]
 23fd238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd23a:	9302      	str	r3, [sp, #8]
 23fd23c:	bd09      	pop	{r0, r3, pc}
 23fd23e:	0000      	.short	0x0000
 23fd240:	1007ad70 	.word	0x1007ad70
 23fd244:	00000048 	.word	0x00000048

023fd248 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fd248:	b509      	push	{r0, r3, lr}
 23fd24a:	4804      	ldr	r0, [pc, #16]	; (23fd25c <log_level_name+0x14>)
 23fd24c:	6800      	ldr	r0, [r0, #0]
 23fd24e:	4b04      	ldr	r3, [pc, #16]	; (23fd260 <log_level_name+0x18>)
 23fd250:	4403      	add	r3, r0
 23fd252:	681b      	ldr	r3, [r3, #0]
 23fd254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fd256:	9302      	str	r3, [sp, #8]
 23fd258:	bd09      	pop	{r0, r3, pc}
 23fd25a:	0000      	.short	0x0000
 23fd25c:	1007ad70 	.word	0x1007ad70
 23fd260:	00000048 	.word	0x00000048

023fd264 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fd264:	b509      	push	{r0, r3, lr}
 23fd266:	4804      	ldr	r0, [pc, #16]	; (23fd278 <log_set_callbacks+0x14>)
 23fd268:	6800      	ldr	r0, [r0, #0]
 23fd26a:	4b04      	ldr	r3, [pc, #16]	; (23fd27c <log_set_callbacks+0x18>)
 23fd26c:	4403      	add	r3, r0
 23fd26e:	681b      	ldr	r3, [r3, #0]
 23fd270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fd272:	9302      	str	r3, [sp, #8]
 23fd274:	bd09      	pop	{r0, r3, pc}
 23fd276:	0000      	.short	0x0000
 23fd278:	1007ad70 	.word	0x1007ad70
 23fd27c:	00000048 	.word	0x00000048

023fd280 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fd280:	b509      	push	{r0, r3, lr}
 23fd282:	4804      	ldr	r0, [pc, #16]	; (23fd294 <set_system_mode+0x14>)
 23fd284:	6800      	ldr	r0, [r0, #0]
 23fd286:	4b04      	ldr	r3, [pc, #16]	; (23fd298 <set_system_mode+0x18>)
 23fd288:	4403      	add	r3, r0
 23fd28a:	681b      	ldr	r3, [r3, #0]
 23fd28c:	685b      	ldr	r3, [r3, #4]
 23fd28e:	9302      	str	r3, [sp, #8]
 23fd290:	bd09      	pop	{r0, r3, pc}
 23fd292:	0000      	.short	0x0000
 23fd294:	1007ad70 	.word	0x1007ad70
 23fd298:	00000008 	.word	0x00000008

023fd29c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fd29c:	b509      	push	{r0, r3, lr}
 23fd29e:	4804      	ldr	r0, [pc, #16]	; (23fd2b0 <system_delay_ms+0x14>)
 23fd2a0:	6800      	ldr	r0, [r0, #0]
 23fd2a2:	4b04      	ldr	r3, [pc, #16]	; (23fd2b4 <system_delay_ms+0x18>)
 23fd2a4:	4403      	add	r3, r0
 23fd2a6:	681b      	ldr	r3, [r3, #0]
 23fd2a8:	695b      	ldr	r3, [r3, #20]
 23fd2aa:	9302      	str	r3, [sp, #8]
 23fd2ac:	bd09      	pop	{r0, r3, pc}
 23fd2ae:	0000      	.short	0x0000
 23fd2b0:	1007ad70 	.word	0x1007ad70
 23fd2b4:	00000008 	.word	0x00000008

023fd2b8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fd2b8:	b509      	push	{r0, r3, lr}
 23fd2ba:	4804      	ldr	r0, [pc, #16]	; (23fd2cc <system_thread_set_state+0x14>)
 23fd2bc:	6800      	ldr	r0, [r0, #0]
 23fd2be:	4b04      	ldr	r3, [pc, #16]	; (23fd2d0 <system_thread_set_state+0x18>)
 23fd2c0:	4403      	add	r3, r0
 23fd2c2:	681b      	ldr	r3, [r3, #0]
 23fd2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fd2c6:	9302      	str	r3, [sp, #8]
 23fd2c8:	bd09      	pop	{r0, r3, pc}
 23fd2ca:	0000      	.short	0x0000
 23fd2cc:	1007ad70 	.word	0x1007ad70
 23fd2d0:	00000008 	.word	0x00000008

023fd2d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fd2d4:	b509      	push	{r0, r3, lr}
 23fd2d6:	4804      	ldr	r0, [pc, #16]	; (23fd2e8 <system_ctrl_set_app_request_handler+0x14>)
 23fd2d8:	6800      	ldr	r0, [r0, #0]
 23fd2da:	4b04      	ldr	r3, [pc, #16]	; (23fd2ec <system_ctrl_set_app_request_handler+0x18>)
 23fd2dc:	4403      	add	r3, r0
 23fd2de:	681b      	ldr	r3, [r3, #0]
 23fd2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fd2e4:	9302      	str	r3, [sp, #8]
 23fd2e6:	bd09      	pop	{r0, r3, pc}
 23fd2e8:	1007ad70 	.word	0x1007ad70
 23fd2ec:	00000008 	.word	0x00000008

023fd2f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fd2f0:	b509      	push	{r0, r3, lr}
 23fd2f2:	4804      	ldr	r0, [pc, #16]	; (23fd304 <system_ctrl_set_result+0x14>)
 23fd2f4:	6800      	ldr	r0, [r0, #0]
 23fd2f6:	4b04      	ldr	r3, [pc, #16]	; (23fd308 <system_ctrl_set_result+0x18>)
 23fd2f8:	4403      	add	r3, r0
 23fd2fa:	681b      	ldr	r3, [r3, #0]
 23fd2fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fd300:	9302      	str	r3, [sp, #8]
 23fd302:	bd09      	pop	{r0, r3, pc}
 23fd304:	1007ad70 	.word	0x1007ad70
 23fd308:	00000008 	.word	0x00000008

023fd30c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd30c:	b509      	push	{r0, r3, lr}
 23fd30e:	4804      	ldr	r0, [pc, #16]	; (23fd320 <network_connect+0x14>)
 23fd310:	6800      	ldr	r0, [r0, #0]
 23fd312:	4b04      	ldr	r3, [pc, #16]	; (23fd324 <network_connect+0x18>)
 23fd314:	4403      	add	r3, r0
 23fd316:	681b      	ldr	r3, [r3, #0]
 23fd318:	685b      	ldr	r3, [r3, #4]
 23fd31a:	9302      	str	r3, [sp, #8]
 23fd31c:	bd09      	pop	{r0, r3, pc}
 23fd31e:	0000      	.short	0x0000
 23fd320:	1007ad70 	.word	0x1007ad70
 23fd324:	00000028 	.word	0x00000028

023fd328 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fd328:	b509      	push	{r0, r3, lr}
 23fd32a:	4804      	ldr	r0, [pc, #16]	; (23fd33c <network_connecting+0x14>)
 23fd32c:	6800      	ldr	r0, [r0, #0]
 23fd32e:	4b04      	ldr	r3, [pc, #16]	; (23fd340 <network_connecting+0x18>)
 23fd330:	4403      	add	r3, r0
 23fd332:	681b      	ldr	r3, [r3, #0]
 23fd334:	689b      	ldr	r3, [r3, #8]
 23fd336:	9302      	str	r3, [sp, #8]
 23fd338:	bd09      	pop	{r0, r3, pc}
 23fd33a:	0000      	.short	0x0000
 23fd33c:	1007ad70 	.word	0x1007ad70
 23fd340:	00000028 	.word	0x00000028

023fd344 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fd344:	b509      	push	{r0, r3, lr}
 23fd346:	4804      	ldr	r0, [pc, #16]	; (23fd358 <network_disconnect+0x14>)
 23fd348:	6800      	ldr	r0, [r0, #0]
 23fd34a:	4b04      	ldr	r3, [pc, #16]	; (23fd35c <network_disconnect+0x18>)
 23fd34c:	4403      	add	r3, r0
 23fd34e:	681b      	ldr	r3, [r3, #0]
 23fd350:	68db      	ldr	r3, [r3, #12]
 23fd352:	9302      	str	r3, [sp, #8]
 23fd354:	bd09      	pop	{r0, r3, pc}
 23fd356:	0000      	.short	0x0000
 23fd358:	1007ad70 	.word	0x1007ad70
 23fd35c:	00000028 	.word	0x00000028

023fd360 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fd360:	b509      	push	{r0, r3, lr}
 23fd362:	4804      	ldr	r0, [pc, #16]	; (23fd374 <network_ready+0x14>)
 23fd364:	6800      	ldr	r0, [r0, #0]
 23fd366:	4b04      	ldr	r3, [pc, #16]	; (23fd378 <network_ready+0x18>)
 23fd368:	4403      	add	r3, r0
 23fd36a:	681b      	ldr	r3, [r3, #0]
 23fd36c:	691b      	ldr	r3, [r3, #16]
 23fd36e:	9302      	str	r3, [sp, #8]
 23fd370:	bd09      	pop	{r0, r3, pc}
 23fd372:	0000      	.short	0x0000
 23fd374:	1007ad70 	.word	0x1007ad70
 23fd378:	00000028 	.word	0x00000028

023fd37c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd37c:	b509      	push	{r0, r3, lr}
 23fd37e:	4804      	ldr	r0, [pc, #16]	; (23fd390 <network_on+0x14>)
 23fd380:	6800      	ldr	r0, [r0, #0]
 23fd382:	4b04      	ldr	r3, [pc, #16]	; (23fd394 <network_on+0x18>)
 23fd384:	4403      	add	r3, r0
 23fd386:	681b      	ldr	r3, [r3, #0]
 23fd388:	695b      	ldr	r3, [r3, #20]
 23fd38a:	9302      	str	r3, [sp, #8]
 23fd38c:	bd09      	pop	{r0, r3, pc}
 23fd38e:	0000      	.short	0x0000
 23fd390:	1007ad70 	.word	0x1007ad70
 23fd394:	00000028 	.word	0x00000028

023fd398 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fd398:	b509      	push	{r0, r3, lr}
 23fd39a:	4804      	ldr	r0, [pc, #16]	; (23fd3ac <network_off+0x14>)
 23fd39c:	6800      	ldr	r0, [r0, #0]
 23fd39e:	4b04      	ldr	r3, [pc, #16]	; (23fd3b0 <network_off+0x18>)
 23fd3a0:	4403      	add	r3, r0
 23fd3a2:	681b      	ldr	r3, [r3, #0]
 23fd3a4:	699b      	ldr	r3, [r3, #24]
 23fd3a6:	9302      	str	r3, [sp, #8]
 23fd3a8:	bd09      	pop	{r0, r3, pc}
 23fd3aa:	0000      	.short	0x0000
 23fd3ac:	1007ad70 	.word	0x1007ad70
 23fd3b0:	00000028 	.word	0x00000028

023fd3b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fd3b4:	b509      	push	{r0, r3, lr}
 23fd3b6:	4804      	ldr	r0, [pc, #16]	; (23fd3c8 <network_listen+0x14>)
 23fd3b8:	6800      	ldr	r0, [r0, #0]
 23fd3ba:	4b04      	ldr	r3, [pc, #16]	; (23fd3cc <network_listen+0x18>)
 23fd3bc:	4403      	add	r3, r0
 23fd3be:	681b      	ldr	r3, [r3, #0]
 23fd3c0:	69db      	ldr	r3, [r3, #28]
 23fd3c2:	9302      	str	r3, [sp, #8]
 23fd3c4:	bd09      	pop	{r0, r3, pc}
 23fd3c6:	0000      	.short	0x0000
 23fd3c8:	1007ad70 	.word	0x1007ad70
 23fd3cc:	00000028 	.word	0x00000028

023fd3d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fd3d0:	b509      	push	{r0, r3, lr}
 23fd3d2:	4804      	ldr	r0, [pc, #16]	; (23fd3e4 <network_listening+0x14>)
 23fd3d4:	6800      	ldr	r0, [r0, #0]
 23fd3d6:	4b04      	ldr	r3, [pc, #16]	; (23fd3e8 <network_listening+0x18>)
 23fd3d8:	4403      	add	r3, r0
 23fd3da:	681b      	ldr	r3, [r3, #0]
 23fd3dc:	6a1b      	ldr	r3, [r3, #32]
 23fd3de:	9302      	str	r3, [sp, #8]
 23fd3e0:	bd09      	pop	{r0, r3, pc}
 23fd3e2:	0000      	.short	0x0000
 23fd3e4:	1007ad70 	.word	0x1007ad70
 23fd3e8:	00000028 	.word	0x00000028

023fd3ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fd3ec:	b509      	push	{r0, r3, lr}
 23fd3ee:	4804      	ldr	r0, [pc, #16]	; (23fd400 <network_set_listen_timeout+0x14>)
 23fd3f0:	6800      	ldr	r0, [r0, #0]
 23fd3f2:	4b04      	ldr	r3, [pc, #16]	; (23fd404 <network_set_listen_timeout+0x18>)
 23fd3f4:	4403      	add	r3, r0
 23fd3f6:	681b      	ldr	r3, [r3, #0]
 23fd3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fd3fa:	9302      	str	r3, [sp, #8]
 23fd3fc:	bd09      	pop	{r0, r3, pc}
 23fd3fe:	0000      	.short	0x0000
 23fd400:	1007ad70 	.word	0x1007ad70
 23fd404:	00000028 	.word	0x00000028

023fd408 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fd408:	b509      	push	{r0, r3, lr}
 23fd40a:	4804      	ldr	r0, [pc, #16]	; (23fd41c <network_get_listen_timeout+0x14>)
 23fd40c:	6800      	ldr	r0, [r0, #0]
 23fd40e:	4b04      	ldr	r3, [pc, #16]	; (23fd420 <network_get_listen_timeout+0x18>)
 23fd410:	4403      	add	r3, r0
 23fd412:	681b      	ldr	r3, [r3, #0]
 23fd414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fd416:	9302      	str	r3, [sp, #8]
 23fd418:	bd09      	pop	{r0, r3, pc}
 23fd41a:	0000      	.short	0x0000
 23fd41c:	1007ad70 	.word	0x1007ad70
 23fd420:	00000028 	.word	0x00000028

023fd424 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fd424:	b509      	push	{r0, r3, lr}
 23fd426:	4804      	ldr	r0, [pc, #16]	; (23fd438 <network_is_on+0x14>)
 23fd428:	6800      	ldr	r0, [r0, #0]
 23fd42a:	4b04      	ldr	r3, [pc, #16]	; (23fd43c <network_is_on+0x18>)
 23fd42c:	4403      	add	r3, r0
 23fd42e:	681b      	ldr	r3, [r3, #0]
 23fd430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd432:	9302      	str	r3, [sp, #8]
 23fd434:	bd09      	pop	{r0, r3, pc}
 23fd436:	0000      	.short	0x0000
 23fd438:	1007ad70 	.word	0x1007ad70
 23fd43c:	00000028 	.word	0x00000028

023fd440 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fd440:	b509      	push	{r0, r3, lr}
 23fd442:	4804      	ldr	r0, [pc, #16]	; (23fd454 <network_is_off+0x14>)
 23fd444:	6800      	ldr	r0, [r0, #0]
 23fd446:	4b04      	ldr	r3, [pc, #16]	; (23fd458 <network_is_off+0x18>)
 23fd448:	4403      	add	r3, r0
 23fd44a:	681b      	ldr	r3, [r3, #0]
 23fd44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd44e:	9302      	str	r3, [sp, #8]
 23fd450:	bd09      	pop	{r0, r3, pc}
 23fd452:	0000      	.short	0x0000
 23fd454:	1007ad70 	.word	0x1007ad70
 23fd458:	00000028 	.word	0x00000028

023fd45c <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fd45c:	b509      	push	{r0, r3, lr}
 23fd45e:	4804      	ldr	r0, [pc, #16]	; (23fd470 <network_prefer+0x14>)
 23fd460:	6800      	ldr	r0, [r0, #0]
 23fd462:	4b04      	ldr	r3, [pc, #16]	; (23fd474 <network_prefer+0x18>)
 23fd464:	4403      	add	r3, r0
 23fd466:	681b      	ldr	r3, [r3, #0]
 23fd468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fd46a:	9302      	str	r3, [sp, #8]
 23fd46c:	bd09      	pop	{r0, r3, pc}
 23fd46e:	0000      	.short	0x0000
 23fd470:	1007ad70 	.word	0x1007ad70
 23fd474:	00000028 	.word	0x00000028

023fd478 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23fd478:	b509      	push	{r0, r3, lr}
 23fd47a:	4804      	ldr	r0, [pc, #16]	; (23fd48c <network_is_preferred+0x14>)
 23fd47c:	6800      	ldr	r0, [r0, #0]
 23fd47e:	4b04      	ldr	r3, [pc, #16]	; (23fd490 <network_is_preferred+0x18>)
 23fd480:	4403      	add	r3, r0
 23fd482:	681b      	ldr	r3, [r3, #0]
 23fd484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fd486:	9302      	str	r3, [sp, #8]
 23fd488:	bd09      	pop	{r0, r3, pc}
 23fd48a:	0000      	.short	0x0000
 23fd48c:	1007ad70 	.word	0x1007ad70
 23fd490:	00000028 	.word	0x00000028

023fd494 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 23fd494:	b509      	push	{r0, r3, lr}
 23fd496:	4804      	ldr	r0, [pc, #16]	; (23fd4a8 <spark_function+0x14>)
 23fd498:	6800      	ldr	r0, [r0, #0]
 23fd49a:	4b04      	ldr	r3, [pc, #16]	; (23fd4ac <spark_function+0x18>)
 23fd49c:	4403      	add	r3, r0
 23fd49e:	681b      	ldr	r3, [r3, #0]
 23fd4a0:	685b      	ldr	r3, [r3, #4]
 23fd4a2:	9302      	str	r3, [sp, #8]
 23fd4a4:	bd09      	pop	{r0, r3, pc}
 23fd4a6:	0000      	.short	0x0000
 23fd4a8:	1007ad70 	.word	0x1007ad70
 23fd4ac:	0000002c 	.word	0x0000002c

023fd4b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fd4b0:	b509      	push	{r0, r3, lr}
 23fd4b2:	4804      	ldr	r0, [pc, #16]	; (23fd4c4 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fd4b4:	6800      	ldr	r0, [r0, #0]
 23fd4b6:	4b04      	ldr	r3, [pc, #16]	; (23fd4c8 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fd4b8:	4403      	add	r3, r0
 23fd4ba:	681b      	ldr	r3, [r3, #0]
 23fd4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd4be:	9302      	str	r3, [sp, #8]
 23fd4c0:	bd09      	pop	{r0, r3, pc}
 23fd4c2:	0000      	.short	0x0000
 23fd4c4:	1007ad70 	.word	0x1007ad70
 23fd4c8:	0000002c 	.word	0x0000002c

023fd4cc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fd4cc:	b509      	push	{r0, r3, lr}
 23fd4ce:	4804      	ldr	r0, [pc, #16]	; (23fd4e0 <malloc+0x14>)
 23fd4d0:	6800      	ldr	r0, [r0, #0]
 23fd4d2:	4b04      	ldr	r3, [pc, #16]	; (23fd4e4 <malloc+0x18>)
 23fd4d4:	4403      	add	r3, r0
 23fd4d6:	681b      	ldr	r3, [r3, #0]
 23fd4d8:	681b      	ldr	r3, [r3, #0]
 23fd4da:	9302      	str	r3, [sp, #8]
 23fd4dc:	bd09      	pop	{r0, r3, pc}
 23fd4de:	0000      	.short	0x0000
 23fd4e0:	1007ad70 	.word	0x1007ad70
 23fd4e4:	00000004 	.word	0x00000004

023fd4e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fd4e8:	b509      	push	{r0, r3, lr}
 23fd4ea:	4804      	ldr	r0, [pc, #16]	; (23fd4fc <free+0x14>)
 23fd4ec:	6800      	ldr	r0, [r0, #0]
 23fd4ee:	4b04      	ldr	r3, [pc, #16]	; (23fd500 <free+0x18>)
 23fd4f0:	4403      	add	r3, r0
 23fd4f2:	681b      	ldr	r3, [r3, #0]
 23fd4f4:	685b      	ldr	r3, [r3, #4]
 23fd4f6:	9302      	str	r3, [sp, #8]
 23fd4f8:	bd09      	pop	{r0, r3, pc}
 23fd4fa:	0000      	.short	0x0000
 23fd4fc:	1007ad70 	.word	0x1007ad70
 23fd500:	00000004 	.word	0x00000004

023fd504 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fd504:	b509      	push	{r0, r3, lr}
 23fd506:	4804      	ldr	r0, [pc, #16]	; (23fd518 <realloc+0x14>)
 23fd508:	6800      	ldr	r0, [r0, #0]
 23fd50a:	4b04      	ldr	r3, [pc, #16]	; (23fd51c <realloc+0x18>)
 23fd50c:	4403      	add	r3, r0
 23fd50e:	681b      	ldr	r3, [r3, #0]
 23fd510:	689b      	ldr	r3, [r3, #8]
 23fd512:	9302      	str	r3, [sp, #8]
 23fd514:	bd09      	pop	{r0, r3, pc}
 23fd516:	0000      	.short	0x0000
 23fd518:	1007ad70 	.word	0x1007ad70
 23fd51c:	00000004 	.word	0x00000004

023fd520 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fd520:	b509      	push	{r0, r3, lr}
 23fd522:	4804      	ldr	r0, [pc, #16]	; (23fd534 <vsnprintf+0x14>)
 23fd524:	6800      	ldr	r0, [r0, #0]
 23fd526:	4b04      	ldr	r3, [pc, #16]	; (23fd538 <vsnprintf+0x18>)
 23fd528:	4403      	add	r3, r0
 23fd52a:	681b      	ldr	r3, [r3, #0]
 23fd52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fd52e:	9302      	str	r3, [sp, #8]
 23fd530:	bd09      	pop	{r0, r3, pc}
 23fd532:	0000      	.short	0x0000
 23fd534:	1007ad70 	.word	0x1007ad70
 23fd538:	00000004 	.word	0x00000004

023fd53c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fd53c:	b509      	push	{r0, r3, lr}
 23fd53e:	4804      	ldr	r0, [pc, #16]	; (23fd550 <__errno+0x14>)
 23fd540:	6800      	ldr	r0, [r0, #0]
 23fd542:	4b04      	ldr	r3, [pc, #16]	; (23fd554 <__errno+0x18>)
 23fd544:	4403      	add	r3, r0
 23fd546:	681b      	ldr	r3, [r3, #0]
 23fd548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fd54a:	9302      	str	r3, [sp, #8]
 23fd54c:	bd09      	pop	{r0, r3, pc}
 23fd54e:	0000      	.short	0x0000
 23fd550:	1007ad70 	.word	0x1007ad70
 23fd554:	00000004 	.word	0x00000004

023fd558 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fd558:	b509      	push	{r0, r3, lr}
 23fd55a:	4804      	ldr	r0, [pc, #16]	; (23fd56c <__assert_func+0x14>)
 23fd55c:	6800      	ldr	r0, [r0, #0]
 23fd55e:	4b04      	ldr	r3, [pc, #16]	; (23fd570 <__assert_func+0x18>)
 23fd560:	4403      	add	r3, r0
 23fd562:	681b      	ldr	r3, [r3, #0]
 23fd564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fd566:	9302      	str	r3, [sp, #8]
 23fd568:	bd09      	pop	{r0, r3, pc}
 23fd56a:	0000      	.short	0x0000
 23fd56c:	1007ad70 	.word	0x1007ad70
 23fd570:	00000004 	.word	0x00000004

023fd574 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fd574:	b509      	push	{r0, r3, lr}
 23fd576:	4804      	ldr	r0, [pc, #16]	; (23fd588 <newlib_impure_ptr_callback+0x14>)
 23fd578:	6800      	ldr	r0, [r0, #0]
 23fd57a:	4b04      	ldr	r3, [pc, #16]	; (23fd58c <newlib_impure_ptr_callback+0x18>)
 23fd57c:	4403      	add	r3, r0
 23fd57e:	681b      	ldr	r3, [r3, #0]
 23fd580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fd582:	9302      	str	r3, [sp, #8]
 23fd584:	bd09      	pop	{r0, r3, pc}
 23fd586:	0000      	.short	0x0000
 23fd588:	1007ad70 	.word	0x1007ad70
 23fd58c:	00000004 	.word	0x00000004

023fd590 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fd590:	2200      	movs	r2, #0
 23fd592:	6840      	ldr	r0, [r0, #4]
 23fd594:	4611      	mov	r1, r2
 23fd596:	f7ff bf1b 	b.w	23fd3d0 <network_listening>

023fd59a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fd59a:	2200      	movs	r2, #0
 23fd59c:	6840      	ldr	r0, [r0, #4]
 23fd59e:	4611      	mov	r1, r2
 23fd5a0:	f7ff bf32 	b.w	23fd408 <network_get_listen_timeout>

023fd5a4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fd5a4:	2200      	movs	r2, #0
 23fd5a6:	6840      	ldr	r0, [r0, #4]
 23fd5a8:	f7ff bf20 	b.w	23fd3ec <network_set_listen_timeout>

023fd5ac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fd5ac:	2200      	movs	r2, #0
 23fd5ae:	6840      	ldr	r0, [r0, #4]
 23fd5b0:	f081 0101 	eor.w	r1, r1, #1
 23fd5b4:	f7ff befe 	b.w	23fd3b4 <network_listen>

023fd5b8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fd5b8:	2300      	movs	r3, #0
 23fd5ba:	6840      	ldr	r0, [r0, #4]
 23fd5bc:	461a      	mov	r2, r3
 23fd5be:	4619      	mov	r1, r3
 23fd5c0:	f7ff beea 	b.w	23fd398 <network_off>

023fd5c4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fd5c4:	2300      	movs	r3, #0
 23fd5c6:	6840      	ldr	r0, [r0, #4]
 23fd5c8:	461a      	mov	r2, r3
 23fd5ca:	4619      	mov	r1, r3
 23fd5cc:	f7ff bed6 	b.w	23fd37c <network_on>

023fd5d0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fd5d0:	2200      	movs	r2, #0
 23fd5d2:	6840      	ldr	r0, [r0, #4]
 23fd5d4:	4611      	mov	r1, r2
 23fd5d6:	f7ff bec3 	b.w	23fd360 <network_ready>

023fd5da <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fd5da:	2200      	movs	r2, #0
 23fd5dc:	6840      	ldr	r0, [r0, #4]
 23fd5de:	4611      	mov	r1, r2
 23fd5e0:	f7ff bea2 	b.w	23fd328 <network_connecting>

023fd5e4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fd5e4:	2200      	movs	r2, #0
 23fd5e6:	2102      	movs	r1, #2
 23fd5e8:	6840      	ldr	r0, [r0, #4]
 23fd5ea:	f7ff beab 	b.w	23fd344 <network_disconnect>

023fd5ee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fd5ee:	2300      	movs	r3, #0
 23fd5f0:	6840      	ldr	r0, [r0, #4]
 23fd5f2:	461a      	mov	r2, r3
 23fd5f4:	f7ff be8a 	b.w	23fd30c <network_connect>

023fd5f8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fd5f8:	2203      	movs	r2, #3
 23fd5fa:	4b02      	ldr	r3, [pc, #8]	; (23fd604 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fd5fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fd5fe:	4a02      	ldr	r2, [pc, #8]	; (23fd608 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fd600:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fd602:	4770      	bx	lr
 23fd604:	1007ae4c 	.word	0x1007ae4c
 23fd608:	023ffba4 	.word	0x023ffba4

023fd60c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
	{
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd60c:	680b      	ldr	r3, [r1, #0]
 23fd60e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fd610:	684b      	ldr	r3, [r1, #4]
 23fd612:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fd614:	b113      	cbz	r3, 23fd61c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fd616:	685a      	ldr	r2, [r3, #4]
 23fd618:	3201      	adds	r2, #1
 23fd61a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fd61c:	4770      	bx	lr

023fd61e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
 23fd61e:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
 23fd620:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fd622:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fd624:	b17c      	cbz	r4, 23fd646 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fd626:	6863      	ldr	r3, [r4, #4]
 23fd628:	3b01      	subs	r3, #1
 23fd62a:	6063      	str	r3, [r4, #4]
 23fd62c:	b95b      	cbnz	r3, 23fd646 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fd62e:	6823      	ldr	r3, [r4, #0]
 23fd630:	4620      	mov	r0, r4
 23fd632:	689b      	ldr	r3, [r3, #8]
 23fd634:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd636:	68a3      	ldr	r3, [r4, #8]
 23fd638:	3b01      	subs	r3, #1
 23fd63a:	60a3      	str	r3, [r4, #8]
 23fd63c:	b91b      	cbnz	r3, 23fd646 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fd63e:	6823      	ldr	r3, [r4, #0]
 23fd640:	4620      	mov	r0, r4
 23fd642:	68db      	ldr	r3, [r3, #12]
 23fd644:	4798      	blx	r3
      }
 23fd646:	4628      	mov	r0, r5
 23fd648:	bd38      	pop	{r3, r4, r5, pc}

023fd64a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fd64a:	2100      	movs	r1, #0
 23fd64c:	f7ff bd62 	b.w	23fd114 <hal_spi_release>

023fd650 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fd650:	2100      	movs	r1, #0
 23fd652:	f7ff bd51 	b.w	23fd0f8 <hal_spi_acquire>

023fd656 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fd656:	b510      	push	{r4, lr}
 23fd658:	4604      	mov	r4, r0
 23fd65a:	4608      	mov	r0, r1
{
    _spi = spi;
 23fd65c:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fd65e:	f7ff fcf7 	bl	23fd050 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd662:	2300      	movs	r3, #0
}
 23fd664:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fd666:	6063      	str	r3, [r4, #4]
}
 23fd668:	bd10      	pop	{r4, pc}

023fd66a <_ZN8SPIClass16beginTransactionEv>:
    }
}

int32_t SPIClass::beginTransaction()
{
    return lock();
 23fd66a:	7800      	ldrb	r0, [r0, #0]
 23fd66c:	f7ff bff0 	b.w	23fd650 <_ZN8SPIClass4lockEv.isra.0>

023fd670 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fd670:	7800      	ldrb	r0, [r0, #0]
 23fd672:	f7ff bfea 	b.w	23fd64a <_ZN8SPIClass6unlockEv.isra.0>
	...

023fd678 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fd678:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fd67a:	2400      	movs	r4, #0
 23fd67c:	0840      	lsrs	r0, r0, #1
 23fd67e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd680:	6818      	ldr	r0, [r3, #0]
 23fd682:	b2e5      	uxtb	r5, r4
 23fd684:	4288      	cmp	r0, r1
 23fd686:	d906      	bls.n	23fd696 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fd688:	3401      	adds	r4, #1
 23fd68a:	2c08      	cmp	r4, #8
 23fd68c:	d002      	beq.n	23fd694 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fd68e:	0840      	lsrs	r0, r0, #1
 23fd690:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fd692:	e7f5      	b.n	23fd680 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fd694:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fd696:	4b02      	ldr	r3, [pc, #8]	; (23fd6a0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fd698:	5d5b      	ldrb	r3, [r3, r5]
 23fd69a:	7013      	strb	r3, [r2, #0]
}
 23fd69c:	bd30      	pop	{r4, r5, pc}
 23fd69e:	bf00      	nop
 23fd6a0:	023ffbe0 	.word	0x023ffbe0

023fd6a4 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
    unsigned clock = 0;
 23fd6a4:	2300      	movs	r3, #0
{
 23fd6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd6aa:	4604      	mov	r4, r0
 23fd6ac:	b088      	sub	sp, #32

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
 23fd6ae:	7800      	ldrb	r0, [r0, #0]
{
 23fd6b0:	460e      	mov	r6, r1
 23fd6b2:	4617      	mov	r7, r2
    unsigned clock = 0;
 23fd6b4:	9302      	str	r3, [sp, #8]
    if (!lock())
 23fd6b6:	f7ff ffcb 	bl	23fd650 <_ZN8SPIClass4lockEv.isra.0>
 23fd6ba:	4605      	mov	r5, r0
 23fd6bc:	bb00      	cbnz	r0, 23fd700 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd6be:	4601      	mov	r1, r0
 23fd6c0:	2214      	movs	r2, #20
 23fd6c2:	a803      	add	r0, sp, #12
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
 23fd6c4:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fd6c8:	f002 f873 	bl	23ff7b2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd6cc:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fd6ce:	462a      	mov	r2, r5
 23fd6d0:	4640      	mov	r0, r8
 23fd6d2:	a903      	add	r1, sp, #12
    info->version = HAL_SPI_INFO_VERSION_1;
 23fd6d4:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
 23fd6d8:	f7ff fcd6 	bl	23fd088 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fd6dc:	fb07 f106 	mul.w	r1, r7, r6
 23fd6e0:	9804      	ldr	r0, [sp, #16]
 23fd6e2:	ab02      	add	r3, sp, #8
 23fd6e4:	f10d 0207 	add.w	r2, sp, #7
        uint8_t divisor = 0;
 23fd6e8:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
 23fd6ec:	f7ff ffc4 	bl	23fd678 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
 23fd6f0:	7820      	ldrb	r0, [r4, #0]
 23fd6f2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23fd6f6:	f7ff fc9d 	bl	23fd034 <hal_spi_set_clock_divider>
        unlock();
 23fd6fa:	7820      	ldrb	r0, [r4, #0]
 23fd6fc:	f7ff ffa5 	bl	23fd64a <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
 23fd700:	9802      	ldr	r0, [sp, #8]
 23fd702:	b008      	add	sp, #32
 23fd704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fd708 <_ZN8SPIClass8transferEPKvPvjPFvvE>:
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
}

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 23fd708:	b530      	push	{r4, r5, lr}
 23fd70a:	b087      	sub	sp, #28
 23fd70c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 23fd70e:	4604      	mov	r4, r0
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
 23fd710:	9500      	str	r5, [sp, #0]
 23fd712:	7800      	ldrb	r0, [r0, #0]
 23fd714:	f7ff fcc6 	bl	23fd0a4 <hal_spi_transfer_dma>
    if (user_callback == NULL)
 23fd718:	b93d      	cbnz	r5, 23fd72a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
 23fd71a:	7820      	ldrb	r0, [r4, #0]
 23fd71c:	a902      	add	r1, sp, #8
 23fd71e:	f7ff fcdd 	bl	23fd0dc <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
 23fd722:	f89d 3014 	ldrb.w	r3, [sp, #20]
 23fd726:	07db      	lsls	r3, r3, #31
 23fd728:	d4f7      	bmi.n	23fd71a <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
 23fd72a:	b007      	add	sp, #28
 23fd72c:	bd30      	pop	{r4, r5, pc}
	...

023fd730 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd730:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fd732:	2000      	movs	r0, #0
 23fd734:	4b04      	ldr	r3, [pc, #16]	; (23fd748 <_GLOBAL__sub_I_System+0x18>)
 23fd736:	601a      	str	r2, [r3, #0]
 23fd738:	4b04      	ldr	r3, [pc, #16]	; (23fd74c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fd73a:	4a05      	ldr	r2, [pc, #20]	; (23fd750 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fd73c:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fd740:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd742:	f7ff bd9d 	b.w	23fd280 <set_system_mode>
 23fd746:	bf00      	nop
 23fd748:	1007ae60 	.word	0x1007ae60
 23fd74c:	1007ae54 	.word	0x1007ae54
 23fd750:	ffff0000 	.word	0xffff0000

023fd754 <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fd754:	b510      	push	{r4, lr}
 23fd756:	4604      	mov	r4, r0
{
    free(buffer);
 23fd758:	6800      	ldr	r0, [r0, #0]
 23fd75a:	f7ff fec5 	bl	23fd4e8 <free>
}
 23fd75e:	4620      	mov	r0, r4
 23fd760:	bd10      	pop	{r4, pc}

023fd762 <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fd762:	b510      	push	{r4, lr}
 23fd764:	4604      	mov	r4, r0
    if (buffer) {
 23fd766:	6800      	ldr	r0, [r0, #0]
 23fd768:	b108      	cbz	r0, 23fd76e <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fd76a:	f7ff febd 	bl	23fd4e8 <free>
    }
    buffer = nullptr;
 23fd76e:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fd770:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fd774:	6023      	str	r3, [r4, #0]
}
 23fd776:	bd10      	pop	{r4, pc}

023fd778 <_ZN6String12changeBufferEj>:
    }
    return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fd778:	b538      	push	{r3, r4, r5, lr}
 23fd77a:	4604      	mov	r4, r0
 23fd77c:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fd77e:	6800      	ldr	r0, [r0, #0]
 23fd780:	3101      	adds	r1, #1
 23fd782:	f7ff febf 	bl	23fd504 <realloc>
    if (newbuffer) {
 23fd786:	b110      	cbz	r0, 23fd78e <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fd788:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fd78c:	2001      	movs	r0, #1
    }
    return 0;
}
 23fd78e:	bd38      	pop	{r3, r4, r5, pc}

023fd790 <_ZN6String7reserveEj>:
{
 23fd790:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fd792:	6803      	ldr	r3, [r0, #0]
{
 23fd794:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fd796:	b123      	cbz	r3, 23fd7a2 <_ZN6String7reserveEj+0x12>
 23fd798:	6843      	ldr	r3, [r0, #4]
 23fd79a:	428b      	cmp	r3, r1
 23fd79c:	d301      	bcc.n	23fd7a2 <_ZN6String7reserveEj+0x12>
 23fd79e:	2001      	movs	r0, #1
}
 23fd7a0:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fd7a2:	4620      	mov	r0, r4
 23fd7a4:	f7ff ffe8 	bl	23fd778 <_ZN6String12changeBufferEj>
 23fd7a8:	2800      	cmp	r0, #0
 23fd7aa:	d0f9      	beq.n	23fd7a0 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fd7ac:	68a3      	ldr	r3, [r4, #8]
 23fd7ae:	2b00      	cmp	r3, #0
 23fd7b0:	d1f5      	bne.n	23fd79e <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fd7b2:	6822      	ldr	r2, [r4, #0]
 23fd7b4:	7013      	strb	r3, [r2, #0]
 23fd7b6:	e7f2      	b.n	23fd79e <_ZN6String7reserveEj+0xe>

023fd7b8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fd7b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd7ba:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fd7bc:	4611      	mov	r1, r2
 23fd7be:	9201      	str	r2, [sp, #4]
{
 23fd7c0:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fd7c2:	f7ff ffe5 	bl	23fd790 <_ZN6String7reserveEj>
 23fd7c6:	9a01      	ldr	r2, [sp, #4]
 23fd7c8:	b928      	cbnz	r0, 23fd7d6 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fd7ca:	4620      	mov	r0, r4
 23fd7cc:	f7ff ffc9 	bl	23fd762 <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fd7d0:	4620      	mov	r0, r4
 23fd7d2:	b003      	add	sp, #12
 23fd7d4:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fd7d6:	4629      	mov	r1, r5
    len = length;
 23fd7d8:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fd7da:	6820      	ldr	r0, [r4, #0]
 23fd7dc:	f001 ffc2 	bl	23ff764 <memcpy>
    buffer[len] = 0;
 23fd7e0:	2100      	movs	r1, #0
 23fd7e2:	6822      	ldr	r2, [r4, #0]
 23fd7e4:	68a3      	ldr	r3, [r4, #8]
 23fd7e6:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fd7e8:	e7f2      	b.n	23fd7d0 <_ZN6String4copyEPKcj+0x18>

023fd7ea <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fd7ea:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fd7ec:	b513      	push	{r0, r1, r4, lr}
 23fd7ee:	4604      	mov	r4, r0
    capacity_ = 0;
 23fd7f0:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd7f4:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd7f6:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fd7f8:	b141      	cbz	r1, 23fd80c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fd7fa:	4608      	mov	r0, r1
 23fd7fc:	9101      	str	r1, [sp, #4]
 23fd7fe:	f7fe fdfd 	bl	23fc3fc <strlen>
 23fd802:	9901      	ldr	r1, [sp, #4]
 23fd804:	4602      	mov	r2, r0
 23fd806:	4620      	mov	r0, r4
 23fd808:	f7ff ffd6 	bl	23fd7b8 <_ZN6String4copyEPKcj>
}
 23fd80c:	4620      	mov	r0, r4
 23fd80e:	b002      	add	sp, #8
 23fd810:	bd10      	pop	{r4, pc}

023fd812 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fd812:	b538      	push	{r3, r4, r5, lr}
 23fd814:	4605      	mov	r5, r0
    if (buffer) {
 23fd816:	6800      	ldr	r0, [r0, #0]
{
 23fd818:	460c      	mov	r4, r1
    if (buffer) {
 23fd81a:	b170      	cbz	r0, 23fd83a <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fd81c:	686a      	ldr	r2, [r5, #4]
 23fd81e:	688b      	ldr	r3, [r1, #8]
 23fd820:	429a      	cmp	r2, r3
 23fd822:	d308      	bcc.n	23fd836 <_ZN6String4moveERS_+0x24>
 23fd824:	6809      	ldr	r1, [r1, #0]
 23fd826:	b131      	cbz	r1, 23fd836 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fd828:	f002 f811 	bl	23ff84e <strcpy>
            len = rhs.len;
 23fd82c:	68a3      	ldr	r3, [r4, #8]
 23fd82e:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fd830:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fd832:	60a3      	str	r3, [r4, #8]
}
 23fd834:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fd836:	f7ff fe57 	bl	23fd4e8 <free>
    buffer = rhs.buffer;
 23fd83a:	6823      	ldr	r3, [r4, #0]
 23fd83c:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fd83e:	6863      	ldr	r3, [r4, #4]
 23fd840:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fd842:	68a3      	ldr	r3, [r4, #8]
 23fd844:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fd846:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fd848:	e9c4 3300 	strd	r3, r3, [r4]
 23fd84c:	e7f1      	b.n	23fd832 <_ZN6String4moveERS_+0x20>

023fd84e <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fd84e:	2300      	movs	r3, #0
String::String(String &&rval)
 23fd850:	b510      	push	{r4, lr}
 23fd852:	4604      	mov	r4, r0
    capacity_ = 0;
 23fd854:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd858:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd85a:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fd85c:	f7ff ffd9 	bl	23fd812 <_ZN6String4moveERS_>
}
 23fd860:	4620      	mov	r0, r4
 23fd862:	bd10      	pop	{r4, pc}

023fd864 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fd864:	4288      	cmp	r0, r1
{
 23fd866:	b510      	push	{r4, lr}
 23fd868:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fd86a:	d005      	beq.n	23fd878 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fd86c:	680b      	ldr	r3, [r1, #0]
 23fd86e:	b12b      	cbz	r3, 23fd87c <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fd870:	688a      	ldr	r2, [r1, #8]
 23fd872:	4619      	mov	r1, r3
 23fd874:	f7ff ffa0 	bl	23fd7b8 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fd878:	4620      	mov	r0, r4
 23fd87a:	bd10      	pop	{r4, pc}
        invalidate();
 23fd87c:	f7ff ff71 	bl	23fd762 <_ZN6String10invalidateEv>
 23fd880:	e7fa      	b.n	23fd878 <_ZN6StringaSERKS_+0x14>

023fd882 <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fd882:	2300      	movs	r3, #0
String::String(const String &value)
 23fd884:	b510      	push	{r4, lr}
 23fd886:	4604      	mov	r4, r0
    capacity_ = 0;
 23fd888:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fd88c:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fd88e:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fd890:	f7ff ffe8 	bl	23fd864 <_ZN6StringaSERKS_>
}
 23fd894:	4620      	mov	r0, r4
 23fd896:	bd10      	pop	{r4, pc}

023fd898 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fd898:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fd89a:	6843      	ldr	r3, [r0, #4]
    {
 23fd89c:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fd89e:	3b01      	subs	r3, #1
 23fd8a0:	6043      	str	r3, [r0, #4]
 23fd8a2:	b963      	cbnz	r3, 23fd8be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fd8a4:	6803      	ldr	r3, [r0, #0]
 23fd8a6:	689b      	ldr	r3, [r3, #8]
 23fd8a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd8aa:	68a3      	ldr	r3, [r4, #8]
 23fd8ac:	3b01      	subs	r3, #1
 23fd8ae:	60a3      	str	r3, [r4, #8]
 23fd8b0:	b92b      	cbnz	r3, 23fd8be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fd8b2:	6823      	ldr	r3, [r4, #0]
 23fd8b4:	4620      	mov	r0, r4
    }
 23fd8b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fd8ba:	68db      	ldr	r3, [r3, #12]
 23fd8bc:	4718      	bx	r3
    }
 23fd8be:	bd10      	pop	{r4, pc}

023fd8c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd8c0:	b570      	push	{r4, r5, r6, lr}
 23fd8c2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd8c4:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fd8c8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fd8cc:	42ae      	cmp	r6, r5
 23fd8ce:	d004      	beq.n	23fd8da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fd8d0:	4628      	mov	r0, r5
 23fd8d2:	f7ff ff3f 	bl	23fd754 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fd8d6:	3510      	adds	r5, #16
 23fd8d8:	e7f8      	b.n	23fd8cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fd8da:	6820      	ldr	r0, [r4, #0]
 23fd8dc:	f7ff fe04 	bl	23fd4e8 <free>
    AllocatorT::free(data_);
}
 23fd8e0:	4620      	mov	r0, r4
 23fd8e2:	bd70      	pop	{r4, r5, r6, pc}

023fd8e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fd8e4:	2300      	movs	r3, #0
 23fd8e6:	4802      	ldr	r0, [pc, #8]	; (23fd8f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fd8e8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fd8ea:	f7ff ba6f 	b.w	23fcdcc <os_mutex_recursive_create>
 23fd8ee:	bf00      	nop
 23fd8f0:	1007ae64 	.word	0x1007ae64

023fd8f4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23fd8f4:	b510      	push	{r4, lr}
 23fd8f6:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23fd8f8:	6880      	ldr	r0, [r0, #8]
 23fd8fa:	6803      	ldr	r3, [r0, #0]
 23fd8fc:	68db      	ldr	r3, [r3, #12]
 23fd8fe:	4798      	blx	r3
 23fd900:	68e3      	ldr	r3, [r4, #12]
 23fd902:	4418      	add	r0, r3
 23fd904:	60e0      	str	r0, [r4, #12]
}
 23fd906:	bd10      	pop	{r4, pc}

023fd908 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fd908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd90a:	4606      	mov	r6, r0
 23fd90c:	460d      	mov	r5, r1
  size_t n = 0;
 23fd90e:	2400      	movs	r4, #0
 23fd910:	188f      	adds	r7, r1, r2
  while (size--) {
 23fd912:	42bd      	cmp	r5, r7
 23fd914:	d00c      	beq.n	23fd930 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fd916:	6833      	ldr	r3, [r6, #0]
 23fd918:	4630      	mov	r0, r6
 23fd91a:	689b      	ldr	r3, [r3, #8]
 23fd91c:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fd920:	4798      	blx	r3
     if (chunk>=0)
 23fd922:	1e03      	subs	r3, r0, #0
 23fd924:	db01      	blt.n	23fd92a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fd926:	441c      	add	r4, r3
  while (size--) {
 23fd928:	e7f3      	b.n	23fd912 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fd92a:	2c00      	cmp	r4, #0
 23fd92c:	bf08      	it	eq
 23fd92e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fd930:	4620      	mov	r0, r4
 23fd932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd934 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fd934:	4770      	bx	lr

023fd936 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fd936:	b510      	push	{r4, lr}
 23fd938:	4604      	mov	r4, r0
 23fd93a:	2110      	movs	r1, #16
 23fd93c:	f7fe fd87 	bl	23fc44e <_ZdlPvj>
 23fd940:	4620      	mov	r0, r4
 23fd942:	bd10      	pop	{r4, pc}

023fd944 <_ZN5Print5writeEPKc>:

    int getWriteError() const { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 23fd944:	b513      	push	{r0, r1, r4, lr}
 23fd946:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
 23fd948:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fd94a:	b159      	cbz	r1, 23fd964 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fd94c:	9101      	str	r1, [sp, #4]
 23fd94e:	f7fe fd55 	bl	23fc3fc <strlen>
 23fd952:	4602      	mov	r2, r0
 23fd954:	4620      	mov	r0, r4
 23fd956:	6823      	ldr	r3, [r4, #0]
 23fd958:	9901      	ldr	r1, [sp, #4]
 23fd95a:	68db      	ldr	r3, [r3, #12]
    }
 23fd95c:	b002      	add	sp, #8
 23fd95e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fd962:	4718      	bx	r3
    }
 23fd964:	b002      	add	sp, #8
 23fd966:	bd10      	pop	{r4, pc}

023fd968 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23fd968:	6803      	ldr	r3, [r0, #0]
 23fd96a:	689b      	ldr	r3, [r3, #8]
 23fd96c:	4718      	bx	r3

023fd96e <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fd96e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fd970:	2a01      	cmp	r2, #1
 23fd972:	bf98      	it	ls
 23fd974:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fd976:	b530      	push	{r4, r5, lr}
 23fd978:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fd97a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fd97e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fd980:	460d      	mov	r5, r1
 23fd982:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fd986:	fb01 5312 	mls	r3, r1, r2, r5
 23fd98a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd98e:	2b09      	cmp	r3, #9
 23fd990:	bf94      	ite	ls
 23fd992:	3330      	addls	r3, #48	; 0x30
 23fd994:	3337      	addhi	r3, #55	; 0x37
 23fd996:	b2db      	uxtb	r3, r3
  } while(n);
 23fd998:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fd99a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fd99e:	d9ef      	bls.n	23fd980 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fd9a0:	4621      	mov	r1, r4
 23fd9a2:	f7ff ffcf 	bl	23fd944 <_ZN5Print5writeEPKc>
}
 23fd9a6:	b00b      	add	sp, #44	; 0x2c
 23fd9a8:	bd30      	pop	{r4, r5, pc}

023fd9aa <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fd9aa:	b510      	push	{r4, lr}
 23fd9ac:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fd9ae:	f7ff f9ff 	bl	23fcdb0 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fd9b2:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fd9b4:	6823      	ldr	r3, [r4, #0]
 23fd9b6:	4620      	mov	r0, r4
 23fd9b8:	695b      	ldr	r3, [r3, #20]
 23fd9ba:	4798      	blx	r3
    if (c >= 0) return c;
 23fd9bc:	2800      	cmp	r0, #0
 23fd9be:	da08      	bge.n	23fd9d2 <_ZN6Stream9timedReadEv+0x28>
 23fd9c0:	f7ff f9f6 	bl	23fcdb0 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fd9c4:	68e3      	ldr	r3, [r4, #12]
 23fd9c6:	1ac0      	subs	r0, r0, r3
 23fd9c8:	68a3      	ldr	r3, [r4, #8]
 23fd9ca:	4298      	cmp	r0, r3
 23fd9cc:	d3f2      	bcc.n	23fd9b4 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fd9ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 23fd9d2:	bd10      	pop	{r4, pc}

023fd9d4 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fd9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fd9d8:	4607      	mov	r7, r0
 23fd9da:	460c      	mov	r4, r1
 23fd9dc:	460d      	mov	r5, r1
 23fd9de:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fd9e0:	42b5      	cmp	r5, r6
 23fd9e2:	eba5 0804 	sub.w	r8, r5, r4
 23fd9e6:	d007      	beq.n	23fd9f8 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fd9e8:	4638      	mov	r0, r7
 23fd9ea:	f7ff ffde 	bl	23fd9aa <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fd9ee:	1e03      	subs	r3, r0, #0
 23fd9f0:	db02      	blt.n	23fd9f8 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fd9f2:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fd9f6:	e7f3      	b.n	23fd9e0 <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fd9f8:	4640      	mov	r0, r8
 23fd9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fd9fe <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fd9fe:	4770      	bx	lr

023fda00 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fda00:	4608      	mov	r0, r1
 23fda02:	b111      	cbz	r1, 23fda0a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fda04:	680b      	ldr	r3, [r1, #0]
 23fda06:	685b      	ldr	r3, [r3, #4]
 23fda08:	4718      	bx	r3
}
 23fda0a:	4770      	bx	lr

023fda0c <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fda0c:	4770      	bx	lr

023fda0e <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fda0e:	4770      	bx	lr

023fda10 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fda10:	4770      	bx	lr

023fda12 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fda12:	b538      	push	{r3, r4, r5, lr}
 23fda14:	4604      	mov	r4, r0
 23fda16:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fda18:	6800      	ldr	r0, [r0, #0]
 23fda1a:	212e      	movs	r1, #46	; 0x2e
 23fda1c:	f001 ff0d 	bl	23ff83a <strchrnul>
    size = s - category;
 23fda20:	6823      	ldr	r3, [r4, #0]
 23fda22:	1ac3      	subs	r3, r0, r3
 23fda24:	602b      	str	r3, [r5, #0]
    if (size) {
 23fda26:	b123      	cbz	r3, 23fda32 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fda28:	7803      	ldrb	r3, [r0, #0]
 23fda2a:	b103      	cbz	r3, 23fda2e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fda2c:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 23fda2e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fda30:	6020      	str	r0, [r4, #0]
}
 23fda32:	4618      	mov	r0, r3
 23fda34:	bd38      	pop	{r3, r4, r5, pc}

023fda36 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fda36:	b510      	push	{r4, lr}
 23fda38:	4604      	mov	r4, r0
 23fda3a:	2104      	movs	r1, #4
 23fda3c:	f7fe fd07 	bl	23fc44e <_ZdlPvj>
 23fda40:	4620      	mov	r0, r4
 23fda42:	bd10      	pop	{r4, pc}

023fda44 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fda44:	b510      	push	{r4, lr}
 23fda46:	4604      	mov	r4, r0
 23fda48:	2104      	movs	r1, #4
 23fda4a:	f7fe fd00 	bl	23fc44e <_ZdlPvj>
 23fda4e:	4620      	mov	r0, r4
 23fda50:	bd10      	pop	{r4, pc}

023fda52 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fda52:	f7ff b9d7 	b.w	23fce04 <os_mutex_recursive_lock>

023fda56 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fda56:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fda58:	f7fe fcc6 	bl	23fc3e8 <strcmp>
}
 23fda5c:	fab0 f080 	clz	r0, r0
 23fda60:	0940      	lsrs	r0, r0, #5
 23fda62:	bd08      	pop	{r3, pc}

023fda64 <__tcf_1>:
 23fda64:	4770      	bx	lr

023fda66 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fda66:	b510      	push	{r4, lr}
 23fda68:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fda6a:	f001 f92b 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fda6e:	4284      	cmp	r4, r0
 23fda70:	d105      	bne.n	23fda7e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fda72:	f001 f927 	bl	23fecc4 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fda76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fda7a:	f001 b917 	b.w	23fecac <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fda7e:	f001 fd8b 	bl	23ff598 <_Z22__fetch_global_Serial1v>
 23fda82:	4284      	cmp	r4, r0
 23fda84:	d105      	bne.n	23fda92 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fda86:	f001 fd87 	bl	23ff598 <_Z22__fetch_global_Serial1v>
}
 23fda8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fda8e:	f001 b996 	b.w	23fedbe <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fda92:	b12c      	cbz	r4, 23fdaa0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fda94:	6823      	ldr	r3, [r4, #0]
 23fda96:	4620      	mov	r0, r4
}
 23fda98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fda9c:	685b      	ldr	r3, [r3, #4]
 23fda9e:	4718      	bx	r3
 23fdaa0:	bd10      	pop	{r4, pc}

023fdaa2 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fdaa2:	b513      	push	{r0, r1, r4, lr}
 23fdaa4:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fdaa6:	4608      	mov	r0, r1
 23fdaa8:	9101      	str	r1, [sp, #4]
 23fdaaa:	f7fe fca7 	bl	23fc3fc <strlen>
 23fdaae:	4602      	mov	r2, r0
 23fdab0:	4620      	mov	r0, r4
 23fdab2:	9901      	ldr	r1, [sp, #4]
}
 23fdab4:	b002      	add	sp, #8
 23fdab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fdaba:	f001 bcb1 	b.w	23ff420 <_ZN5spark10JSONWriter5valueEPKcj>

023fdabe <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fdabe:	b513      	push	{r0, r1, r4, lr}
 23fdac0:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fdac2:	4608      	mov	r0, r1
 23fdac4:	9101      	str	r1, [sp, #4]
 23fdac6:	f7fe fc99 	bl	23fc3fc <strlen>
 23fdaca:	4602      	mov	r2, r0
 23fdacc:	4620      	mov	r0, r4
 23fdace:	6823      	ldr	r3, [r4, #0]
 23fdad0:	9901      	ldr	r1, [sp, #4]
 23fdad2:	68db      	ldr	r3, [r3, #12]
}
 23fdad4:	b002      	add	sp, #8
 23fdad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fdada:	4718      	bx	r3

023fdadc <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fdadc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fdade:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fdae0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fdae4:	2201      	movs	r2, #1
 23fdae6:	68db      	ldr	r3, [r3, #12]
 23fdae8:	f10d 0107 	add.w	r1, sp, #7
 23fdaec:	4798      	blx	r3
}
 23fdaee:	b003      	add	sp, #12
 23fdaf0:	f85d fb04 	ldr.w	pc, [sp], #4

023fdaf4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdaf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fdaf8:	f04f 0a14 	mov.w	sl, #20
 23fdafc:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fdb00:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fdb02:	4645      	mov	r5, r8
 23fdb04:	fb0a f404 	mul.w	r4, sl, r4
 23fdb08:	9300      	str	r3, [sp, #0]
 23fdb0a:	4b17      	ldr	r3, [pc, #92]	; (23fdb68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdb0c:	10a4      	asrs	r4, r4, #2
 23fdb0e:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fdb10:	2c00      	cmp	r4, #0
 23fdb12:	dd21      	ble.n	23fdb58 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fdb14:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fdb16:	fb0a f006 	mul.w	r0, sl, r6
 23fdb1a:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fdb1e:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fdb22:	463a      	mov	r2, r7
 23fdb24:	455f      	cmp	r7, fp
 23fdb26:	bf28      	it	cs
 23fdb28:	465a      	movcs	r2, fp
 23fdb2a:	5828      	ldr	r0, [r5, r0]
 23fdb2c:	9101      	str	r1, [sp, #4]
 23fdb2e:	f001 fe96 	bl	23ff85e <strncmp>
                if (cmp == 0) {
 23fdb32:	2800      	cmp	r0, #0
 23fdb34:	f04f 0301 	mov.w	r3, #1
 23fdb38:	9901      	ldr	r1, [sp, #4]
 23fdb3a:	d10b      	bne.n	23fdb54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fdb3c:	455f      	cmp	r7, fp
 23fdb3e:	d103      	bne.n	23fdb48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fdb40:	9a00      	ldr	r2, [sp, #0]
 23fdb42:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fdb44:	4634      	mov	r4, r6
 23fdb46:	e7e3      	b.n	23fdb10 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fdb48:	d9fc      	bls.n	23fdb44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fdb4a:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fdb4c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fdb50:	3e01      	subs	r6, #1
 23fdb52:	e7f7      	b.n	23fdb44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fdb54:	dbf9      	blt.n	23fdb4a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fdb56:	e7f5      	b.n	23fdb44 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fdb58:	eba5 0508 	sub.w	r5, r5, r8
}
 23fdb5c:	4802      	ldr	r0, [pc, #8]	; (23fdb68 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fdb5e:	10ad      	asrs	r5, r5, #2
 23fdb60:	4368      	muls	r0, r5
 23fdb62:	b003      	add	sp, #12
 23fdb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fdb68:	cccccccd 	.word	0xcccccccd

023fdb6c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fdb6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fdb6e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fdb70:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fdb72:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fdb74:	b303      	cbz	r3, 23fdbb8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fdb76:	b1f9      	cbz	r1, 23fdbb8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fdb78:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fdb7a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fdb7e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fdb80:	a903      	add	r1, sp, #12
 23fdb82:	a801      	add	r0, sp, #4
 23fdb84:	f7ff ff45 	bl	23fda12 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fdb88:	4601      	mov	r1, r0
 23fdb8a:	b1a8      	cbz	r0, 23fdbb8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdb8c:	f10d 030b 	add.w	r3, sp, #11
 23fdb90:	4620      	mov	r0, r4
 23fdb92:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fdb94:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fdb98:	f7ff ffac 	bl	23fdaf4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fdb9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fdba0:	b153      	cbz	r3, 23fdbb8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fdba2:	6823      	ldr	r3, [r4, #0]
 23fdba4:	2414      	movs	r4, #20
 23fdba6:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fdbaa:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fdbae:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fdbb0:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fdbb2:	bfa8      	it	ge
 23fdbb4:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fdbb6:	e7e3      	b.n	23fdb80 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fdbb8:	4628      	mov	r0, r5
 23fdbba:	b004      	add	sp, #16
 23fdbbc:	bd70      	pop	{r4, r5, r6, pc}

023fdbbe <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fdbbe:	b40e      	push	{r1, r2, r3}
 23fdbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fdbc2:	b08c      	sub	sp, #48	; 0x30
 23fdbc4:	af00      	add	r7, sp, #0
 23fdbc6:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fdbca:	f855 2b04 	ldr.w	r2, [r5], #4
 23fdbce:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdbd0:	462b      	mov	r3, r5
 23fdbd2:	2120      	movs	r1, #32
 23fdbd4:	f107 0010 	add.w	r0, r7, #16
 23fdbd8:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fdbda:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdbdc:	f7ff fca0 	bl	23fd520 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fdbe0:	281f      	cmp	r0, #31
 23fdbe2:	687a      	ldr	r2, [r7, #4]
 23fdbe4:	d91a      	bls.n	23fdc1c <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fdbe6:	f100 0308 	add.w	r3, r0, #8
 23fdbea:	f023 0307 	bic.w	r3, r3, #7
        }
 23fdbee:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fdbf0:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdbf4:	1c41      	adds	r1, r0, #1
 23fdbf6:	462b      	mov	r3, r5
 23fdbf8:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fdbfa:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fdbfc:	f7ff fc90 	bl	23fd520 <vsnprintf>
        if (n > 0) {
 23fdc00:	1e02      	subs	r2, r0, #0
 23fdc02:	dd04      	ble.n	23fdc0e <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fdc04:	6823      	ldr	r3, [r4, #0]
 23fdc06:	4669      	mov	r1, sp
 23fdc08:	4620      	mov	r0, r4
 23fdc0a:	68db      	ldr	r3, [r3, #12]
 23fdc0c:	4798      	blx	r3
 23fdc0e:	46b5      	mov	sp, r6
}
 23fdc10:	3730      	adds	r7, #48	; 0x30
 23fdc12:	46bd      	mov	sp, r7
 23fdc14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fdc18:	b003      	add	sp, #12
 23fdc1a:	4770      	bx	lr
    } else if (n > 0) {
 23fdc1c:	2800      	cmp	r0, #0
 23fdc1e:	d0f7      	beq.n	23fdc10 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fdc20:	6823      	ldr	r3, [r4, #0]
 23fdc22:	4602      	mov	r2, r0
 23fdc24:	68db      	ldr	r3, [r3, #12]
 23fdc26:	4620      	mov	r0, r4
 23fdc28:	f107 0110 	add.w	r1, r7, #16
 23fdc2c:	4798      	blx	r3
}
 23fdc2e:	e7ef      	b.n	23fdc10 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fdc30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fdc30:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fdc32:	4c08      	ldr	r4, [pc, #32]	; (23fdc54 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fdc34:	e8d4 3f8f 	ldab	r3, [r4]
 23fdc38:	07db      	lsls	r3, r3, #31
 23fdc3a:	d409      	bmi.n	23fdc50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdc3c:	4620      	mov	r0, r4
 23fdc3e:	f7fe fc15 	bl	23fc46c <__cxa_guard_acquire>
 23fdc42:	b128      	cbz	r0, 23fdc50 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fdc44:	4620      	mov	r0, r4
 23fdc46:	f7fe fc16 	bl	23fc476 <__cxa_guard_release>
 23fdc4a:	4803      	ldr	r0, [pc, #12]	; (23fdc58 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fdc4c:	f001 fd78 	bl	23ff740 <atexit>
}
 23fdc50:	4802      	ldr	r0, [pc, #8]	; (23fdc5c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fdc52:	bd10      	pop	{r4, pc}
 23fdc54:	1007ae6c 	.word	0x1007ae6c
 23fdc58:	023fda0d 	.word	0x023fda0d
 23fdc5c:	1007ad7c 	.word	0x1007ad7c

023fdc60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fdc60:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fdc62:	4c08      	ldr	r4, [pc, #32]	; (23fdc84 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fdc64:	e8d4 3f8f 	ldab	r3, [r4]
 23fdc68:	07db      	lsls	r3, r3, #31
 23fdc6a:	d409      	bmi.n	23fdc80 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdc6c:	4620      	mov	r0, r4
 23fdc6e:	f7fe fbfd 	bl	23fc46c <__cxa_guard_acquire>
 23fdc72:	b128      	cbz	r0, 23fdc80 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fdc74:	4620      	mov	r0, r4
 23fdc76:	f7fe fbfe 	bl	23fc476 <__cxa_guard_release>
 23fdc7a:	4803      	ldr	r0, [pc, #12]	; (23fdc88 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fdc7c:	f001 fd60 	bl	23ff740 <atexit>
    return &factory;
}
 23fdc80:	4802      	ldr	r0, [pc, #8]	; (23fdc8c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fdc82:	bd10      	pop	{r4, pc}
 23fdc84:	1007ae70 	.word	0x1007ae70
 23fdc88:	023fda65 	.word	0x023fda65
 23fdc8c:	1007ad80 	.word	0x1007ad80

023fdc90 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fdc90:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fdc92:	2500      	movs	r5, #0
 23fdc94:	4604      	mov	r4, r0
 23fdc96:	e9c0 5500 	strd	r5, r5, [r0]
 23fdc9a:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fdc9e:	6085      	str	r5, [r0, #8]
 23fdca0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fdca2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fdca6:	f7ff f891 	bl	23fcdcc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fdcaa:	f7ff ffc1 	bl	23fdc30 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fdcae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdcb0:	f7ff ffd6 	bl	23fdc60 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fdcb4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fdcb6:	6220      	str	r0, [r4, #32]
}
 23fdcb8:	4620      	mov	r0, r4
 23fdcba:	bd38      	pop	{r3, r4, r5, pc}

023fdcbc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fdcbc:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fdcbe:	4c0a      	ldr	r4, [pc, #40]	; (23fdce8 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fdcc0:	e8d4 3f8f 	ldab	r3, [r4]
 23fdcc4:	07db      	lsls	r3, r3, #31
 23fdcc6:	d40c      	bmi.n	23fdce2 <_ZN5spark10LogManager8instanceEv+0x26>
 23fdcc8:	4620      	mov	r0, r4
 23fdcca:	f7fe fbcf 	bl	23fc46c <__cxa_guard_acquire>
 23fdcce:	b140      	cbz	r0, 23fdce2 <_ZN5spark10LogManager8instanceEv+0x26>
 23fdcd0:	4806      	ldr	r0, [pc, #24]	; (23fdcec <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdcd2:	f7ff ffdd 	bl	23fdc90 <_ZN5spark10LogManagerC1Ev>
 23fdcd6:	4620      	mov	r0, r4
 23fdcd8:	f7fe fbcd 	bl	23fc476 <__cxa_guard_release>
 23fdcdc:	4804      	ldr	r0, [pc, #16]	; (23fdcf0 <_ZN5spark10LogManager8instanceEv+0x34>)
 23fdcde:	f001 fd2f 	bl	23ff740 <atexit>
    return &mgr;
}
 23fdce2:	4802      	ldr	r0, [pc, #8]	; (23fdcec <_ZN5spark10LogManager8instanceEv+0x30>)
 23fdce4:	bd10      	pop	{r4, pc}
 23fdce6:	bf00      	nop
 23fdce8:	1007ae68 	.word	0x1007ae68
 23fdcec:	1007ae78 	.word	0x1007ae78
 23fdcf0:	023fe231 	.word	0x023fe231

023fdcf4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fdcf4:	2300      	movs	r3, #0
 23fdcf6:	4a02      	ldr	r2, [pc, #8]	; (23fdd00 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fdcf8:	4902      	ldr	r1, [pc, #8]	; (23fdd04 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fdcfa:	4803      	ldr	r0, [pc, #12]	; (23fdd08 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fdcfc:	f7ff bab2 	b.w	23fd264 <log_set_callbacks>
 23fdd00:	023fe019 	.word	0x023fe019
 23fdd04:	023fdfa5 	.word	0x023fdfa5
 23fdd08:	023fdf25 	.word	0x023fdf25

023fdd0c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fdd0c:	2300      	movs	r3, #0
 23fdd0e:	461a      	mov	r2, r3
 23fdd10:	4619      	mov	r1, r3
 23fdd12:	4618      	mov	r0, r3
 23fdd14:	f7ff baa6 	b.w	23fd264 <log_set_callbacks>

023fdd18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fdd18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdd1a:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fdd1c:	688d      	ldr	r5, [r1, #8]
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fdd1e:	4668      	mov	r0, sp
 23fdd20:	f7ff fc74 	bl	23fd60c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdd24:	466a      	mov	r2, sp
 23fdd26:	4629      	mov	r1, r5
 23fdd28:	4620      	mov	r0, r4
 23fdd2a:	f001 fa99 	bl	23ff260 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fdd2e:	a801      	add	r0, sp, #4
 23fdd30:	f7ff fc75 	bl	23fd61e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdd34:	4620      	mov	r0, r4
 23fdd36:	b003      	add	sp, #12
 23fdd38:	bd30      	pop	{r4, r5, pc}

023fdd3a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fdd3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdd3c:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fdd3e:	68cd      	ldr	r5, [r1, #12]
 23fdd40:	4668      	mov	r0, sp
 23fdd42:	f7ff fc63 	bl	23fd60c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdd46:	466a      	mov	r2, sp
 23fdd48:	4629      	mov	r1, r5
 23fdd4a:	4620      	mov	r0, r4
 23fdd4c:	f001 fa64 	bl	23ff218 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fdd50:	a801      	add	r0, sp, #4
 23fdd52:	f7ff fc64 	bl	23fd61e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdd56:	4620      	mov	r0, r4
 23fdd58:	b003      	add	sp, #12
 23fdd5a:	bd30      	pop	{r4, r5, pc}

023fdd5c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fdd5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdd5e:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fdd60:	690d      	ldr	r5, [r1, #16]
 23fdd62:	4668      	mov	r0, sp
 23fdd64:	f7ff fc52 	bl	23fd60c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fdd68:	466a      	mov	r2, sp
 23fdd6a:	4629      	mov	r1, r5
 23fdd6c:	4620      	mov	r0, r4
 23fdd6e:	f001 f9fc 	bl	23ff16a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fdd72:	a801      	add	r0, sp, #4
 23fdd74:	f7ff fc53 	bl	23fd61e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fdd78:	4620      	mov	r0, r4
 23fdd7a:	b003      	add	sp, #12
 23fdd7c:	bd30      	pop	{r4, r5, pc}
	...

023fdd80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fdd80:	b570      	push	{r4, r5, r6, lr}
 23fdd82:	b08a      	sub	sp, #40	; 0x28
 23fdd84:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fdd86:	4601      	mov	r1, r0
 23fdd88:	a804      	add	r0, sp, #16
 23fdd8a:	f7ff ffc5 	bl	23fdd18 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fdd8e:	4e14      	ldr	r6, [pc, #80]	; (23fdde0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fdd90:	a804      	add	r0, sp, #16
 23fdd92:	f001 fa7d 	bl	23ff290 <_ZN5spark18JSONObjectIterator4nextEv>
 23fdd96:	b1e8      	cbz	r0, 23fddd4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fdd98:	4668      	mov	r0, sp
 23fdd9a:	a904      	add	r1, sp, #16
 23fdd9c:	f7ff ffcd 	bl	23fdd3a <_ZNK5spark18JSONObjectIterator4nameEv>
 23fdda0:	4631      	mov	r1, r6
 23fdda2:	9802      	ldr	r0, [sp, #8]
 23fdda4:	f7ff fe57 	bl	23fda56 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fdda8:	4604      	mov	r4, r0
 23fddaa:	b110      	cbz	r0, 23fddb2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fddac:	1e2c      	subs	r4, r5, #0
 23fddae:	bf18      	it	ne
 23fddb0:	2401      	movne	r4, #1
 23fddb2:	a801      	add	r0, sp, #4
 23fddb4:	f7ff fc33 	bl	23fd61e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fddb8:	2c00      	cmp	r4, #0
 23fddba:	d0e9      	beq.n	23fdd90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fddbc:	4668      	mov	r0, sp
 23fddbe:	a904      	add	r1, sp, #16
 23fddc0:	f7ff ffcc 	bl	23fdd5c <_ZNK5spark18JSONObjectIterator5valueEv>
 23fddc4:	4668      	mov	r0, sp
 23fddc6:	f001 fa06 	bl	23ff1d6 <_ZNK5spark9JSONValue5toIntEv>
 23fddca:	6028      	str	r0, [r5, #0]
 23fddcc:	a801      	add	r0, sp, #4
 23fddce:	f7ff fc26 	bl	23fd61e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fddd2:	e7dd      	b.n	23fdd90 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fddd4:	a805      	add	r0, sp, #20
 23fddd6:	f7ff fc22 	bl	23fd61e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fddda:	b00a      	add	sp, #40	; 0x28
 23fdddc:	bd70      	pop	{r4, r5, r6, pc}
 23fddde:	bf00      	nop
 23fdde0:	023ffc00 	.word	0x023ffc00

023fdde4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fdde4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fdde6:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fdde8:	4913      	ldr	r1, [pc, #76]	; (23fde38 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fddea:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fddec:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fddee:	f7fe fafb 	bl	23fc3e8 <strcmp>
 23fddf2:	b950      	cbnz	r0, 23fde0a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fddf4:	f000 ff66 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fddf8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fddfc:	f000 ff52 	bl	23feca4 <_ZN9USBSerial5beginEl>
}
 23fde00:	b003      	add	sp, #12
 23fde02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fde06:	f000 bf5d 	b.w	23fecc4 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fde0a:	4620      	mov	r0, r4
 23fde0c:	490b      	ldr	r1, [pc, #44]	; (23fde3c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fde0e:	f7fe faeb 	bl	23fc3e8 <strcmp>
 23fde12:	b978      	cbnz	r0, 23fde34 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fde14:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fde18:	a901      	add	r1, sp, #4
 23fde1a:	4628      	mov	r0, r5
        int baud = 9600;
 23fde1c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fde1e:	f7ff ffaf 	bl	23fdd80 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fde22:	f001 fbb9 	bl	23ff598 <_Z22__fetch_global_Serial1v>
 23fde26:	9901      	ldr	r1, [sp, #4]
 23fde28:	f000 ffc6 	bl	23fedb8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fde2c:	f001 fbb4 	bl	23ff598 <_Z22__fetch_global_Serial1v>
}
 23fde30:	b003      	add	sp, #12
 23fde32:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fde34:	2000      	movs	r0, #0
 23fde36:	e7fb      	b.n	23fde30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fde38:	023ffc05 	.word	0x023ffc05
 23fde3c:	023ffc0c 	.word	0x023ffc0c

023fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fde40:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fde42:	2614      	movs	r6, #20
 23fde44:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fde48:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fde4a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fde4e:	42ae      	cmp	r6, r5
 23fde50:	d005      	beq.n	23fde5e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fde52:	f105 0008 	add.w	r0, r5, #8
 23fde56:	f7ff fff3 	bl	23fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fde5a:	3514      	adds	r5, #20
 23fde5c:	e7f7      	b.n	23fde4e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fde5e:	6820      	ldr	r0, [r4, #0]
 23fde60:	f7ff fb42 	bl	23fd4e8 <free>
}
 23fde64:	4620      	mov	r0, r4
 23fde66:	bd70      	pop	{r4, r5, r6, pc}

023fde68 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fde68:	b510      	push	{r4, lr}
 23fde6a:	4604      	mov	r4, r0
 23fde6c:	300c      	adds	r0, #12
 23fde6e:	f7ff ffe7 	bl	23fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fde72:	4620      	mov	r0, r4
 23fde74:	f7ff fd24 	bl	23fd8c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fde78:	4620      	mov	r0, r4
 23fde7a:	bd10      	pop	{r4, pc}

023fde7c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fde7c:	b510      	push	{r4, lr}
 23fde7e:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fde80:	4b03      	ldr	r3, [pc, #12]	; (23fde90 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fde82:	f840 3b04 	str.w	r3, [r0], #4
 23fde86:	f7ff ffef 	bl	23fde68 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fde8a:	4620      	mov	r0, r4
 23fde8c:	bd10      	pop	{r4, pc}
 23fde8e:	bf00      	nop
 23fde90:	023ffad0 	.word	0x023ffad0

023fde94 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fde94:	b510      	push	{r4, lr}
 23fde96:	4604      	mov	r4, r0
 23fde98:	f7ff fff0 	bl	23fde7c <_ZN5spark16StreamLogHandlerD1Ev>
 23fde9c:	4620      	mov	r0, r4
 23fde9e:	2124      	movs	r1, #36	; 0x24
 23fdea0:	f7fe fad5 	bl	23fc44e <_ZdlPvj>
 23fdea4:	4620      	mov	r0, r4
 23fdea6:	bd10      	pop	{r4, pc}

023fdea8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fdea8:	b510      	push	{r4, lr}
 23fdeaa:	4604      	mov	r4, r0
 23fdeac:	4b02      	ldr	r3, [pc, #8]	; (23fdeb8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fdeae:	6003      	str	r3, [r0, #0]
 23fdeb0:	f7ff ffe4 	bl	23fde7c <_ZN5spark16StreamLogHandlerD1Ev>
 23fdeb4:	4620      	mov	r0, r4
 23fdeb6:	bd10      	pop	{r4, pc}
 23fdeb8:	023ffc98 	.word	0x023ffc98

023fdebc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fdebc:	b510      	push	{r4, lr}
 23fdebe:	4604      	mov	r4, r0
 23fdec0:	f7ff fff2 	bl	23fdea8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fdec4:	4620      	mov	r0, r4
 23fdec6:	2124      	movs	r1, #36	; 0x24
 23fdec8:	f7fe fac1 	bl	23fc44e <_ZdlPvj>
 23fdecc:	4620      	mov	r0, r4
 23fdece:	bd10      	pop	{r4, pc}

023fded0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fded0:	680a      	ldr	r2, [r1, #0]
 23fded2:	b510      	push	{r4, lr}
 23fded4:	6002      	str	r2, [r0, #0]
 23fded6:	684a      	ldr	r2, [r1, #4]
 23fded8:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fdeda:	2200      	movs	r2, #0
 23fdedc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fdee0:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdee2:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdee4:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdee6:	6084      	str	r4, [r0, #8]
 23fdee8:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdeea:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fdeec:	60c4      	str	r4, [r0, #12]
 23fdeee:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdef0:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fdef2:	6104      	str	r4, [r0, #16]
 23fdef4:	bd10      	pop	{r4, pc}

023fdef6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23fdef6:	2200      	movs	r2, #0
 23fdef8:	e9c0 2200 	strd	r2, r2, [r0]
 23fdefc:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fdefe:	b510      	push	{r4, lr}
 23fdf00:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf02:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fdf04:	6004      	str	r4, [r0, #0]
 23fdf06:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf08:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fdf0a:	6044      	str	r4, [r0, #4]
 23fdf0c:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fdf0e:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fdf10:	6084      	str	r4, [r0, #8]
}
 23fdf12:	bd10      	pop	{r4, pc}

023fdf14 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fdf14:	b510      	push	{r4, lr}
 23fdf16:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fdf18:	6803      	ldr	r3, [r0, #0]
 23fdf1a:	6818      	ldr	r0, [r3, #0]
 23fdf1c:	f7fe ff80 	bl	23fce20 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fdf20:	4620      	mov	r0, r4
 23fdf22:	bd10      	pop	{r4, pc}

023fdf24 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fdf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdf28:	b087      	sub	sp, #28
 23fdf2a:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fdf2c:	4b1c      	ldr	r3, [pc, #112]	; (23fdfa0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fdf2e:	4680      	mov	r8, r0
 23fdf30:	685b      	ldr	r3, [r3, #4]
 23fdf32:	4689      	mov	r9, r1
 23fdf34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdf38:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fdf3a:	b96b      	cbnz	r3, 23fdf58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fdf3c:	f7ff febe 	bl	23fdcbc <_ZN5spark10LogManager8instanceEv>
 23fdf40:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdf42:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fdf46:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdf48:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fdf4a:	f7ff fd82 	bl	23fda52 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fdf4e:	7b23      	ldrb	r3, [r4, #12]
 23fdf50:	b12b      	cbz	r3, 23fdf5e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fdf52:	a805      	add	r0, sp, #20
 23fdf54:	f7ff ffde 	bl	23fdf14 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fdf58:	b007      	add	sp, #28
 23fdf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fdf5e:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fdf60:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fdf64:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fdf66:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdf6a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdf6e:	45aa      	cmp	sl, r5
 23fdf70:	d012      	beq.n	23fdf98 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fdf72:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fdf76:	4631      	mov	r1, r6
 23fdf78:	1d38      	adds	r0, r7, #4
 23fdf7a:	f7ff fdf7 	bl	23fdb6c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdf7e:	4581      	cmp	r9, r0
 23fdf80:	d3f5      	bcc.n	23fdf6e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fdf82:	9a03      	ldr	r2, [sp, #12]
 23fdf84:	683b      	ldr	r3, [r7, #0]
 23fdf86:	9200      	str	r2, [sp, #0]
 23fdf88:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fdf8c:	464a      	mov	r2, r9
 23fdf8e:	4633      	mov	r3, r6
 23fdf90:	4641      	mov	r1, r8
 23fdf92:	4638      	mov	r0, r7
 23fdf94:	47d8      	blx	fp
 23fdf96:	e7ea      	b.n	23fdf6e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fdf98:	2300      	movs	r3, #0
 23fdf9a:	7323      	strb	r3, [r4, #12]
 23fdf9c:	e7d9      	b.n	23fdf52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fdf9e:	bf00      	nop
 23fdfa0:	e000ed00 	.word	0xe000ed00

023fdfa4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fdfa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fdfa8:	469b      	mov	fp, r3
 23fdfaa:	4b1a      	ldr	r3, [pc, #104]	; (23fe014 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fdfac:	4680      	mov	r8, r0
 23fdfae:	685b      	ldr	r3, [r3, #4]
 23fdfb0:	4689      	mov	r9, r1
 23fdfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fdfb6:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fdfb8:	b96b      	cbnz	r3, 23fdfd6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fdfba:	f7ff fe7f 	bl	23fdcbc <_ZN5spark10LogManager8instanceEv>
 23fdfbe:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fdfc0:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fdfc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fdfc6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fdfc8:	f7ff fd43 	bl	23fda52 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fdfcc:	7b23      	ldrb	r3, [r4, #12]
 23fdfce:	b12b      	cbz	r3, 23fdfdc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fdfd0:	a801      	add	r0, sp, #4
 23fdfd2:	f7ff ff9f 	bl	23fdf14 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fdfd6:	b003      	add	sp, #12
 23fdfd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fdfdc:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fdfde:	b2f6      	uxtb	r6, r6
 23fdfe0:	7323      	strb	r3, [r4, #12]
 23fdfe2:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fdfe6:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fdfea:	4555      	cmp	r5, sl
 23fdfec:	d00e      	beq.n	23fe00c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fdfee:	f855 7b04 	ldr.w	r7, [r5], #4
 23fdff2:	4659      	mov	r1, fp
 23fdff4:	1d38      	adds	r0, r7, #4
 23fdff6:	f7ff fdb9 	bl	23fdb6c <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fdffa:	4286      	cmp	r6, r0
 23fdffc:	d3f5      	bcc.n	23fdfea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fdffe:	683b      	ldr	r3, [r7, #0]
 23fe000:	464a      	mov	r2, r9
 23fe002:	4641      	mov	r1, r8
 23fe004:	4638      	mov	r0, r7
 23fe006:	68db      	ldr	r3, [r3, #12]
 23fe008:	4798      	blx	r3
 23fe00a:	e7ee      	b.n	23fdfea <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fe00c:	2300      	movs	r3, #0
 23fe00e:	7323      	strb	r3, [r4, #12]
 23fe010:	e7de      	b.n	23fdfd0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fe012:	bf00      	nop
 23fe014:	e000ed00 	.word	0xe000ed00

023fe018 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fe018:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fe01c:	4b16      	ldr	r3, [pc, #88]	; (23fe078 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fe01e:	4605      	mov	r5, r0
 23fe020:	685b      	ldr	r3, [r3, #4]
 23fe022:	460f      	mov	r7, r1
 23fe024:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fe028:	bb1b      	cbnz	r3, 23fe072 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fe02a:	f7ff fe47 	bl	23fdcbc <_ZN5spark10LogManager8instanceEv>
 23fe02e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fe030:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe034:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe036:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe038:	f7ff fd0b 	bl	23fda52 <_ZN14RecursiveMutex4lockEv.isra.0>
 23fe03c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fe040:	2446      	movs	r4, #70	; 0x46
 23fe042:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fe046:	45b0      	cmp	r8, r6
 23fe048:	d109      	bne.n	23fe05e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fe04a:	a801      	add	r0, sp, #4
 23fe04c:	f7ff ff62 	bl	23fdf14 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fe050:	42a5      	cmp	r5, r4
 23fe052:	bfb4      	ite	lt
 23fe054:	2000      	movlt	r0, #0
 23fe056:	2001      	movge	r0, #1
}
 23fe058:	b002      	add	sp, #8
 23fe05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fe05e:	f856 0b04 	ldr.w	r0, [r6], #4
 23fe062:	4639      	mov	r1, r7
 23fe064:	3004      	adds	r0, #4
 23fe066:	f7ff fd81 	bl	23fdb6c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fe06a:	4284      	cmp	r4, r0
 23fe06c:	bfa8      	it	ge
 23fe06e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fe070:	e7e9      	b.n	23fe046 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fe072:	2000      	movs	r0, #0
 23fe074:	e7f0      	b.n	23fe058 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fe076:	bf00      	nop
 23fe078:	e000ed00 	.word	0xe000ed00

023fe07c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe07e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fe082:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fe084:	4604      	mov	r4, r0
 23fe086:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe088:	db0d      	blt.n	23fe0a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fe08a:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fe08c:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fe08e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fe090:	dd04      	ble.n	23fe09c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fe092:	00b9      	lsls	r1, r7, #2
 23fe094:	f7ff fa36 	bl	23fd504 <realloc>
            if (!d) {
 23fe098:	b918      	cbnz	r0, 23fe0a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fe09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fe09c:	f7ff fa24 	bl	23fd4e8 <free>
        T* d = nullptr;
 23fe0a0:	2000      	movs	r0, #0
        data_ = d;
 23fe0a2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fe0a4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fe0a6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fe0a8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fe0aa:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fe0ae:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe0b0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fe0b4:	1d08      	adds	r0, r1, #4
 23fe0b6:	f001 fb62 	bl	23ff77e <memmove>
    new(p) T(std::move(value));
 23fe0ba:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fe0be:	6863      	ldr	r3, [r4, #4]
    return true;
 23fe0c0:	2001      	movs	r0, #1
    ++size_;
 23fe0c2:	3301      	adds	r3, #1
 23fe0c4:	6063      	str	r3, [r4, #4]
    return true;
 23fe0c6:	e7e8      	b.n	23fe09a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fe0c8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe0c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe0ca:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe0cc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe0d0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe0d2:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fe0d4:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fe0d6:	f7ff fcbc 	bl	23fda52 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fe0da:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fe0de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fe0e2:	4293      	cmp	r3, r2
 23fe0e4:	4619      	mov	r1, r3
 23fe0e6:	d00a      	beq.n	23fe0fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fe0e8:	6809      	ldr	r1, [r1, #0]
 23fe0ea:	3304      	adds	r3, #4
 23fe0ec:	42a9      	cmp	r1, r5
 23fe0ee:	d1f8      	bne.n	23fe0e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fe0f0:	a801      	add	r0, sp, #4
 23fe0f2:	f7ff ff0f 	bl	23fdf14 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe0f6:	2500      	movs	r5, #0
}
 23fe0f8:	4628      	mov	r0, r5
 23fe0fa:	b003      	add	sp, #12
 23fe0fc:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fe0fe:	4629      	mov	r1, r5
 23fe100:	4620      	mov	r0, r4
 23fe102:	f7ff ffbb 	bl	23fe07c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fe106:	4605      	mov	r5, r0
 23fe108:	2800      	cmp	r0, #0
 23fe10a:	d0f1      	beq.n	23fe0f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fe10c:	6863      	ldr	r3, [r4, #4]
 23fe10e:	2b01      	cmp	r3, #1
 23fe110:	d101      	bne.n	23fe116 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fe112:	f7ff fdef 	bl	23fdcf4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe116:	a801      	add	r0, sp, #4
 23fe118:	f7ff fefc 	bl	23fdf14 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fe11c:	e7ec      	b.n	23fe0f8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fe11e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fe11e:	460b      	mov	r3, r1
 23fe120:	b570      	push	{r4, r5, r6, lr}
 23fe122:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fe124:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fe128:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fe12c:	4282      	cmp	r2, r0
 23fe12e:	d00f      	beq.n	23fe150 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fe130:	4601      	mov	r1, r0
            if (*p == value) {
 23fe132:	681d      	ldr	r5, [r3, #0]
 23fe134:	f851 6b04 	ldr.w	r6, [r1], #4
 23fe138:	42ae      	cmp	r6, r5
 23fe13a:	d107      	bne.n	23fe14c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fe13c:	1a52      	subs	r2, r2, r1
 23fe13e:	f001 fb1e 	bl	23ff77e <memmove>
    return true;
 23fe142:	2001      	movs	r0, #1
    --size_;
 23fe144:	6863      	ldr	r3, [r4, #4]
 23fe146:	3b01      	subs	r3, #1
 23fe148:	6063      	str	r3, [r4, #4]
}
 23fe14a:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fe14c:	4608      	mov	r0, r1
 23fe14e:	e7ed      	b.n	23fe12c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fe150:	2000      	movs	r0, #0
 23fe152:	e7fa      	b.n	23fe14a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fe154 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe156:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fe158:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fe15c:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fe15e:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe160:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fe162:	f7ff fc76 	bl	23fda52 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fe166:	4620      	mov	r0, r4
 23fe168:	a901      	add	r1, sp, #4
 23fe16a:	f7ff ffd8 	bl	23fe11e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fe16e:	b118      	cbz	r0, 23fe178 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fe170:	6863      	ldr	r3, [r4, #4]
 23fe172:	b90b      	cbnz	r3, 23fe178 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fe174:	f7ff fdca 	bl	23fdd0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe178:	a803      	add	r0, sp, #12
 23fe17a:	f7ff fecb 	bl	23fdf14 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fe17e:	b004      	add	sp, #16
 23fe180:	bd10      	pop	{r4, pc}

023fe182 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fe182:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fe184:	b570      	push	{r4, r5, r6, lr}
 23fe186:	4604      	mov	r4, r0
 23fe188:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fe18c:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe190:	42ae      	cmp	r6, r5
 23fe192:	d015      	beq.n	23fe1c0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fe194:	4620      	mov	r0, r4
 23fe196:	f105 0110 	add.w	r1, r5, #16
 23fe19a:	f7ff ffc0 	bl	23fe11e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fe19e:	6863      	ldr	r3, [r4, #4]
 23fe1a0:	b90b      	cbnz	r3, 23fe1a6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fe1a2:	f7ff fdb3 	bl	23fdd0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fe1a6:	69e0      	ldr	r0, [r4, #28]
 23fe1a8:	6929      	ldr	r1, [r5, #16]
 23fe1aa:	6803      	ldr	r3, [r0, #0]
 23fe1ac:	68db      	ldr	r3, [r3, #12]
 23fe1ae:	4798      	blx	r3
        if (h.stream) {
 23fe1b0:	6969      	ldr	r1, [r5, #20]
 23fe1b2:	b119      	cbz	r1, 23fe1bc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fe1b4:	6a20      	ldr	r0, [r4, #32]
 23fe1b6:	6803      	ldr	r3, [r0, #0]
 23fe1b8:	68db      	ldr	r3, [r3, #12]
 23fe1ba:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fe1bc:	3518      	adds	r5, #24
 23fe1be:	e7e7      	b.n	23fe190 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fe1c0:	2618      	movs	r6, #24
 23fe1c2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe1c6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe1ca:	42ae      	cmp	r6, r5
 23fe1cc:	d004      	beq.n	23fe1d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fe1ce:	4628      	mov	r0, r5
 23fe1d0:	f7ff fac0 	bl	23fd754 <_ZN6StringD1Ev>
 23fe1d4:	3518      	adds	r5, #24
 23fe1d6:	e7f8      	b.n	23fe1ca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fe1d8:	2300      	movs	r3, #0
 23fe1da:	6163      	str	r3, [r4, #20]
}
 23fe1dc:	bd70      	pop	{r4, r5, r6, pc}

023fe1de <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fe1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe1e0:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fe1e2:	f7ff fd93 	bl	23fdd0c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fe1e6:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fe1ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fe1ec:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fe1ee:	f7ff fc30 	bl	23fda52 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fe1f2:	4620      	mov	r0, r4
 23fe1f4:	f7ff ffc5 	bl	23fe182 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fe1f8:	a801      	add	r0, sp, #4
 23fe1fa:	f7ff fe8b 	bl	23fdf14 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fe1fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fe200:	b108      	cbz	r0, 23fe206 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fe202:	f7fe fdf1 	bl	23fcde8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fe206:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fe20a:	2618      	movs	r6, #24
 23fe20c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fe210:	42ae      	cmp	r6, r5
 23fe212:	d004      	beq.n	23fe21e <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fe214:	4628      	mov	r0, r5
 23fe216:	f7ff fa9d 	bl	23fd754 <_ZN6StringD1Ev>
 23fe21a:	3518      	adds	r5, #24
 23fe21c:	e7f8      	b.n	23fe210 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fe21e:	6920      	ldr	r0, [r4, #16]
 23fe220:	f7ff f962 	bl	23fd4e8 <free>
 23fe224:	6820      	ldr	r0, [r4, #0]
 23fe226:	f7ff f95f 	bl	23fd4e8 <free>
}
 23fe22a:	4620      	mov	r0, r4
 23fe22c:	b002      	add	sp, #8
 23fe22e:	bd70      	pop	{r4, r5, r6, pc}

023fe230 <__tcf_2>:
    static LogManager mgr;
 23fe230:	4801      	ldr	r0, [pc, #4]	; (23fe238 <__tcf_2+0x8>)
 23fe232:	f7ff bfd4 	b.w	23fe1de <_ZN5spark10LogManagerD1Ev>
 23fe236:	bf00      	nop
 23fe238:	1007ae78 	.word	0x1007ae78

023fe23c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fe23c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe23e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe240:	4604      	mov	r4, r0
 23fe242:	460d      	mov	r5, r1
 23fe244:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe246:	d915      	bls.n	23fe274 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fe248:	4290      	cmp	r0, r2
 23fe24a:	d214      	bcs.n	23fe276 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fe24c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fe250:	1a75      	subs	r5, r6, r1
 23fe252:	f1a1 0714 	sub.w	r7, r1, #20
 23fe256:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe258:	42b7      	cmp	r7, r6
 23fe25a:	d01a      	beq.n	23fe292 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fe25c:	b11c      	cbz	r4, 23fe266 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fe25e:	4631      	mov	r1, r6
 23fe260:	4620      	mov	r0, r4
 23fe262:	f7ff fe35 	bl	23fded0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fe266:	f106 0008 	add.w	r0, r6, #8
 23fe26a:	f7ff fde9 	bl	23fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fe26e:	3e14      	subs	r6, #20
 23fe270:	3c14      	subs	r4, #20
 23fe272:	e7f1      	b.n	23fe258 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fe274:	d00d      	beq.n	23fe292 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fe276:	42b5      	cmp	r5, r6
 23fe278:	d00b      	beq.n	23fe292 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fe27a:	b11c      	cbz	r4, 23fe284 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fe27c:	4629      	mov	r1, r5
 23fe27e:	4620      	mov	r0, r4
 23fe280:	f7ff fe26 	bl	23fded0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fe284:	f105 0008 	add.w	r0, r5, #8
 23fe288:	f7ff fdda 	bl	23fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fe28c:	3514      	adds	r5, #20
 23fe28e:	3414      	adds	r4, #20
 23fe290:	e7f1      	b.n	23fe276 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fe292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe294 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fe294:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fe296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe298:	4604      	mov	r4, r0
 23fe29a:	460d      	mov	r5, r1
 23fe29c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fe29e:	d914      	bls.n	23fe2ca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fe2a0:	4290      	cmp	r0, r2
 23fe2a2:	d213      	bcs.n	23fe2cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fe2a4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fe2a8:	1a75      	subs	r5, r6, r1
 23fe2aa:	f1a1 0710 	sub.w	r7, r1, #16
 23fe2ae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fe2b0:	42b7      	cmp	r7, r6
 23fe2b2:	d018      	beq.n	23fe2e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fe2b4:	b11c      	cbz	r4, 23fe2be <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fe2b6:	4631      	mov	r1, r6
 23fe2b8:	4620      	mov	r0, r4
 23fe2ba:	f7ff fac8 	bl	23fd84e <_ZN6StringC1EOS_>
                end->~T();
 23fe2be:	4630      	mov	r0, r6
 23fe2c0:	f7ff fa48 	bl	23fd754 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fe2c4:	3e10      	subs	r6, #16
 23fe2c6:	3c10      	subs	r4, #16
 23fe2c8:	e7f2      	b.n	23fe2b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fe2ca:	d00c      	beq.n	23fe2e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fe2cc:	42b5      	cmp	r5, r6
 23fe2ce:	d00a      	beq.n	23fe2e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fe2d0:	b11c      	cbz	r4, 23fe2da <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fe2d2:	4629      	mov	r1, r5
 23fe2d4:	4620      	mov	r0, r4
 23fe2d6:	f7ff faba 	bl	23fd84e <_ZN6StringC1EOS_>
                p->~T();
 23fe2da:	4628      	mov	r0, r5
 23fe2dc:	f7ff fa3a 	bl	23fd754 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fe2e0:	3510      	adds	r5, #16
 23fe2e2:	3410      	adds	r4, #16
 23fe2e4:	e7f2      	b.n	23fe2cc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fe2e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fe2e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fe2e8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fe2ea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fe2ec:	4605      	mov	r5, r0
        if (n > 0) {
 23fe2ee:	dd11      	ble.n	23fe314 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fe2f0:	0130      	lsls	r0, r6, #4
 23fe2f2:	f7ff f8eb 	bl	23fd4cc <malloc>
            if (!d) {
 23fe2f6:	4604      	mov	r4, r0
 23fe2f8:	b158      	cbz	r0, 23fe312 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fe2fa:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe2fe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fe302:	f7ff ffc7 	bl	23fe294 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fe306:	6828      	ldr	r0, [r5, #0]
 23fe308:	f7ff f8ee 	bl	23fd4e8 <free>
        return true;
 23fe30c:	2001      	movs	r0, #1
        data_ = d;
 23fe30e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fe310:	60ae      	str	r6, [r5, #8]
    }
 23fe312:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fe314:	2400      	movs	r4, #0
 23fe316:	e7f6      	b.n	23fe306 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fe318 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe31c:	4690      	mov	r8, r2
        capacity_(0) {
 23fe31e:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe320:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fe322:	b095      	sub	sp, #84	; 0x54
 23fe324:	9103      	str	r1, [sp, #12]
    return size_;
 23fe326:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fe32a:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fe32c:	4299      	cmp	r1, r3
        capacity_(0) {
 23fe32e:	e9c0 3300 	strd	r3, r3, [r0]
 23fe332:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fe336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fe33a:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fe33e:	7602      	strb	r2, [r0, #24]
 23fe340:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fe342:	dc23      	bgt.n	23fe38c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fe344:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fe348:	2314      	movs	r3, #20
 23fe34a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fe34e:	42af      	cmp	r7, r5
 23fe350:	d03b      	beq.n	23fe3ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fe352:	4629      	mov	r1, r5
 23fe354:	a80b      	add	r0, sp, #44	; 0x2c
 23fe356:	f7ff fa7a 	bl	23fd84e <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fe35a:	a90b      	add	r1, sp, #44	; 0x2c
 23fe35c:	a80f      	add	r0, sp, #60	; 0x3c
 23fe35e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fe360:	f7ff fa75 	bl	23fd84e <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe364:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fe368:	4299      	cmp	r1, r3
 23fe36a:	da1b      	bge.n	23fe3a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fe36c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fe36e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fe370:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fe374:	4631      	mov	r1, r6
 23fe376:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fe37a:	f106 0010 	add.w	r0, r6, #16
 23fe37e:	f7ff ff89 	bl	23fe294 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fe382:	b9ee      	cbnz	r6, 23fe3c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fe384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fe386:	3301      	adds	r3, #1
 23fe388:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fe38a:	e011      	b.n	23fe3b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fe38c:	a808      	add	r0, sp, #32
 23fe38e:	f7ff ffab 	bl	23fe2e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe392:	2800      	cmp	r0, #0
 23fe394:	d1d6      	bne.n	23fe344 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fe396:	a808      	add	r0, sp, #32
 23fe398:	f7ff fa92 	bl	23fd8c0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fe39c:	4620      	mov	r0, r4
 23fe39e:	b015      	add	sp, #84	; 0x54
 23fe3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe3a4:	3101      	adds	r1, #1
 23fe3a6:	a808      	add	r0, sp, #32
 23fe3a8:	f7ff ff9e 	bl	23fe2e8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fe3ac:	2800      	cmp	r0, #0
 23fe3ae:	d1dd      	bne.n	23fe36c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fe3b0:	a80f      	add	r0, sp, #60	; 0x3c
 23fe3b2:	f7ff f9cf 	bl	23fd754 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fe3b6:	a80b      	add	r0, sp, #44	; 0x2c
 23fe3b8:	f7ff f9cc 	bl	23fd754 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fe3bc:	3514      	adds	r5, #20
 23fe3be:	e7c6      	b.n	23fe34e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fe3c0:	4630      	mov	r0, r6
 23fe3c2:	a90f      	add	r1, sp, #60	; 0x3c
 23fe3c4:	f7ff fa43 	bl	23fd84e <_ZN6StringC1EOS_>
 23fe3c8:	e7dc      	b.n	23fe384 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fe3ca:	2600      	movs	r6, #0
 23fe3cc:	f04f 0914 	mov.w	r9, #20
 23fe3d0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fe3d4:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fe3d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fe3da:	429e      	cmp	r6, r3
 23fe3dc:	da7c      	bge.n	23fe4d8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fe3de:	0133      	lsls	r3, r6, #4
 23fe3e0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fe3e2:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fe3e4:	b90b      	cbnz	r3, 23fe3ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fe3e6:	3601      	adds	r6, #1
 23fe3e8:	e7f5      	b.n	23fe3d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fe3ea:	2300      	movs	r3, #0
 23fe3ec:	9307      	str	r3, [sp, #28]
 23fe3ee:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fe3f2:	ad0b      	add	r5, sp, #44	; 0x2c
 23fe3f4:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fe3f6:	a907      	add	r1, sp, #28
 23fe3f8:	a806      	add	r0, sp, #24
 23fe3fa:	f7ff fb0a 	bl	23fda12 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fe3fe:	4682      	mov	sl, r0
 23fe400:	2800      	cmp	r0, #0
 23fe402:	d0f0      	beq.n	23fe3e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fe404:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe408:	4601      	mov	r1, r0
            bool found = false;
 23fe40a:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe40e:	4628      	mov	r0, r5
 23fe410:	9a07      	ldr	r2, [sp, #28]
 23fe412:	f10d 0317 	add.w	r3, sp, #23
 23fe416:	f7ff fb6d 	bl	23fdaf4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe41a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fe41e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe420:	2f00      	cmp	r7, #0
 23fe422:	d14a      	bne.n	23fe4ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fe424:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fe428:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fe42c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fe430:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe434:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fe438:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fe43c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fe43e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fe442:	4293      	cmp	r3, r2
 23fe444:	db17      	blt.n	23fe476 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fe446:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fe44a:	f1ba 0f00 	cmp.w	sl, #0
 23fe44e:	dd30      	ble.n	23fe4b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fe450:	fb09 f00a 	mul.w	r0, r9, sl
 23fe454:	f7ff f83a 	bl	23fd4cc <malloc>
            if (!d) {
 23fe458:	4683      	mov	fp, r0
 23fe45a:	b360      	cbz	r0, 23fe4b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fe45c:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fe460:	fb09 1202 	mla	r2, r9, r2, r1
 23fe464:	f7ff feea 	bl	23fe23c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fe468:	6828      	ldr	r0, [r5, #0]
 23fe46a:	f7ff f83d 	bl	23fd4e8 <free>
        data_ = d;
 23fe46e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fe472:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fe476:	682b      	ldr	r3, [r5, #0]
 23fe478:	9a01      	ldr	r2, [sp, #4]
 23fe47a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fe47e:	686a      	ldr	r2, [r5, #4]
 23fe480:	4651      	mov	r1, sl
 23fe482:	fb09 3202 	mla	r2, r9, r2, r3
 23fe486:	f10a 0014 	add.w	r0, sl, #20
 23fe48a:	f7ff fed7 	bl	23fe23c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fe48e:	f1ba 0f00 	cmp.w	sl, #0
 23fe492:	d003      	beq.n	23fe49c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fe494:	4650      	mov	r0, sl
 23fe496:	a90f      	add	r1, sp, #60	; 0x3c
 23fe498:	f7ff fd1a 	bl	23fded0 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fe49c:	686b      	ldr	r3, [r5, #4]
 23fe49e:	3301      	adds	r3, #1
 23fe4a0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fe4a2:	a811      	add	r0, sp, #68	; 0x44
 23fe4a4:	f7ff fccc 	bl	23fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe4a8:	b13f      	cbz	r7, 23fe4ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fe4aa:	a80b      	add	r0, sp, #44	; 0x2c
 23fe4ac:	f7ff fcc8 	bl	23fde40 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fe4b0:	e771      	b.n	23fe396 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fe4b2:	46bb      	mov	fp, r7
 23fe4b4:	e7d8      	b.n	23fe468 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fe4b6:	2701      	movs	r7, #1
 23fe4b8:	e7f3      	b.n	23fe4a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fe4ba:	9b01      	ldr	r3, [sp, #4]
 23fe4bc:	682d      	ldr	r5, [r5, #0]
 23fe4be:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fe4c2:	9b06      	ldr	r3, [sp, #24]
 23fe4c4:	781b      	ldrb	r3, [r3, #0]
 23fe4c6:	b92b      	cbnz	r3, 23fe4d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fe4c8:	f8d8 3000 	ldr.w	r3, [r8]
 23fe4cc:	9a02      	ldr	r2, [sp, #8]
 23fe4ce:	4413      	add	r3, r2
 23fe4d0:	7c1b      	ldrb	r3, [r3, #16]
 23fe4d2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fe4d4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fe4d6:	e78e      	b.n	23fe3f6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe4d8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe4da:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe4dc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe4de:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe4e0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe4e2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fe4e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fe4e6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe4e8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fe4ea:	60a2      	str	r2, [r4, #8]
 23fe4ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fe4ee:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe4f0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe4f2:	60e2      	str	r2, [r4, #12]
 23fe4f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fe4f6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe4f8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe4fa:	6122      	str	r2, [r4, #16]
 23fe4fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fe4fe:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fe500:	9b03      	ldr	r3, [sp, #12]
 23fe502:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fe504:	6162      	str	r2, [r4, #20]
 23fe506:	7623      	strb	r3, [r4, #24]
 23fe508:	e7cf      	b.n	23fe4aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fe50c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe50e:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fe510:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fe512:	4617      	mov	r7, r2
 23fe514:	b087      	sub	sp, #28
 23fe516:	460d      	mov	r5, r1
        stream_(&stream) {
 23fe518:	4668      	mov	r0, sp
 23fe51a:	4619      	mov	r1, r3
 23fe51c:	f7fe f91f 	bl	23fc75e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fe520:	4b0b      	ldr	r3, [pc, #44]	; (23fe550 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fe522:	4669      	mov	r1, sp
 23fe524:	f846 3b04 	str.w	r3, [r6], #4
 23fe528:	a803      	add	r0, sp, #12
 23fe52a:	f7fe f918 	bl	23fc75e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fe52e:	4639      	mov	r1, r7
 23fe530:	aa03      	add	r2, sp, #12
 23fe532:	4630      	mov	r0, r6
 23fe534:	f7ff fef0 	bl	23fe318 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe538:	a803      	add	r0, sp, #12
 23fe53a:	f7fe f8cf 	bl	23fc6dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fe53e:	4668      	mov	r0, sp
 23fe540:	f7fe f8cc 	bl	23fc6dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fe544:	4620      	mov	r0, r4
        stream_(&stream) {
 23fe546:	4b03      	ldr	r3, [pc, #12]	; (23fe554 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fe548:	6225      	str	r5, [r4, #32]
 23fe54a:	6023      	str	r3, [r4, #0]
}
 23fe54c:	b007      	add	sp, #28
 23fe54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fe550:	023ffad0 	.word	0x023ffad0
 23fe554:	023ffc80 	.word	0x023ffc80

023fe558 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fe558:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe55a:	460f      	mov	r7, r1
 23fe55c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe55e:	4638      	mov	r0, r7
 23fe560:	491c      	ldr	r1, [pc, #112]	; (23fe5d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fe562:	4616      	mov	r6, r2
 23fe564:	461d      	mov	r5, r3
 23fe566:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fe568:	f7fd ff3e 	bl	23fc3e8 <strcmp>
 23fe56c:	b9c0      	cbnz	r0, 23fe5a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fe56e:	b1a4      	cbz	r4, 23fe59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fe570:	4629      	mov	r1, r5
 23fe572:	a801      	add	r0, sp, #4
 23fe574:	f7ff fcbf 	bl	23fdef6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe578:	2024      	movs	r0, #36	; 0x24
 23fe57a:	4917      	ldr	r1, [pc, #92]	; (23fe5d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe57c:	f001 f8dc 	bl	23ff738 <_ZnwjRKSt9nothrow_t>
 23fe580:	4605      	mov	r5, r0
 23fe582:	b130      	cbz	r0, 23fe592 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fe584:	ab01      	add	r3, sp, #4
 23fe586:	4632      	mov	r2, r6
 23fe588:	4621      	mov	r1, r4
 23fe58a:	f7ff ffbf 	bl	23fe50c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe58e:	4b13      	ldr	r3, [pc, #76]	; (23fe5dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fe590:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe592:	a801      	add	r0, sp, #4
 23fe594:	f7fe f8a2 	bl	23fc6dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fe598:	462c      	mov	r4, r5
}
 23fe59a:	4620      	mov	r0, r4
 23fe59c:	b005      	add	sp, #20
 23fe59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fe5a0:	4638      	mov	r0, r7
 23fe5a2:	490f      	ldr	r1, [pc, #60]	; (23fe5e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fe5a4:	f7fd ff20 	bl	23fc3e8 <strcmp>
 23fe5a8:	b990      	cbnz	r0, 23fe5d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fe5aa:	2c00      	cmp	r4, #0
 23fe5ac:	d0f5      	beq.n	23fe59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fe5ae:	4629      	mov	r1, r5
 23fe5b0:	a801      	add	r0, sp, #4
 23fe5b2:	f7ff fca0 	bl	23fdef6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fe5b6:	2024      	movs	r0, #36	; 0x24
 23fe5b8:	4907      	ldr	r1, [pc, #28]	; (23fe5d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fe5ba:	f001 f8bd 	bl	23ff738 <_ZnwjRKSt9nothrow_t>
 23fe5be:	4605      	mov	r5, r0
 23fe5c0:	2800      	cmp	r0, #0
 23fe5c2:	d0e6      	beq.n	23fe592 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fe5c4:	4632      	mov	r2, r6
 23fe5c6:	4621      	mov	r1, r4
 23fe5c8:	ab01      	add	r3, sp, #4
 23fe5ca:	f7ff ff9f 	bl	23fe50c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fe5ce:	e7e0      	b.n	23fe592 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fe5d0:	2400      	movs	r4, #0
 23fe5d2:	e7e2      	b.n	23fe59a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fe5d4:	023ffc14 	.word	0x023ffc14
 23fe5d8:	023ffe39 	.word	0x023ffe39
 23fe5dc:	023ffc98 	.word	0x023ffc98
 23fe5e0:	023ffc18 	.word	0x023ffc18

023fe5e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fe5e4:	4b01      	ldr	r3, [pc, #4]	; (23fe5ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fe5e6:	4a02      	ldr	r2, [pc, #8]	; (23fe5f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fe5e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fe5ea:	4770      	bx	lr
 23fe5ec:	1007ae74 	.word	0x1007ae74
 23fe5f0:	023ffc29 	.word	0x023ffc29

023fe5f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fe5f8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fe5fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe5fe:	4604      	mov	r4, r0
 23fe600:	460e      	mov	r6, r1
 23fe602:	4617      	mov	r7, r2
 23fe604:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fe606:	f000 fb5d 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fe60a:	4581      	cmp	r9, r0
 23fe60c:	d04d      	beq.n	23fe6aa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fe60e:	792b      	ldrb	r3, [r5, #4]
 23fe610:	0719      	lsls	r1, r3, #28
 23fe612:	d504      	bpl.n	23fe61e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fe614:	4620      	mov	r0, r4
 23fe616:	696a      	ldr	r2, [r5, #20]
 23fe618:	4954      	ldr	r1, [pc, #336]	; (23fe76c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fe61a:	f7ff fad0 	bl	23fdbbe <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fe61e:	f1b8 0f00 	cmp.w	r8, #0
 23fe622:	d00d      	beq.n	23fe640 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fe624:	215b      	movs	r1, #91	; 0x5b
 23fe626:	4620      	mov	r0, r4
 23fe628:	f7ff fa58 	bl	23fdadc <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fe62c:	4641      	mov	r1, r8
 23fe62e:	4620      	mov	r0, r4
 23fe630:	f7ff fa45 	bl	23fdabe <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fe634:	6823      	ldr	r3, [r4, #0]
 23fe636:	2202      	movs	r2, #2
 23fe638:	4620      	mov	r0, r4
 23fe63a:	68db      	ldr	r3, [r3, #12]
 23fe63c:	494c      	ldr	r1, [pc, #304]	; (23fe770 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fe63e:	4798      	blx	r3
    if (attr.has_file) {
 23fe640:	792b      	ldrb	r3, [r5, #4]
 23fe642:	07da      	lsls	r2, r3, #31
 23fe644:	d524      	bpl.n	23fe690 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fe646:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fe64a:	212f      	movs	r1, #47	; 0x2f
 23fe64c:	4640      	mov	r0, r8
 23fe64e:	f001 f91a 	bl	23ff886 <strrchr>
    if (s1) {
 23fe652:	b108      	cbz	r0, 23fe658 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fe654:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fe658:	4641      	mov	r1, r8
 23fe65a:	4620      	mov	r0, r4
 23fe65c:	f7ff fa2f 	bl	23fdabe <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fe660:	792b      	ldrb	r3, [r5, #4]
 23fe662:	079b      	lsls	r3, r3, #30
 23fe664:	d508      	bpl.n	23fe678 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fe666:	213a      	movs	r1, #58	; 0x3a
 23fe668:	4620      	mov	r0, r4
 23fe66a:	f7ff fa37 	bl	23fdadc <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fe66e:	4620      	mov	r0, r4
 23fe670:	68ea      	ldr	r2, [r5, #12]
 23fe672:	4940      	ldr	r1, [pc, #256]	; (23fe774 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fe674:	f7ff faa3 	bl	23fdbbe <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fe678:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fe67a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fe67c:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fe680:	4620      	mov	r0, r4
            write(", ", 2);
 23fe682:	f04f 0202 	mov.w	r2, #2
 23fe686:	68db      	ldr	r3, [r3, #12]
 23fe688:	bf14      	ite	ne
 23fe68a:	493b      	ldrne	r1, [pc, #236]	; (23fe778 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fe68c:	493b      	ldreq	r1, [pc, #236]	; (23fe77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe68e:	4798      	blx	r3
    if (attr.has_function) {
 23fe690:	792b      	ldrb	r3, [r5, #4]
 23fe692:	0758      	lsls	r0, r3, #29
 23fe694:	d51d      	bpl.n	23fe6d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe696:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe698:	460b      	mov	r3, r1
 23fe69a:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fe69c:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fe6a0:	b160      	cbz	r0, 23fe6bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fe6a2:	2820      	cmp	r0, #32
 23fe6a4:	d108      	bne.n	23fe6b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fe6a6:	4619      	mov	r1, r3
 23fe6a8:	e7f7      	b.n	23fe69a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fe6aa:	4835      	ldr	r0, [pc, #212]	; (23fe780 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fe6ac:	f000 fc5b 	bl	23fef66 <_ZN5spark12NetworkClass9listeningEv>
 23fe6b0:	2800      	cmp	r0, #0
 23fe6b2:	d0ac      	beq.n	23fe60e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fe6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fe6b8:	2828      	cmp	r0, #40	; 0x28
 23fe6ba:	d1ee      	bne.n	23fe69a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fe6bc:	6823      	ldr	r3, [r4, #0]
 23fe6be:	1a52      	subs	r2, r2, r1
 23fe6c0:	4620      	mov	r0, r4
 23fe6c2:	68db      	ldr	r3, [r3, #12]
 23fe6c4:	4798      	blx	r3
        write("(): ", 4);
 23fe6c6:	6823      	ldr	r3, [r4, #0]
 23fe6c8:	2204      	movs	r2, #4
 23fe6ca:	4620      	mov	r0, r4
 23fe6cc:	68db      	ldr	r3, [r3, #12]
 23fe6ce:	492d      	ldr	r1, [pc, #180]	; (23fe784 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fe6d0:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fe6d2:	2100      	movs	r1, #0
 23fe6d4:	4638      	mov	r0, r7
 23fe6d6:	f7fe fdb7 	bl	23fd248 <log_level_name>
 23fe6da:	4601      	mov	r1, r0
    write(s);
 23fe6dc:	4620      	mov	r0, r4
 23fe6de:	f7ff f9ee 	bl	23fdabe <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fe6e2:	6823      	ldr	r3, [r4, #0]
 23fe6e4:	2202      	movs	r2, #2
 23fe6e6:	4620      	mov	r0, r4
 23fe6e8:	68db      	ldr	r3, [r3, #12]
 23fe6ea:	4924      	ldr	r1, [pc, #144]	; (23fe77c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fe6ec:	4798      	blx	r3
    if (msg) {
 23fe6ee:	b11e      	cbz	r6, 23fe6f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fe6f0:	4631      	mov	r1, r6
 23fe6f2:	4620      	mov	r0, r4
 23fe6f4:	f7ff f9e3 	bl	23fdabe <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fe6f8:	792b      	ldrb	r3, [r5, #4]
 23fe6fa:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fe6fe:	d02c      	beq.n	23fe75a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fe700:	6823      	ldr	r3, [r4, #0]
 23fe702:	4921      	ldr	r1, [pc, #132]	; (23fe788 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fe704:	68db      	ldr	r3, [r3, #12]
 23fe706:	2202      	movs	r2, #2
 23fe708:	4620      	mov	r0, r4
 23fe70a:	4798      	blx	r3
        if (attr.has_code) {
 23fe70c:	792b      	ldrb	r3, [r5, #4]
 23fe70e:	06d9      	lsls	r1, r3, #27
 23fe710:	d50a      	bpl.n	23fe728 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fe712:	6823      	ldr	r3, [r4, #0]
 23fe714:	2207      	movs	r2, #7
 23fe716:	4620      	mov	r0, r4
 23fe718:	491c      	ldr	r1, [pc, #112]	; (23fe78c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fe71a:	68db      	ldr	r3, [r3, #12]
 23fe71c:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fe71e:	4620      	mov	r0, r4
 23fe720:	69aa      	ldr	r2, [r5, #24]
 23fe722:	491b      	ldr	r1, [pc, #108]	; (23fe790 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fe724:	f7ff fa4b 	bl	23fdbbe <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fe728:	792b      	ldrb	r3, [r5, #4]
 23fe72a:	069a      	lsls	r2, r3, #26
 23fe72c:	d511      	bpl.n	23fe752 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fe72e:	06db      	lsls	r3, r3, #27
 23fe730:	d505      	bpl.n	23fe73e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fe732:	6823      	ldr	r3, [r4, #0]
 23fe734:	2202      	movs	r2, #2
 23fe736:	4620      	mov	r0, r4
 23fe738:	68db      	ldr	r3, [r3, #12]
 23fe73a:	490f      	ldr	r1, [pc, #60]	; (23fe778 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fe73c:	4798      	blx	r3
            write("details = ", 10);
 23fe73e:	6823      	ldr	r3, [r4, #0]
 23fe740:	4620      	mov	r0, r4
 23fe742:	4914      	ldr	r1, [pc, #80]	; (23fe794 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fe744:	220a      	movs	r2, #10
 23fe746:	68db      	ldr	r3, [r3, #12]
 23fe748:	4798      	blx	r3
            write(attr.details);
 23fe74a:	4620      	mov	r0, r4
 23fe74c:	69e9      	ldr	r1, [r5, #28]
 23fe74e:	f7ff f9b6 	bl	23fdabe <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fe752:	215d      	movs	r1, #93	; 0x5d
 23fe754:	4620      	mov	r0, r4
 23fe756:	f7ff f9c1 	bl	23fdadc <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fe75a:	6823      	ldr	r3, [r4, #0]
 23fe75c:	4620      	mov	r0, r4
}
 23fe75e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fe762:	2202      	movs	r2, #2
 23fe764:	68db      	ldr	r3, [r3, #12]
 23fe766:	490c      	ldr	r1, [pc, #48]	; (23fe798 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fe768:	4718      	bx	r3
 23fe76a:	bf00      	nop
 23fe76c:	023ffc2d 	.word	0x023ffc2d
 23fe770:	023ffc34 	.word	0x023ffc34
 23fe774:	023ffc37 	.word	0x023ffc37
 23fe778:	023ffc3a 	.word	0x023ffc3a
 23fe77c:	023ffc3f 	.word	0x023ffc3f
 23fe780:	1007aef0 	.word	0x1007aef0
 23fe784:	023ffc3d 	.word	0x023ffc3d
 23fe788:	023ffc42 	.word	0x023ffc42
 23fe78c:	023ffc45 	.word	0x023ffc45
 23fe790:	023ffc4d 	.word	0x023ffc4d
 23fe794:	023ffc50 	.word	0x023ffc50
 23fe798:	023ffc5b 	.word	0x023ffc5b

023fe79c <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe7a0:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fe7a2:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fe7a4:	460d      	mov	r5, r1
 23fe7a6:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fe7a8:	f000 fa8c 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fe7ac:	4287      	cmp	r7, r0
 23fe7ae:	d007      	beq.n	23fe7c0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fe7b0:	6a20      	ldr	r0, [r4, #32]
 23fe7b2:	4632      	mov	r2, r6
 23fe7b4:	6803      	ldr	r3, [r0, #0]
 23fe7b6:	4629      	mov	r1, r5
}
 23fe7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fe7bc:	68db      	ldr	r3, [r3, #12]
 23fe7be:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fe7c0:	4803      	ldr	r0, [pc, #12]	; (23fe7d0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fe7c2:	f000 fbd0 	bl	23fef66 <_ZN5spark12NetworkClass9listeningEv>
 23fe7c6:	2800      	cmp	r0, #0
 23fe7c8:	d0f2      	beq.n	23fe7b0 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fe7ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fe7ce:	bf00      	nop
 23fe7d0:	1007aef0 	.word	0x1007aef0

023fe7d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fe7d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fe7d8:	b085      	sub	sp, #20
    return stream_;
 23fe7da:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fe7de:	4605      	mov	r5, r0
 23fe7e0:	460f      	mov	r7, r1
 23fe7e2:	4690      	mov	r8, r2
 23fe7e4:	461e      	mov	r6, r3
 23fe7e6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fe7e8:	f000 fa6c 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fe7ec:	4581      	cmp	r9, r0
 23fe7ee:	d105      	bne.n	23fe7fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fe7f0:	4849      	ldr	r0, [pc, #292]	; (23fe918 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fe7f2:	f000 fbb8 	bl	23fef66 <_ZN5spark12NetworkClass9listeningEv>
 23fe7f6:	2800      	cmp	r0, #0
 23fe7f8:	f040 808a 	bne.w	23fe910 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fe7fc:	f04f 0900 	mov.w	r9, #0
 23fe800:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23fe802:	4a46      	ldr	r2, [pc, #280]	; (23fe91c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fe804:	4668      	mov	r0, sp
 23fe806:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23fe80a:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23fe80c:	f88d 9004 	strb.w	r9, [sp, #4]
 23fe810:	f000 fd67 	bl	23ff2e2 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fe814:	4649      	mov	r1, r9
 23fe816:	4640      	mov	r0, r8
 23fe818:	f7fe fd16 	bl	23fd248 <log_level_name>
 23fe81c:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fe81e:	4940      	ldr	r1, [pc, #256]	; (23fe920 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fe820:	2201      	movs	r2, #1
 23fe822:	4668      	mov	r0, sp
 23fe824:	f000 fdec 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe828:	4641      	mov	r1, r8
 23fe82a:	f7ff f93a 	bl	23fdaa2 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fe82e:	b13f      	cbz	r7, 23fe840 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23fe830:	493c      	ldr	r1, [pc, #240]	; (23fe924 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fe832:	2201      	movs	r2, #1
 23fe834:	4668      	mov	r0, sp
 23fe836:	f000 fde3 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe83a:	4639      	mov	r1, r7
 23fe83c:	f7ff f931 	bl	23fdaa2 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fe840:	b13e      	cbz	r6, 23fe852 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23fe842:	4939      	ldr	r1, [pc, #228]	; (23fe928 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fe844:	2201      	movs	r2, #1
 23fe846:	4668      	mov	r0, sp
 23fe848:	f000 fdda 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe84c:	4631      	mov	r1, r6
 23fe84e:	f7ff f928 	bl	23fdaa2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fe852:	7923      	ldrb	r3, [r4, #4]
 23fe854:	07df      	lsls	r7, r3, #31
 23fe856:	d50e      	bpl.n	23fe876 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23fe858:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fe85a:	212f      	movs	r1, #47	; 0x2f
 23fe85c:	4630      	mov	r0, r6
 23fe85e:	f001 f812 	bl	23ff886 <strrchr>
    if (s1) {
 23fe862:	b100      	cbz	r0, 23fe866 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23fe864:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fe866:	4931      	ldr	r1, [pc, #196]	; (23fe92c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fe868:	2201      	movs	r2, #1
 23fe86a:	4668      	mov	r0, sp
 23fe86c:	f000 fdc8 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe870:	4631      	mov	r1, r6
 23fe872:	f7ff f916 	bl	23fdaa2 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fe876:	7923      	ldrb	r3, [r4, #4]
 23fe878:	079e      	lsls	r6, r3, #30
 23fe87a:	d507      	bpl.n	23fe88c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23fe87c:	492c      	ldr	r1, [pc, #176]	; (23fe930 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fe87e:	2202      	movs	r2, #2
 23fe880:	4668      	mov	r0, sp
 23fe882:	f000 fdbd 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe886:	68e1      	ldr	r1, [r4, #12]
 23fe888:	f000 fd38 	bl	23ff2fc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fe88c:	7923      	ldrb	r3, [r4, #4]
 23fe88e:	0758      	lsls	r0, r3, #29
 23fe890:	d514      	bpl.n	23fe8bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fe892:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fe894:	4633      	mov	r3, r6
 23fe896:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fe898:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fe89c:	b12a      	cbz	r2, 23fe8aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23fe89e:	2a20      	cmp	r2, #32
 23fe8a0:	d101      	bne.n	23fe8a6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23fe8a2:	461e      	mov	r6, r3
 23fe8a4:	e7f7      	b.n	23fe896 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23fe8a6:	2a28      	cmp	r2, #40	; 0x28
 23fe8a8:	d1f5      	bne.n	23fe896 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23fe8aa:	2202      	movs	r2, #2
 23fe8ac:	4921      	ldr	r1, [pc, #132]	; (23fe934 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fe8ae:	4668      	mov	r0, sp
 23fe8b0:	f000 fda6 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe8b4:	4631      	mov	r1, r6
 23fe8b6:	1bba      	subs	r2, r7, r6
 23fe8b8:	f000 fdb2 	bl	23ff420 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fe8bc:	7923      	ldrb	r3, [r4, #4]
 23fe8be:	0719      	lsls	r1, r3, #28
 23fe8c0:	d507      	bpl.n	23fe8d2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23fe8c2:	491d      	ldr	r1, [pc, #116]	; (23fe938 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fe8c4:	2201      	movs	r2, #1
 23fe8c6:	4668      	mov	r0, sp
 23fe8c8:	f000 fd9a 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe8cc:	6961      	ldr	r1, [r4, #20]
 23fe8ce:	f000 fd27 	bl	23ff320 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fe8d2:	7923      	ldrb	r3, [r4, #4]
 23fe8d4:	06da      	lsls	r2, r3, #27
 23fe8d6:	d507      	bpl.n	23fe8e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fe8d8:	4918      	ldr	r1, [pc, #96]	; (23fe93c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fe8da:	2204      	movs	r2, #4
 23fe8dc:	4668      	mov	r0, sp
 23fe8de:	f000 fd8f 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe8e2:	69a1      	ldr	r1, [r4, #24]
 23fe8e4:	f000 fd0a 	bl	23ff2fc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fe8e8:	7923      	ldrb	r3, [r4, #4]
 23fe8ea:	069b      	lsls	r3, r3, #26
 23fe8ec:	d507      	bpl.n	23fe8fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fe8ee:	4914      	ldr	r1, [pc, #80]	; (23fe940 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fe8f0:	2206      	movs	r2, #6
 23fe8f2:	4668      	mov	r0, sp
 23fe8f4:	f000 fd84 	bl	23ff400 <_ZN5spark10JSONWriter4nameEPKcj>
 23fe8f8:	69e1      	ldr	r1, [r4, #28]
 23fe8fa:	f7ff f8d2 	bl	23fdaa2 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fe8fe:	4668      	mov	r0, sp
 23fe900:	f000 fcd9 	bl	23ff2b6 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fe904:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fe906:	2202      	movs	r2, #2
 23fe908:	6803      	ldr	r3, [r0, #0]
 23fe90a:	490e      	ldr	r1, [pc, #56]	; (23fe944 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fe90c:	68db      	ldr	r3, [r3, #12]
 23fe90e:	4798      	blx	r3
}
 23fe910:	b005      	add	sp, #20
 23fe912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fe916:	bf00      	nop
 23fe918:	1007aef0 	.word	0x1007aef0
 23fe91c:	023ffbf0 	.word	0x023ffbf0
 23fe920:	023ffc0a 	.word	0x023ffc0a
 23fe924:	023ffc5e 	.word	0x023ffc5e
 23fe928:	023ffecc 	.word	0x023ffecc
 23fe92c:	023ffc60 	.word	0x023ffc60
 23fe930:	023ffc62 	.word	0x023ffc62
 23fe934:	023ffc65 	.word	0x023ffc65
 23fe938:	023ffc68 	.word	0x023ffc68
 23fe93c:	023ffc6a 	.word	0x023ffc6a
 23fe940:	023ffc6f 	.word	0x023ffc6f
 23fe944:	023ffc5b 	.word	0x023ffc5b

023fe948 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe948:	4b02      	ldr	r3, [pc, #8]	; (23fe954 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe94a:	681a      	ldr	r2, [r3, #0]
 23fe94c:	4b02      	ldr	r3, [pc, #8]	; (23fe958 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe94e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe950:	4770      	bx	lr
 23fe952:	bf00      	nop
 23fe954:	1007ad84 	.word	0x1007ad84
 23fe958:	1007aea0 	.word	0x1007aea0

023fe95c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fe95c:	2100      	movs	r1, #0
 23fe95e:	f7fe bc9d 	b.w	23fd29c <system_delay_ms>
	...

023fe964 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fe964:	2200      	movs	r2, #0
 23fe966:	4b01      	ldr	r3, [pc, #4]	; (23fe96c <_GLOBAL__sub_I_RGB+0x8>)
 23fe968:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe96a:	4770      	bx	lr
 23fe96c:	1007aea4 	.word	0x1007aea4

023fe970 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fe970:	4b01      	ldr	r3, [pc, #4]	; (23fe978 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fe972:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fe974:	4770      	bx	lr
 23fe976:	bf00      	nop
 23fe978:	1007ad88 	.word	0x1007ad88

023fe97c <serialEventRun>:
{
 23fe97c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fe97e:	4b0f      	ldr	r3, [pc, #60]	; (23fe9bc <serialEventRun+0x40>)
 23fe980:	b143      	cbz	r3, 23fe994 <serialEventRun+0x18>
 23fe982:	f000 f99f 	bl	23fecc4 <_Z16_fetch_usbserialv>
 23fe986:	6803      	ldr	r3, [r0, #0]
 23fe988:	691b      	ldr	r3, [r3, #16]
 23fe98a:	4798      	blx	r3
 23fe98c:	2800      	cmp	r0, #0
 23fe98e:	dd01      	ble.n	23fe994 <serialEventRun+0x18>
        serialEvent();
 23fe990:	e000      	b.n	23fe994 <serialEventRun+0x18>
 23fe992:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fe994:	4b0a      	ldr	r3, [pc, #40]	; (23fe9c0 <serialEventRun+0x44>)
 23fe996:	b143      	cbz	r3, 23fe9aa <serialEventRun+0x2e>
 23fe998:	f000 fdfe 	bl	23ff598 <_Z22__fetch_global_Serial1v>
 23fe99c:	6803      	ldr	r3, [r0, #0]
 23fe99e:	691b      	ldr	r3, [r3, #16]
 23fe9a0:	4798      	blx	r3
 23fe9a2:	2800      	cmp	r0, #0
 23fe9a4:	dd01      	ble.n	23fe9aa <serialEventRun+0x2e>
        serialEvent1();
 23fe9a6:	e000      	b.n	23fe9aa <serialEventRun+0x2e>
 23fe9a8:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fe9aa:	4b06      	ldr	r3, [pc, #24]	; (23fe9c4 <serialEventRun+0x48>)
 23fe9ac:	b10b      	cbz	r3, 23fe9b2 <serialEventRun+0x36>
 23fe9ae:	f000 fe39 	bl	23ff624 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fe9b2:	4b05      	ldr	r3, [pc, #20]	; (23fe9c8 <serialEventRun+0x4c>)
 23fe9b4:	b10b      	cbz	r3, 23fe9ba <serialEventRun+0x3e>
 23fe9b6:	f000 fe6b 	bl	23ff690 <_Z15serialEventRun3v>
}
 23fe9ba:	bd08      	pop	{r3, pc}
	...

023fe9cc <_post_loop>:
{
 23fe9cc:	b508      	push	{r3, lr}
	serialEventRun();
 23fe9ce:	f7ff ffd5 	bl	23fe97c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fe9d2:	f7fe f9ed 	bl	23fcdb0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fe9d6:	4b01      	ldr	r3, [pc, #4]	; (23fe9dc <_post_loop+0x10>)
 23fe9d8:	6018      	str	r0, [r3, #0]
}
 23fe9da:	bd08      	pop	{r3, pc}
 23fe9dc:	1007af4c 	.word	0x1007af4c

023fe9e0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe9e0:	4805      	ldr	r0, [pc, #20]	; (23fe9f8 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fe9e2:	4a06      	ldr	r2, [pc, #24]	; (23fe9fc <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fe9e4:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fe9e6:	1a12      	subs	r2, r2, r0
 23fe9e8:	4905      	ldr	r1, [pc, #20]	; (23fea00 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fe9ea:	f000 febb 	bl	23ff764 <memcpy>
    __backup_sram_signature = signature;
 23fe9ee:	4b05      	ldr	r3, [pc, #20]	; (23fea04 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fe9f0:	4a05      	ldr	r2, [pc, #20]	; (23fea08 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fe9f2:	601a      	str	r2, [r3, #0]
}
 23fe9f4:	bd08      	pop	{r3, pc}
 23fe9f6:	bf00      	nop
 23fe9f8:	1007b400 	.word	0x1007b400
 23fe9fc:	1007b404 	.word	0x1007b404
 23fea00:	085ffd40 	.word	0x085ffd40
 23fea04:	1007b400 	.word	0x1007b400
 23fea08:	9a271c1e 	.word	0x9a271c1e

023fea0c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fea0c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fea0e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fea10:	461a      	mov	r2, r3
 23fea12:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fea16:	9300      	str	r3, [sp, #0]
 23fea18:	f7fe fc6a 	bl	23fd2f0 <system_ctrl_set_result>
}
 23fea1c:	b003      	add	sp, #12
 23fea1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fea24 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fea24:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fea26:	8843      	ldrh	r3, [r0, #2]
 23fea28:	2b0a      	cmp	r3, #10
 23fea2a:	d008      	beq.n	23fea3e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fea2c:	2b50      	cmp	r3, #80	; 0x50
 23fea2e:	d10b      	bne.n	23fea48 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fea30:	4b09      	ldr	r3, [pc, #36]	; (23fea58 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fea32:	681b      	ldr	r3, [r3, #0]
 23fea34:	b14b      	cbz	r3, 23fea4a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fea36:	b003      	add	sp, #12
 23fea38:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fea3c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fea3e:	f7ff ffe5 	bl	23fea0c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fea42:	b003      	add	sp, #12
 23fea44:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fea48:	2300      	movs	r3, #0
 23fea4a:	461a      	mov	r2, r3
 23fea4c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fea50:	9300      	str	r3, [sp, #0]
 23fea52:	f7fe fc4d 	bl	23fd2f0 <system_ctrl_set_result>
}
 23fea56:	e7f4      	b.n	23fea42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fea58:	1007aeb8 	.word	0x1007aeb8

023fea5c <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fea5c:	2100      	movs	r1, #0
{
 23fea5e:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fea60:	4811      	ldr	r0, [pc, #68]	; (23feaa8 <module_user_init_hook+0x4c>)
 23fea62:	f7fe fd87 	bl	23fd574 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fea66:	4b11      	ldr	r3, [pc, #68]	; (23feaac <module_user_init_hook+0x50>)
 23fea68:	681a      	ldr	r2, [r3, #0]
 23fea6a:	4b11      	ldr	r3, [pc, #68]	; (23feab0 <module_user_init_hook+0x54>)
 23fea6c:	429a      	cmp	r2, r3
 23fea6e:	bf0c      	ite	eq
 23fea70:	2201      	moveq	r2, #1
 23fea72:	2200      	movne	r2, #0
 23fea74:	4b0f      	ldr	r3, [pc, #60]	; (23feab4 <module_user_init_hook+0x58>)
 23fea76:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fea78:	d001      	beq.n	23fea7e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fea7a:	f7ff ffb1 	bl	23fe9e0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fea7e:	f7fe f96d 	bl	23fcd5c <HAL_RNG_GetRandomNumber>
 23fea82:	4604      	mov	r4, r0
    srand(seed);
 23fea84:	f000 fe9e 	bl	23ff7c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fea88:	4b0b      	ldr	r3, [pc, #44]	; (23feab8 <module_user_init_hook+0x5c>)
 23fea8a:	b113      	cbz	r3, 23fea92 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fea8c:	4620      	mov	r0, r4
 23fea8e:	e000      	b.n	23fea92 <module_user_init_hook+0x36>
 23fea90:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fea92:	2100      	movs	r1, #0
 23fea94:	4808      	ldr	r0, [pc, #32]	; (23feab8 <module_user_init_hook+0x5c>)
 23fea96:	f7fe fd0b 	bl	23fd4b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fea9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fea9e:	2100      	movs	r1, #0
 23feaa0:	4806      	ldr	r0, [pc, #24]	; (23feabc <module_user_init_hook+0x60>)
 23feaa2:	f7fe bc17 	b.w	23fd2d4 <system_ctrl_set_app_request_handler>
 23feaa6:	bf00      	nop
 23feaa8:	023fe971 	.word	0x023fe971
 23feaac:	1007b400 	.word	0x1007b400
 23feab0:	9a271c1e 	.word	0x9a271c1e
 23feab4:	1007aeb4 	.word	0x1007aeb4
 23feab8:	00000000 	.word	0x00000000
 23feabc:	023fea25 	.word	0x023fea25

023feac0 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession, options->reconnect_immediately);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 23feac0:	b510      	push	{r4, lr}
 23feac2:	b088      	sub	sp, #32
 23feac4:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 23feac6:	4668      	mov	r0, sp
 23feac8:	f7fe fe8f 	bl	23fd7ea <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 23feacc:	4669      	mov	r1, sp
 23feace:	a804      	add	r0, sp, #16
 23fead0:	f7fe fed7 	bl	23fd882 <_ZN6StringC1ERKS_>
 23fead4:	a804      	add	r0, sp, #16
 23fead6:	47a0      	blx	r4
 23fead8:	4604      	mov	r4, r0
 23feada:	a804      	add	r0, sp, #16
 23feadc:	f7fe fe3a 	bl	23fd754 <_ZN6StringD1Ev>
    String p(param);
 23feae0:	4668      	mov	r0, sp
 23feae2:	f7fe fe37 	bl	23fd754 <_ZN6StringD1Ev>
}
 23feae6:	4620      	mov	r0, r4
 23feae8:	b008      	add	sp, #32
 23feaea:	bd10      	pop	{r4, pc}

023feaec <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 23feaec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 23feaee:	2300      	movs	r3, #0
         size = sizeof(*this);
 23feaf0:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 23feaf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 23feaf6:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 23feaf8:	4669      	mov	r1, sp
 23feafa:	461a      	mov	r2, r3
 23feafc:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 23feafe:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 23feb02:	f8ad 4000 	strh.w	r4, [sp]
 23feb06:	f7fe fcc5 	bl	23fd494 <spark_function>
}
 23feb0a:	b004      	add	sp, #16
 23feb0c:	bd10      	pop	{r4, pc}

023feb0e <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23feb0e:	4770      	bx	lr

023feb10 <_ZN9IPAddressD0Ev>:
 23feb10:	b510      	push	{r4, lr}
 23feb12:	4604      	mov	r4, r0
 23feb14:	2118      	movs	r1, #24
 23feb16:	f7fd fc9a 	bl	23fc44e <_ZdlPvj>
 23feb1a:	4620      	mov	r0, r4
 23feb1c:	bd10      	pop	{r4, pc}

023feb1e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23feb1e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23feb20:	7d03      	ldrb	r3, [r0, #20]
{
 23feb22:	460e      	mov	r6, r1
	if (address.v==6) {
 23feb24:	2b06      	cmp	r3, #6
 23feb26:	f04f 0400 	mov.w	r4, #0
{
 23feb2a:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23feb2c:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23feb30:	d012      	beq.n	23feb58 <_ZNK9IPAddress7printToER5Print+0x3a>
 23feb32:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23feb36:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23feb3a:	220a      	movs	r2, #10
 23feb3c:	4630      	mov	r0, r6
 23feb3e:	f7fe ff16 	bl	23fd96e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23feb42:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23feb44:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23feb46:	d019      	beq.n	23feb7c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23feb48:	2c00      	cmp	r4, #0
 23feb4a:	d0f4      	beq.n	23feb36 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23feb4c:	212e      	movs	r1, #46	; 0x2e
 23feb4e:	4630      	mov	r0, r6
 23feb50:	f7fe ff0a 	bl	23fd968 <_ZN5Print5printEc>
 23feb54:	4404      	add	r4, r0
 23feb56:	e7ee      	b.n	23feb36 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23feb58:	232f      	movs	r3, #47	; 0x2f
 23feb5a:	466a      	mov	r2, sp
 23feb5c:	4639      	mov	r1, r7
 23feb5e:	200a      	movs	r0, #10
		buf[0] = 0;
 23feb60:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23feb64:	f7fe f96a 	bl	23fce3c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23feb68:	4668      	mov	r0, sp
 23feb6a:	f7fd fc47 	bl	23fc3fc <strlen>
 23feb6e:	6833      	ldr	r3, [r6, #0]
 23feb70:	4602      	mov	r2, r0
 23feb72:	4669      	mov	r1, sp
 23feb74:	4630      	mov	r0, r6
 23feb76:	68db      	ldr	r3, [r3, #12]
 23feb78:	4798      	blx	r3
 23feb7a:	4604      	mov	r4, r0
    }
    return n;
}
 23feb7c:	4620      	mov	r0, r4
 23feb7e:	b00d      	add	sp, #52	; 0x34
 23feb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023feb84 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23feb84:	b510      	push	{r4, lr}
 23feb86:	4604      	mov	r4, r0
 23feb88:	4b04      	ldr	r3, [pc, #16]	; (23feb9c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23feb8a:	2211      	movs	r2, #17
 23feb8c:	2100      	movs	r1, #0
 23feb8e:	f840 3b04 	str.w	r3, [r0], #4
 23feb92:	f000 fe0e 	bl	23ff7b2 <memset>
}
 23feb96:	4620      	mov	r0, r4
 23feb98:	bd10      	pop	{r4, pc}
 23feb9a:	bf00      	nop
 23feb9c:	023ffcfc 	.word	0x023ffcfc

023feba0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23feba0:	4603      	mov	r3, r0
 23feba2:	4a07      	ldr	r2, [pc, #28]	; (23febc0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23feba4:	b510      	push	{r4, lr}
 23feba6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23febaa:	f101 0210 	add.w	r2, r1, #16
 23febae:	f851 4b04 	ldr.w	r4, [r1], #4
 23febb2:	4291      	cmp	r1, r2
 23febb4:	f843 4b04 	str.w	r4, [r3], #4
 23febb8:	d1f9      	bne.n	23febae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23febba:	780a      	ldrb	r2, [r1, #0]
 23febbc:	701a      	strb	r2, [r3, #0]
}
 23febbe:	bd10      	pop	{r4, pc}
 23febc0:	023ffcfc 	.word	0x023ffcfc

023febc4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23febc4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23febc6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23febca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23febce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23febd2:	2304      	movs	r3, #4
 23febd4:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23febd8:	6041      	str	r1, [r0, #4]
 23febda:	7503      	strb	r3, [r0, #20]
}
 23febdc:	bd10      	pop	{r4, pc}
	...

023febe0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23febe0:	b507      	push	{r0, r1, r2, lr}
 23febe2:	4b06      	ldr	r3, [pc, #24]	; (23febfc <_ZN9IPAddressC1EPKh+0x1c>)
 23febe4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23febe6:	78cb      	ldrb	r3, [r1, #3]
 23febe8:	9300      	str	r3, [sp, #0]
 23febea:	788b      	ldrb	r3, [r1, #2]
 23febec:	784a      	ldrb	r2, [r1, #1]
 23febee:	7809      	ldrb	r1, [r1, #0]
 23febf0:	f7ff ffe8 	bl	23febc4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23febf4:	b003      	add	sp, #12
 23febf6:	f85d fb04 	ldr.w	pc, [sp], #4
 23febfa:	bf00      	nop
 23febfc:	023ffcfc 	.word	0x023ffcfc

023fec00 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fec00:	7441      	strb	r1, [r0, #17]
}
 23fec02:	4770      	bx	lr

023fec04 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fec04:	4770      	bx	lr

023fec06 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fec06:	4770      	bx	lr

023fec08 <_ZN9USBSerial4readEv>:
{
 23fec08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fec0a:	2100      	movs	r1, #0
 23fec0c:	7c00      	ldrb	r0, [r0, #16]
 23fec0e:	f7fe fad5 	bl	23fd1bc <HAL_USB_USART_Receive_Data>
}
 23fec12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fec16:	bd08      	pop	{r3, pc}

023fec18 <_ZN9USBSerial4peekEv>:
{
 23fec18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fec1a:	2101      	movs	r1, #1
 23fec1c:	7c00      	ldrb	r0, [r0, #16]
 23fec1e:	f7fe facd 	bl	23fd1bc <HAL_USB_USART_Receive_Data>
}
 23fec22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fec26:	bd08      	pop	{r3, pc}

023fec28 <_ZN9USBSerial17availableForWriteEv>:
{
 23fec28:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fec2a:	7c00      	ldrb	r0, [r0, #16]
 23fec2c:	f7fe fab8 	bl	23fd1a0 <HAL_USB_USART_Available_Data_For_Write>
}
 23fec30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fec34:	bd08      	pop	{r3, pc}

023fec36 <_ZN9USBSerial9availableEv>:
{
 23fec36:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fec38:	7c00      	ldrb	r0, [r0, #16]
 23fec3a:	f7fe faa3 	bl	23fd184 <HAL_USB_USART_Available_Data>
}
 23fec3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fec42:	bd08      	pop	{r3, pc}

023fec44 <_ZN9USBSerial5writeEh>:
{
 23fec44:	b513      	push	{r0, r1, r4, lr}
 23fec46:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fec48:	7c00      	ldrb	r0, [r0, #16]
{
 23fec4a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fec4c:	f7fe faa8 	bl	23fd1a0 <HAL_USB_USART_Available_Data_For_Write>
 23fec50:	2800      	cmp	r0, #0
 23fec52:	9901      	ldr	r1, [sp, #4]
 23fec54:	dc01      	bgt.n	23fec5a <_ZN9USBSerial5writeEh+0x16>
 23fec56:	7c60      	ldrb	r0, [r4, #17]
 23fec58:	b120      	cbz	r0, 23fec64 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fec5a:	7c20      	ldrb	r0, [r4, #16]
 23fec5c:	f7fe fabc 	bl	23fd1d8 <HAL_USB_USART_Send_Data>
 23fec60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fec64:	b002      	add	sp, #8
 23fec66:	bd10      	pop	{r4, pc}

023fec68 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fec68:	7c00      	ldrb	r0, [r0, #16]
 23fec6a:	f7fe bac3 	b.w	23fd1f4 <HAL_USB_USART_Flush_Data>

023fec6e <_ZN9USBSerialD0Ev>:
 23fec6e:	b510      	push	{r4, lr}
 23fec70:	4604      	mov	r4, r0
 23fec72:	2114      	movs	r1, #20
 23fec74:	f7fd fbeb 	bl	23fc44e <_ZdlPvj>
 23fec78:	4620      	mov	r0, r4
 23fec7a:	bd10      	pop	{r4, pc}

023fec7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fec7c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fec7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fec82:	4604      	mov	r4, r0
 23fec84:	4608      	mov	r0, r1
 23fec86:	2100      	movs	r1, #0
 23fec88:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fec8c:	4b04      	ldr	r3, [pc, #16]	; (23feca0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fec8e:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fec90:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fec92:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fec94:	4611      	mov	r1, r2
  _blocking = true;
 23fec96:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fec98:	f7fe fa4a 	bl	23fd130 <HAL_USB_USART_Init>
}
 23fec9c:	4620      	mov	r0, r4
 23fec9e:	bd10      	pop	{r4, pc}
 23feca0:	023ffd10 	.word	0x023ffd10

023feca4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23feca4:	2200      	movs	r2, #0
 23feca6:	7c00      	ldrb	r0, [r0, #16]
 23feca8:	f7fe ba50 	b.w	23fd14c <HAL_USB_USART_Begin>

023fecac <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fecac:	7c00      	ldrb	r0, [r0, #16]
 23fecae:	f7fe ba5b 	b.w	23fd168 <HAL_USB_USART_End>

023fecb2 <_Z19acquireSerialBufferv>:
{
 23fecb2:	b510      	push	{r4, lr}
 23fecb4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fecb6:	2214      	movs	r2, #20
 23fecb8:	2100      	movs	r1, #0
 23fecba:	f000 fd7a 	bl	23ff7b2 <memset>
}
 23fecbe:	4620      	mov	r0, r4
 23fecc0:	bd10      	pop	{r4, pc}
	...

023fecc4 <_Z16_fetch_usbserialv>:
{
 23fecc4:	b510      	push	{r4, lr}
 23fecc6:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fecc8:	a803      	add	r0, sp, #12
 23fecca:	f7ff fff2 	bl	23fecb2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fecce:	4c0c      	ldr	r4, [pc, #48]	; (23fed00 <_Z16_fetch_usbserialv+0x3c>)
 23fecd0:	e8d4 1f8f 	ldab	r1, [r4]
 23fecd4:	f011 0101 	ands.w	r1, r1, #1
 23fecd8:	d10f      	bne.n	23fecfa <_Z16_fetch_usbserialv+0x36>
 23fecda:	4620      	mov	r0, r4
 23fecdc:	9101      	str	r1, [sp, #4]
 23fecde:	f7fd fbc5 	bl	23fc46c <__cxa_guard_acquire>
 23fece2:	9901      	ldr	r1, [sp, #4]
 23fece4:	b148      	cbz	r0, 23fecfa <_Z16_fetch_usbserialv+0x36>
 23fece6:	aa03      	add	r2, sp, #12
 23fece8:	4806      	ldr	r0, [pc, #24]	; (23fed04 <_Z16_fetch_usbserialv+0x40>)
 23fecea:	f7ff ffc7 	bl	23fec7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fecee:	4620      	mov	r0, r4
 23fecf0:	f7fd fbc1 	bl	23fc476 <__cxa_guard_release>
 23fecf4:	4804      	ldr	r0, [pc, #16]	; (23fed08 <_Z16_fetch_usbserialv+0x44>)
 23fecf6:	f000 fd23 	bl	23ff740 <atexit>
	return _usbserial;
}
 23fecfa:	4802      	ldr	r0, [pc, #8]	; (23fed04 <_Z16_fetch_usbserialv+0x40>)
 23fecfc:	b008      	add	sp, #32
 23fecfe:	bd10      	pop	{r4, pc}
 23fed00:	1007aebc 	.word	0x1007aebc
 23fed04:	1007aec0 	.word	0x1007aec0
 23fed08:	023fec05 	.word	0x023fec05

023fed0c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fed0c:	4770      	bx	lr

023fed0e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fed0e:	7441      	strb	r1, [r0, #17]
}
 23fed10:	4770      	bx	lr

023fed12 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fed12:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fed14:	7c00      	ldrb	r0, [r0, #16]
 23fed16:	f7fe f901 	bl	23fcf1c <hal_usart_available_data_for_write>
}
 23fed1a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed1e:	bd08      	pop	{r3, pc}

023fed20 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fed20:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fed22:	7c00      	ldrb	r0, [r0, #16]
 23fed24:	f7fe f8b4 	bl	23fce90 <hal_usart_available>
}
 23fed28:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fed2c:	bd08      	pop	{r3, pc}

023fed2e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fed2e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fed30:	7c00      	ldrb	r0, [r0, #16]
 23fed32:	f7fe f8c9 	bl	23fcec8 <hal_usart_peek>
}
 23fed36:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed3a:	bd08      	pop	{r3, pc}

023fed3c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fed3c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fed3e:	7c00      	ldrb	r0, [r0, #16]
 23fed40:	f7fe f8b4 	bl	23fceac <hal_usart_read>
}
 23fed44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fed48:	bd08      	pop	{r3, pc}

023fed4a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fed4a:	7c00      	ldrb	r0, [r0, #16]
 23fed4c:	f7fe b8ca 	b.w	23fcee4 <hal_usart_flush>

023fed50 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fed50:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fed52:	7c45      	ldrb	r5, [r0, #17]
{
 23fed54:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fed56:	b12d      	cbz	r5, 23fed64 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fed58:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fed5a:	b003      	add	sp, #12
 23fed5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fed60:	f7fe b888 	b.w	23fce74 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fed64:	7c00      	ldrb	r0, [r0, #16]
 23fed66:	9101      	str	r1, [sp, #4]
 23fed68:	f7fe f8d8 	bl	23fcf1c <hal_usart_available_data_for_write>
 23fed6c:	2800      	cmp	r0, #0
 23fed6e:	9901      	ldr	r1, [sp, #4]
 23fed70:	dcf2      	bgt.n	23fed58 <_ZN11USARTSerial5writeEh+0x8>
}
 23fed72:	4628      	mov	r0, r5
 23fed74:	b003      	add	sp, #12
 23fed76:	bd30      	pop	{r4, r5, pc}

023fed78 <_ZN11USARTSerialD0Ev>:
 23fed78:	b510      	push	{r4, lr}
 23fed7a:	4604      	mov	r4, r0
 23fed7c:	2114      	movs	r1, #20
 23fed7e:	f7fd fb66 	bl	23fc44e <_ZdlPvj>
 23fed82:	4620      	mov	r0, r4
 23fed84:	bd10      	pop	{r4, pc}
	...

023fed88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fed88:	b510      	push	{r4, lr}
 23fed8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fed8e:	4604      	mov	r4, r0
 23fed90:	4608      	mov	r0, r1
 23fed92:	4611      	mov	r1, r2
 23fed94:	2200      	movs	r2, #0
 23fed96:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fed9a:	4b04      	ldr	r3, [pc, #16]	; (23fedac <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fed9c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fed9e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23feda0:	2301      	movs	r3, #1
 23feda2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23feda4:	f7fe f8d6 	bl	23fcf54 <hal_usart_init_ex>
}
 23feda8:	4620      	mov	r0, r4
 23fedaa:	bd10      	pop	{r4, pc}
 23fedac:	023ffd44 	.word	0x023ffd44

023fedb0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fedb0:	2300      	movs	r3, #0
 23fedb2:	7c00      	ldrb	r0, [r0, #16]
 23fedb4:	f7fe b8c0 	b.w	23fcf38 <hal_usart_begin_config>

023fedb8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fedb8:	2200      	movs	r2, #0
 23fedba:	f7ff bff9 	b.w	23fedb0 <_ZN11USARTSerial5beginEmm>

023fedbe <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fedbe:	7c00      	ldrb	r0, [r0, #16]
 23fedc0:	f7fe b84a 	b.w	23fce58 <hal_usart_end>

023fedc4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fedc4:	7c00      	ldrb	r0, [r0, #16]
 23fedc6:	f7fe b89b 	b.w	23fcf00 <hal_usart_is_enabled>

023fedca <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fedca:	4770      	bx	lr

023fedcc <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fedcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fedce:	4606      	mov	r6, r0
 23fedd0:	4615      	mov	r5, r2
 23fedd2:	460c      	mov	r4, r1
 23fedd4:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fedd6:	42bc      	cmp	r4, r7
 23fedd8:	d006      	beq.n	23fede8 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fedda:	6833      	ldr	r3, [r6, #0]
 23feddc:	4630      	mov	r0, r6
 23fedde:	689b      	ldr	r3, [r3, #8]
 23fede0:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fede4:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fede6:	e7f6      	b.n	23fedd6 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fede8:	4628      	mov	r0, r5
 23fedea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fedec <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fedec:	2200      	movs	r2, #0
 23fedee:	7c00      	ldrb	r0, [r0, #16]
 23fedf0:	f7fe b8be 	b.w	23fcf70 <hal_i2c_write>

023fedf4 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fedf4:	2100      	movs	r1, #0
 23fedf6:	7c00      	ldrb	r0, [r0, #16]
 23fedf8:	f7fe b8c8 	b.w	23fcf8c <hal_i2c_available>

023fedfc <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fedfc:	2100      	movs	r1, #0
 23fedfe:	7c00      	ldrb	r0, [r0, #16]
 23fee00:	f7fe b8d2 	b.w	23fcfa8 <hal_i2c_read>

023fee04 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fee04:	2100      	movs	r1, #0
 23fee06:	7c00      	ldrb	r0, [r0, #16]
 23fee08:	f7fe b8dc 	b.w	23fcfc4 <hal_i2c_peek>

023fee0c <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fee0c:	2100      	movs	r1, #0
 23fee0e:	7c00      	ldrb	r0, [r0, #16]
 23fee10:	f7fe b8e6 	b.w	23fcfe0 <hal_i2c_flush>

023fee14 <_ZN7TwoWireD0Ev>:
 23fee14:	b510      	push	{r4, lr}
 23fee16:	4604      	mov	r4, r0
 23fee18:	2114      	movs	r1, #20
 23fee1a:	f7fd fb18 	bl	23fc44e <_ZdlPvj>
 23fee1e:	4620      	mov	r0, r4
 23fee20:	bd10      	pop	{r4, pc}
	...

023fee24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fee24:	b538      	push	{r3, r4, r5, lr}
 23fee26:	4604      	mov	r4, r0
 23fee28:	4615      	mov	r5, r2
 23fee2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fee2e:	2200      	movs	r2, #0
 23fee30:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fee34:	4b09      	ldr	r3, [pc, #36]	; (23fee5c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fee36:	4608      	mov	r0, r1
  _i2c = i2c;
 23fee38:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fee3a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fee3c:	4629      	mov	r1, r5
 23fee3e:	f7fe f8eb 	bl	23fd018 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fee42:	30bf      	adds	r0, #191	; 0xbf
 23fee44:	d108      	bne.n	23fee58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fee46:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fee48:	07db      	lsls	r3, r3, #31
 23fee4a:	d505      	bpl.n	23fee58 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fee4c:	6868      	ldr	r0, [r5, #4]
 23fee4e:	f7fe fb4b 	bl	23fd4e8 <free>
    free(conf.tx_buffer);
 23fee52:	68e8      	ldr	r0, [r5, #12]
 23fee54:	f7fe fb48 	bl	23fd4e8 <free>
}
 23fee58:	4620      	mov	r0, r4
 23fee5a:	bd38      	pop	{r3, r4, r5, pc}
 23fee5c:	023ffd78 	.word	0x023ffd78

023fee60 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
        buffer_(nullptr) {
 23fee60:	21ff      	movs	r1, #255	; 0xff
 23fee62:	2200      	movs	r2, #0
      : address_{address},
 23fee64:	4b04      	ldr	r3, [pc, #16]	; (23fee78 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fee66:	2001      	movs	r0, #1
 23fee68:	e9c3 1200 	strd	r1, r2, [r3]
 23fee6c:	2164      	movs	r1, #100	; 0x64
 23fee6e:	611a      	str	r2, [r3, #16]
 23fee70:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fee74:	4770      	bx	lr
 23fee76:	bf00      	nop
 23fee78:	1007aed4 	.word	0x1007aed4

023fee7c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fee7c:	2200      	movs	r2, #0
 23fee7e:	6840      	ldr	r0, [r0, #4]
 23fee80:	4611      	mov	r1, r2
 23fee82:	f7fe ba6d 	b.w	23fd360 <network_ready>

023fee86 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fee86:	2200      	movs	r2, #0
 23fee88:	6840      	ldr	r0, [r0, #4]
 23fee8a:	4611      	mov	r1, r2
 23fee8c:	f7fe baa0 	b.w	23fd3d0 <network_listening>

023fee90 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fee90:	2200      	movs	r2, #0
 23fee92:	6840      	ldr	r0, [r0, #4]
 23fee94:	4611      	mov	r1, r2
 23fee96:	f7fe bab7 	b.w	23fd408 <network_get_listen_timeout>

023fee9a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fee9a:	2200      	movs	r2, #0
 23fee9c:	6840      	ldr	r0, [r0, #4]
 23fee9e:	f7fe baa5 	b.w	23fd3ec <network_set_listen_timeout>

023feea2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23feea2:	2200      	movs	r2, #0
 23feea4:	6840      	ldr	r0, [r0, #4]
 23feea6:	f081 0101 	eor.w	r1, r1, #1
 23feeaa:	f7fe ba83 	b.w	23fd3b4 <network_listen>

023feeae <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23feeae:	2300      	movs	r3, #0
 23feeb0:	6840      	ldr	r0, [r0, #4]
 23feeb2:	461a      	mov	r2, r3
 23feeb4:	4619      	mov	r1, r3
 23feeb6:	f7fe ba6f 	b.w	23fd398 <network_off>

023feeba <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23feeba:	2300      	movs	r3, #0
 23feebc:	6840      	ldr	r0, [r0, #4]
 23feebe:	461a      	mov	r2, r3
 23feec0:	4619      	mov	r1, r3
 23feec2:	f7fe ba5b 	b.w	23fd37c <network_on>

023feec6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23feec6:	2200      	movs	r2, #0
 23feec8:	6840      	ldr	r0, [r0, #4]
 23feeca:	4611      	mov	r1, r2
 23feecc:	f7fe ba2c 	b.w	23fd328 <network_connecting>

023feed0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23feed0:	2200      	movs	r2, #0
 23feed2:	2102      	movs	r1, #2
 23feed4:	6840      	ldr	r0, [r0, #4]
 23feed6:	f7fe ba35 	b.w	23fd344 <network_disconnect>

023feeda <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23feeda:	2300      	movs	r3, #0
 23feedc:	6840      	ldr	r0, [r0, #4]
 23feede:	461a      	mov	r2, r3
 23feee0:	f7fe ba14 	b.w	23fd30c <network_connect>

023feee4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23feee4:	2204      	movs	r2, #4
 23feee6:	4b02      	ldr	r3, [pc, #8]	; (23feef0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23feee8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23feeea:	4a02      	ldr	r2, [pc, #8]	; (23feef4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23feeec:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23feeee:	4770      	bx	lr
 23feef0:	1007aee8 	.word	0x1007aee8
 23feef4:	023ffda4 	.word	0x023ffda4

023feef8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23feef8:	2300      	movs	r3, #0
 23feefa:	6840      	ldr	r0, [r0, #4]
 23feefc:	461a      	mov	r2, r3
 23feefe:	f7fe ba05 	b.w	23fd30c <network_connect>

023fef02 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fef02:	2200      	movs	r2, #0
 23fef04:	2102      	movs	r1, #2
 23fef06:	6840      	ldr	r0, [r0, #4]
 23fef08:	f7fe ba1c 	b.w	23fd344 <network_disconnect>

023fef0c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fef0c:	2200      	movs	r2, #0
 23fef0e:	6840      	ldr	r0, [r0, #4]
 23fef10:	4611      	mov	r1, r2
 23fef12:	f7fe ba09 	b.w	23fd328 <network_connecting>

023fef16 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fef16:	2200      	movs	r2, #0
 23fef18:	6840      	ldr	r0, [r0, #4]
 23fef1a:	4611      	mov	r1, r2
 23fef1c:	f7fe ba20 	b.w	23fd360 <network_ready>

023fef20 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fef20:	2300      	movs	r3, #0
 23fef22:	6840      	ldr	r0, [r0, #4]
 23fef24:	461a      	mov	r2, r3
 23fef26:	4619      	mov	r1, r3
 23fef28:	f7fe ba28 	b.w	23fd37c <network_on>

023fef2c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fef2c:	2300      	movs	r3, #0
 23fef2e:	6840      	ldr	r0, [r0, #4]
 23fef30:	461a      	mov	r2, r3
 23fef32:	4619      	mov	r1, r3
 23fef34:	f7fe ba30 	b.w	23fd398 <network_off>

023fef38 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fef38:	2100      	movs	r1, #0
 23fef3a:	6840      	ldr	r0, [r0, #4]
 23fef3c:	f7fe ba72 	b.w	23fd424 <network_is_on>

023fef40 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fef40:	2100      	movs	r1, #0
 23fef42:	6840      	ldr	r0, [r0, #4]
 23fef44:	f7fe ba7c 	b.w	23fd440 <network_is_off>

023fef48 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fef48:	2200      	movs	r2, #0
 23fef4a:	6840      	ldr	r0, [r0, #4]
 23fef4c:	f081 0101 	eor.w	r1, r1, #1
 23fef50:	f7fe ba30 	b.w	23fd3b4 <network_listen>

023fef54 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fef54:	2200      	movs	r2, #0
 23fef56:	6840      	ldr	r0, [r0, #4]
 23fef58:	f7fe ba48 	b.w	23fd3ec <network_set_listen_timeout>

023fef5c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fef5c:	2200      	movs	r2, #0
 23fef5e:	6840      	ldr	r0, [r0, #4]
 23fef60:	4611      	mov	r1, r2
 23fef62:	f7fe ba51 	b.w	23fd408 <network_get_listen_timeout>

023fef66 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fef66:	2200      	movs	r2, #0
 23fef68:	6840      	ldr	r0, [r0, #4]
 23fef6a:	4611      	mov	r1, r2
 23fef6c:	f7fe ba30 	b.w	23fd3d0 <network_listening>

023fef70 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fef70:	2100      	movs	r1, #0
 23fef72:	6840      	ldr	r0, [r0, #4]
 23fef74:	f7fe ba80 	b.w	23fd478 <network_is_preferred>

023fef78 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fef78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fef7c:	b095      	sub	sp, #84	; 0x54
 23fef7e:	4614      	mov	r4, r2
 23fef80:	460d      	mov	r5, r1
 23fef82:	4607      	mov	r7, r0
    IPAddress addr;
 23fef84:	f7ff fdfe 	bl	23feb84 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fef88:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fef8a:	221c      	movs	r2, #28
 23fef8c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fef8e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fef90:	f000 fc0f 	bl	23ff7b2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fef94:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fef96:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fef98:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fef9a:	2100      	movs	r1, #0
 23fef9c:	466b      	mov	r3, sp
 23fef9e:	aa0c      	add	r2, sp, #48	; 0x30
 23fefa0:	f7fd fe96 	bl	23fccd0 <netdb_getaddrinfo>
    if (!r) {
 23fefa4:	4604      	mov	r4, r0
 23fefa6:	2800      	cmp	r0, #0
 23fefa8:	d14b      	bne.n	23ff042 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fefaa:	4602      	mov	r2, r0
 23fefac:	2101      	movs	r1, #1
 23fefae:	6868      	ldr	r0, [r5, #4]
 23fefb0:	f7fe f9d6 	bl	23fd360 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fefb4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fefb6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fefb8:	4622      	mov	r2, r4
 23fefba:	6868      	ldr	r0, [r5, #4]
 23fefbc:	f7fe f9d0 	bl	23fd360 <network_ready>
        bool ok = false;
 23fefc0:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fefc2:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fefc4:	9e00      	ldr	r6, [sp, #0]
 23fefc6:	2e00      	cmp	r6, #0
 23fefc8:	d03b      	beq.n	23ff042 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fefca:	2900      	cmp	r1, #0
 23fefcc:	d139      	bne.n	23ff042 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fefce:	6873      	ldr	r3, [r6, #4]
 23fefd0:	2b02      	cmp	r3, #2
 23fefd2:	d003      	beq.n	23fefdc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fefd4:	2b0a      	cmp	r3, #10
 23fefd6:	d011      	beq.n	23feffc <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fefd8:	69f6      	ldr	r6, [r6, #28]
 23fefda:	e7f4      	b.n	23fefc6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fefdc:	f1b8 0f00 	cmp.w	r8, #0
 23fefe0:	d0fa      	beq.n	23fefd8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fefe2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fefe4:	a806      	add	r0, sp, #24
 23fefe6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fefe8:	1d3c      	adds	r4, r7, #4
 23fefea:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fefec:	f7ff fdf8 	bl	23febe0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23feff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23feff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23feff4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23feff6:	4641      	mov	r1, r8
 23feff8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23feffa:	e7ed      	b.n	23fefd8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23feffc:	f1b9 0f00 	cmp.w	r9, #0
 23ff000:	d0ea      	beq.n	23fefd8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23ff002:	2210      	movs	r2, #16
 23ff004:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23ff006:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23ff008:	f000 fbd3 	bl	23ff7b2 <memset>
                    a.v = 6;
 23ff00c:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff00e:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff010:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff014:	f104 0308 	add.w	r3, r4, #8
 23ff018:	3418      	adds	r4, #24
 23ff01a:	462a      	mov	r2, r5
 23ff01c:	6818      	ldr	r0, [r3, #0]
 23ff01e:	6859      	ldr	r1, [r3, #4]
 23ff020:	3308      	adds	r3, #8
 23ff022:	c203      	stmia	r2!, {r0, r1}
 23ff024:	42a3      	cmp	r3, r4
 23ff026:	4615      	mov	r5, r2
 23ff028:	d1f7      	bne.n	23ff01a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff02a:	a901      	add	r1, sp, #4
 23ff02c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff02e:	1d3c      	adds	r4, r7, #4
 23ff030:	ad07      	add	r5, sp, #28
 23ff032:	f7ff fdb5 	bl	23feba0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff03a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff03c:	4649      	mov	r1, r9
 23ff03e:	7023      	strb	r3, [r4, #0]
                    break;
 23ff040:	e7ca      	b.n	23fefd8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff042:	9800      	ldr	r0, [sp, #0]
 23ff044:	f7fd fe36 	bl	23fccb4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff048:	4638      	mov	r0, r7
 23ff04a:	b015      	add	sp, #84	; 0x54
 23ff04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff050 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23ff050:	3803      	subs	r0, #3
 23ff052:	2802      	cmp	r0, #2
 23ff054:	bf9a      	itte	ls
 23ff056:	4b02      	ldrls	r3, [pc, #8]	; (23ff060 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23ff058:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23ff05c:	4801      	ldrhi	r0, [pc, #4]	; (23ff064 <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23ff05e:	4770      	bx	lr
 23ff060:	023ffde0 	.word	0x023ffde0
 23ff064:	1007aef0 	.word	0x1007aef0

023ff068 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23ff068:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23ff06a:	2200      	movs	r2, #0
 23ff06c:	6840      	ldr	r0, [r0, #4]
 23ff06e:	f7fe f9f5 	bl	23fd45c <network_prefer>
}
 23ff072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23ff076:	f7ff bfeb 	b.w	23ff050 <_ZN5spark12NetworkClass4fromEm>
	...

023ff07c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff07c:	4b02      	ldr	r3, [pc, #8]	; (23ff088 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff07e:	4a03      	ldr	r2, [pc, #12]	; (23ff08c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff080:	601a      	str	r2, [r3, #0]
 23ff082:	2200      	movs	r2, #0
 23ff084:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff086:	4770      	bx	lr
 23ff088:	1007aef0 	.word	0x1007aef0
 23ff08c:	023ffdf4 	.word	0x023ffdf4

023ff090 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23ff090:	2201      	movs	r2, #1
 23ff092:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23ff096:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23ff09a:	4618      	mov	r0, r3
 23ff09c:	2901      	cmp	r1, #1
 23ff09e:	d108      	bne.n	23ff0b2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23ff0a0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23ff0a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23ff0a8:	3a01      	subs	r2, #1
 23ff0aa:	f103 0310 	add.w	r3, r3, #16
 23ff0ae:	d1f2      	bne.n	23ff096 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23ff0b0:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23ff0b2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23ff0b4:	bf04      	itt	eq
 23ff0b6:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23ff0ba:	1852      	addeq	r2, r2, r1
 23ff0bc:	e7f4      	b.n	23ff0a8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023ff0be <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23ff0be:	b40e      	push	{r1, r2, r3}
 23ff0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ff0c2:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff0c4:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23ff0c6:	af00      	add	r7, sp, #0
 23ff0c8:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23ff0cc:	f855 2b04 	ldr.w	r2, [r5], #4
 23ff0d0:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff0d2:	462b      	mov	r3, r5
 23ff0d4:	1878      	adds	r0, r7, r1
 23ff0d6:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23ff0d8:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff0da:	f7fe fa21 	bl	23fd520 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23ff0de:	280f      	cmp	r0, #15
 23ff0e0:	687a      	ldr	r2, [r7, #4]
 23ff0e2:	d91a      	bls.n	23ff11a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23ff0e4:	f100 0308 	add.w	r3, r0, #8
 23ff0e8:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23ff0ec:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23ff0ee:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff0f2:	1c41      	adds	r1, r0, #1
 23ff0f4:	462b      	mov	r3, r5
 23ff0f6:	4668      	mov	r0, sp
        va_start(args, fmt);
 23ff0f8:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23ff0fa:	f7fe fa11 	bl	23fd520 <vsnprintf>
        if (n > 0) {
 23ff0fe:	1e02      	subs	r2, r0, #0
 23ff100:	dd04      	ble.n	23ff10c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23ff102:	6823      	ldr	r3, [r4, #0]
 23ff104:	4669      	mov	r1, sp
 23ff106:	4620      	mov	r0, r4
 23ff108:	689b      	ldr	r3, [r3, #8]
 23ff10a:	4798      	blx	r3
 23ff10c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23ff10e:	3720      	adds	r7, #32
 23ff110:	46bd      	mov	sp, r7
 23ff112:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23ff116:	b003      	add	sp, #12
 23ff118:	4770      	bx	lr
    } else if (n > 0) {
 23ff11a:	2800      	cmp	r0, #0
 23ff11c:	d0f7      	beq.n	23ff10e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23ff11e:	6823      	ldr	r3, [r4, #0]
 23ff120:	4602      	mov	r2, r0
 23ff122:	689b      	ldr	r3, [r3, #8]
 23ff124:	4620      	mov	r0, r4
 23ff126:	f107 0110 	add.w	r1, r7, #16
 23ff12a:	4798      	blx	r3
}
 23ff12c:	e7ef      	b.n	23ff10e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023ff12e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23ff12e:	b538      	push	{r3, r4, r5, lr}
 23ff130:	680b      	ldr	r3, [r1, #0]
 23ff132:	4604      	mov	r4, r0
 23ff134:	6003      	str	r3, [r0, #0]
 23ff136:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23ff138:	6843      	ldr	r3, [r0, #4]
 23ff13a:	429d      	cmp	r5, r3
 23ff13c:	d008      	beq.n	23ff150 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23ff13e:	b115      	cbz	r5, 23ff146 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23ff140:	686b      	ldr	r3, [r5, #4]
 23ff142:	3301      	adds	r3, #1
 23ff144:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23ff146:	6860      	ldr	r0, [r4, #4]
 23ff148:	b108      	cbz	r0, 23ff14e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23ff14a:	f7fe fba5 	bl	23fd898 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23ff14e:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23ff150:	bd38      	pop	{r3, r4, r5, pc}

023ff152 <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
 23ff152:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23ff154:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23ff156:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23ff15a:	2201      	movs	r2, #1
 23ff15c:	689b      	ldr	r3, [r3, #8]
 23ff15e:	f10d 0107 	add.w	r1, sp, #7
 23ff162:	4798      	blx	r3
}
 23ff164:	b003      	add	sp, #12
 23ff166:	f85d fb04 	ldr.w	pc, [sp], #4

023ff16a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff16a:	460b      	mov	r3, r1
 23ff16c:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23ff16e:	2200      	movs	r2, #0
 23ff170:	b510      	push	{r4, lr}
 23ff172:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff174:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23ff178:	6083      	str	r3, [r0, #8]
    if (t) {
 23ff17a:	b90b      	cbnz	r3, 23ff180 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23ff17c:	4620      	mov	r0, r4
 23ff17e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23ff180:	f7ff ffd5 	bl	23ff12e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23ff184:	e7fa      	b.n	23ff17c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023ff186 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23ff186:	6883      	ldr	r3, [r0, #8]
 23ff188:	b1eb      	cbz	r3, 23ff1c6 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23ff18a:	781a      	ldrb	r2, [r3, #0]
 23ff18c:	2a03      	cmp	r2, #3
 23ff18e:	d81a      	bhi.n	23ff1c6 <_ZNK5spark9JSONValue4typeEv+0x40>
 23ff190:	e8df f002 	tbb	[pc, r2]
 23ff194:	1b021704 	.word	0x1b021704
 23ff198:	2005      	movs	r0, #5
 23ff19a:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23ff19c:	6802      	ldr	r2, [r0, #0]
 23ff19e:	685b      	ldr	r3, [r3, #4]
 23ff1a0:	6852      	ldr	r2, [r2, #4]
 23ff1a2:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23ff1a4:	282d      	cmp	r0, #45	; 0x2d
 23ff1a6:	d012      	beq.n	23ff1ce <_ZNK5spark9JSONValue4typeEv+0x48>
 23ff1a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23ff1ac:	2b09      	cmp	r3, #9
 23ff1ae:	d90e      	bls.n	23ff1ce <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23ff1b0:	2874      	cmp	r0, #116	; 0x74
 23ff1b2:	d00e      	beq.n	23ff1d2 <_ZNK5spark9JSONValue4typeEv+0x4c>
 23ff1b4:	2866      	cmp	r0, #102	; 0x66
 23ff1b6:	d00c      	beq.n	23ff1d2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23ff1b8:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23ff1bc:	4258      	negs	r0, r3
 23ff1be:	4158      	adcs	r0, r3
 23ff1c0:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23ff1c2:	2006      	movs	r0, #6
 23ff1c4:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23ff1c6:	2000      	movs	r0, #0
 23ff1c8:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23ff1ca:	2004      	movs	r0, #4
 23ff1cc:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23ff1ce:	2003      	movs	r0, #3
 23ff1d0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23ff1d2:	2002      	movs	r0, #2
}
 23ff1d4:	4770      	bx	lr

023ff1d6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23ff1d6:	b510      	push	{r4, lr}
 23ff1d8:	4604      	mov	r4, r0
    switch (type()) {
 23ff1da:	f7ff ffd4 	bl	23ff186 <_ZNK5spark9JSONValue4typeEv>
 23ff1de:	2802      	cmp	r0, #2
 23ff1e0:	d00e      	beq.n	23ff200 <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23ff1e2:	1ec3      	subs	r3, r0, #3
 23ff1e4:	b2db      	uxtb	r3, r3
 23ff1e6:	2b01      	cmp	r3, #1
 23ff1e8:	d814      	bhi.n	23ff214 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23ff1ea:	6822      	ldr	r2, [r4, #0]
 23ff1ec:	68a3      	ldr	r3, [r4, #8]
 23ff1ee:	6850      	ldr	r0, [r2, #4]
 23ff1f0:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23ff1f2:	220a      	movs	r2, #10
}
 23ff1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23ff1f8:	2100      	movs	r1, #0
 23ff1fa:	4418      	add	r0, r3
 23ff1fc:	f000 bbda 	b.w	23ff9b4 <strtol>
        const char* const s = d_->json + t_->start;
 23ff200:	6822      	ldr	r2, [r4, #0]
 23ff202:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23ff204:	6852      	ldr	r2, [r2, #4]
 23ff206:	685b      	ldr	r3, [r3, #4]
 23ff208:	5cd0      	ldrb	r0, [r2, r3]
 23ff20a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23ff20e:	4258      	negs	r0, r3
 23ff210:	4158      	adcs	r0, r3
}
 23ff212:	bd10      	pop	{r4, pc}
    switch (type()) {
 23ff214:	2000      	movs	r0, #0
 23ff216:	e7fc      	b.n	23ff212 <_ZNK5spark9JSONValue5toIntEv+0x3c>

023ff218 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff218:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23ff21a:	2300      	movs	r3, #0
 23ff21c:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff21e:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23ff222:	480e      	ldr	r0, [pc, #56]	; (23ff25c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23ff224:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23ff228:	b1a9      	cbz	r1, 23ff256 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23ff22a:	780b      	ldrb	r3, [r1, #0]
 23ff22c:	2b03      	cmp	r3, #3
 23ff22e:	d006      	beq.n	23ff23e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23ff230:	b98b      	cbnz	r3, 23ff256 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23ff232:	6813      	ldr	r3, [r2, #0]
 23ff234:	6858      	ldr	r0, [r3, #4]
 23ff236:	684b      	ldr	r3, [r1, #4]
 23ff238:	5cc3      	ldrb	r3, [r0, r3]
 23ff23a:	2b6e      	cmp	r3, #110	; 0x6e
 23ff23c:	d007      	beq.n	23ff24e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23ff23e:	6813      	ldr	r3, [r2, #0]
 23ff240:	684d      	ldr	r5, [r1, #4]
 23ff242:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23ff244:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23ff246:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23ff248:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23ff24a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23ff24c:	60e3      	str	r3, [r4, #12]
 23ff24e:	4611      	mov	r1, r2
 23ff250:	4620      	mov	r0, r4
 23ff252:	f7ff ff6c 	bl	23ff12e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23ff256:	4620      	mov	r0, r4
 23ff258:	bd38      	pop	{r3, r4, r5, pc}
 23ff25a:	bf00      	nop
 23ff25c:	023ffc5d 	.word	0x023ffc5d

023ff260 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23ff260:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23ff262:	2500      	movs	r5, #0
 23ff264:	460b      	mov	r3, r1
 23ff266:	4604      	mov	r4, r0
 23ff268:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23ff26a:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23ff26e:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23ff272:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23ff276:	b14b      	cbz	r3, 23ff28c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23ff278:	781a      	ldrb	r2, [r3, #0]
 23ff27a:	2a01      	cmp	r2, #1
 23ff27c:	d106      	bne.n	23ff28c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23ff27e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23ff282:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23ff284:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23ff286:	6143      	str	r3, [r0, #20]
 23ff288:	f7ff ff51 	bl	23ff12e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23ff28c:	4620      	mov	r0, r4
 23ff28e:	bd38      	pop	{r3, r4, r5, pc}

023ff290 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23ff290:	b510      	push	{r4, lr}
    if (!n_) {
 23ff292:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23ff294:	4604      	mov	r4, r0
    if (!n_) {
 23ff296:	b163      	cbz	r3, 23ff2b2 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23ff298:	6880      	ldr	r0, [r0, #8]
    --n_;
 23ff29a:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23ff29c:	60e0      	str	r0, [r4, #12]
    ++t_;
 23ff29e:	3010      	adds	r0, #16
 23ff2a0:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23ff2a2:	6120      	str	r0, [r4, #16]
    --n_;
 23ff2a4:	6163      	str	r3, [r4, #20]
    if (n_) {
 23ff2a6:	b113      	cbz	r3, 23ff2ae <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23ff2a8:	f7ff fef2 	bl	23ff090 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23ff2ac:	60a0      	str	r0, [r4, #8]
    return true;
 23ff2ae:	2001      	movs	r0, #1
 23ff2b0:	e000      	b.n	23ff2b4 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23ff2b2:	4618      	mov	r0, r3
}
 23ff2b4:	bd10      	pop	{r4, pc}

023ff2b6 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23ff2b6:	b510      	push	{r4, lr}
    write('}');
 23ff2b8:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23ff2ba:	4604      	mov	r4, r0
    write('}');
 23ff2bc:	f7ff ff49 	bl	23ff152 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23ff2c0:	2301      	movs	r3, #1
}
 23ff2c2:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff2c4:	7123      	strb	r3, [r4, #4]
}
 23ff2c6:	bd10      	pop	{r4, pc}

023ff2c8 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23ff2c8:	b508      	push	{r3, lr}
    switch (state_) {
 23ff2ca:	7903      	ldrb	r3, [r0, #4]
 23ff2cc:	2b01      	cmp	r3, #1
 23ff2ce:	d002      	beq.n	23ff2d6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23ff2d0:	2b02      	cmp	r3, #2
 23ff2d2:	d004      	beq.n	23ff2de <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23ff2d4:	bd08      	pop	{r3, pc}
        write(',');
 23ff2d6:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23ff2d8:	f7ff ff3b 	bl	23ff152 <_ZN5spark10JSONWriter5writeEc>
}
 23ff2dc:	e7fa      	b.n	23ff2d4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23ff2de:	213a      	movs	r1, #58	; 0x3a
 23ff2e0:	e7fa      	b.n	23ff2d8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023ff2e2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23ff2e2:	b510      	push	{r4, lr}
 23ff2e4:	4604      	mov	r4, r0
    writeSeparator();
 23ff2e6:	f7ff ffef 	bl	23ff2c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23ff2ea:	4620      	mov	r0, r4
 23ff2ec:	217b      	movs	r1, #123	; 0x7b
 23ff2ee:	f7ff ff30 	bl	23ff152 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23ff2f2:	2300      	movs	r3, #0
}
 23ff2f4:	4620      	mov	r0, r4
    state_ = BEGIN;
 23ff2f6:	7123      	strb	r3, [r4, #4]
}
 23ff2f8:	bd10      	pop	{r4, pc}
	...

023ff2fc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23ff2fc:	b513      	push	{r0, r1, r4, lr}
 23ff2fe:	4604      	mov	r4, r0
 23ff300:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23ff302:	f7ff ffe1 	bl	23ff2c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23ff306:	6823      	ldr	r3, [r4, #0]
 23ff308:	4620      	mov	r0, r4
 23ff30a:	68db      	ldr	r3, [r3, #12]
 23ff30c:	9a01      	ldr	r2, [sp, #4]
 23ff30e:	4903      	ldr	r1, [pc, #12]	; (23ff31c <_ZN5spark10JSONWriter5valueEi+0x20>)
 23ff310:	4798      	blx	r3
    state_ = NEXT;
 23ff312:	2301      	movs	r3, #1
}
 23ff314:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff316:	7123      	strb	r3, [r4, #4]
}
 23ff318:	b002      	add	sp, #8
 23ff31a:	bd10      	pop	{r4, pc}
 23ff31c:	023ffc37 	.word	0x023ffc37

023ff320 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23ff320:	b513      	push	{r0, r1, r4, lr}
 23ff322:	4604      	mov	r4, r0
 23ff324:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23ff326:	f7ff ffcf 	bl	23ff2c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23ff32a:	6823      	ldr	r3, [r4, #0]
 23ff32c:	4620      	mov	r0, r4
 23ff32e:	68db      	ldr	r3, [r3, #12]
 23ff330:	9a01      	ldr	r2, [sp, #4]
 23ff332:	4903      	ldr	r1, [pc, #12]	; (23ff340 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23ff334:	4798      	blx	r3
    state_ = NEXT;
 23ff336:	2301      	movs	r3, #1
}
 23ff338:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff33a:	7123      	strb	r3, [r4, #4]
}
 23ff33c:	b002      	add	sp, #8
 23ff33e:	bd10      	pop	{r4, pc}
 23ff340:	023ffe30 	.word	0x023ffe30

023ff344 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23ff344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff348:	460d      	mov	r5, r1
 23ff34a:	4690      	mov	r8, r2
    write('"');
 23ff34c:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23ff34e:	4604      	mov	r4, r0
 23ff350:	462f      	mov	r7, r5
    write('"');
 23ff352:	f7ff fefe 	bl	23ff152 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23ff356:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23ff3fc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23ff35a:	44a8      	add	r8, r5
    while (s != end) {
 23ff35c:	4547      	cmp	r7, r8
 23ff35e:	46ba      	mov	sl, r7
 23ff360:	d03d      	beq.n	23ff3de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23ff362:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23ff366:	2e22      	cmp	r6, #34	; 0x22
 23ff368:	d006      	beq.n	23ff378 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23ff36a:	2e5c      	cmp	r6, #92	; 0x5c
 23ff36c:	d004      	beq.n	23ff378 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23ff36e:	4630      	mov	r0, r6
 23ff370:	f000 f9f0 	bl	23ff754 <isprint>
 23ff374:	2800      	cmp	r0, #0
 23ff376:	d1f1      	bne.n	23ff35c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23ff378:	6823      	ldr	r3, [r4, #0]
 23ff37a:	4629      	mov	r1, r5
 23ff37c:	4620      	mov	r0, r4
 23ff37e:	689b      	ldr	r3, [r3, #8]
 23ff380:	ebaa 0205 	sub.w	r2, sl, r5
 23ff384:	4798      	blx	r3
            write('\\');
 23ff386:	215c      	movs	r1, #92	; 0x5c
 23ff388:	4620      	mov	r0, r4
 23ff38a:	f7ff fee2 	bl	23ff152 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23ff38e:	2e0d      	cmp	r6, #13
 23ff390:	d80a      	bhi.n	23ff3a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23ff392:	2e07      	cmp	r6, #7
 23ff394:	d91c      	bls.n	23ff3d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23ff396:	f1a6 0308 	sub.w	r3, r6, #8
 23ff39a:	2b05      	cmp	r3, #5
 23ff39c:	d818      	bhi.n	23ff3d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23ff39e:	e8df f003 	tbb	[pc, r3]
 23ff3a2:	0f0d      	.short	0x0f0d
 23ff3a4:	15131711 	.word	0x15131711
 23ff3a8:	2e22      	cmp	r6, #34	; 0x22
 23ff3aa:	d001      	beq.n	23ff3b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23ff3ac:	2e5c      	cmp	r6, #92	; 0x5c
 23ff3ae:	d10f      	bne.n	23ff3d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23ff3b0:	4631      	mov	r1, r6
                write('b');
 23ff3b2:	4620      	mov	r0, r4
 23ff3b4:	f7ff fecd 	bl	23ff152 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23ff3b8:	463d      	mov	r5, r7
    while (s != end) {
 23ff3ba:	e7cf      	b.n	23ff35c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23ff3bc:	2162      	movs	r1, #98	; 0x62
 23ff3be:	e7f8      	b.n	23ff3b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23ff3c0:	2174      	movs	r1, #116	; 0x74
 23ff3c2:	e7f6      	b.n	23ff3b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23ff3c4:	216e      	movs	r1, #110	; 0x6e
 23ff3c6:	e7f4      	b.n	23ff3b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23ff3c8:	2166      	movs	r1, #102	; 0x66
 23ff3ca:	e7f2      	b.n	23ff3b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23ff3cc:	2172      	movs	r1, #114	; 0x72
 23ff3ce:	e7f0      	b.n	23ff3b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23ff3d0:	6823      	ldr	r3, [r4, #0]
 23ff3d2:	4632      	mov	r2, r6
 23ff3d4:	4649      	mov	r1, r9
 23ff3d6:	4620      	mov	r0, r4
 23ff3d8:	68db      	ldr	r3, [r3, #12]
 23ff3da:	4798      	blx	r3
                break;
 23ff3dc:	e7ec      	b.n	23ff3b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23ff3de:	42bd      	cmp	r5, r7
 23ff3e0:	d005      	beq.n	23ff3ee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23ff3e2:	6823      	ldr	r3, [r4, #0]
 23ff3e4:	4629      	mov	r1, r5
 23ff3e6:	4620      	mov	r0, r4
 23ff3e8:	689b      	ldr	r3, [r3, #8]
 23ff3ea:	1b7a      	subs	r2, r7, r5
 23ff3ec:	4798      	blx	r3
    }
    write('"');
 23ff3ee:	2122      	movs	r1, #34	; 0x22
 23ff3f0:	4620      	mov	r0, r4
 23ff3f2:	f7ff feae 	bl	23ff152 <_ZN5spark10JSONWriter5writeEc>
}
 23ff3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff3fa:	bf00      	nop
 23ff3fc:	023ffe33 	.word	0x023ffe33

023ff400 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23ff400:	b513      	push	{r0, r1, r4, lr}
 23ff402:	4604      	mov	r4, r0
 23ff404:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23ff408:	f7ff ff5e 	bl	23ff2c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23ff40c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff410:	4620      	mov	r0, r4
 23ff412:	f7ff ff97 	bl	23ff344 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23ff416:	2302      	movs	r3, #2
}
 23ff418:	4620      	mov	r0, r4
    state_ = VALUE;
 23ff41a:	7123      	strb	r3, [r4, #4]
}
 23ff41c:	b002      	add	sp, #8
 23ff41e:	bd10      	pop	{r4, pc}

023ff420 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23ff420:	b513      	push	{r0, r1, r4, lr}
 23ff422:	4604      	mov	r4, r0
 23ff424:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23ff428:	f7ff ff4e 	bl	23ff2c8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23ff42c:	e9dd 2100 	ldrd	r2, r1, [sp]
 23ff430:	4620      	mov	r0, r4
 23ff432:	f7ff ff87 	bl	23ff344 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23ff436:	2301      	movs	r3, #1
}
 23ff438:	4620      	mov	r0, r4
    state_ = NEXT;
 23ff43a:	7123      	strb	r3, [r4, #4]
}
 23ff43c:	b002      	add	sp, #8
 23ff43e:	bd10      	pop	{r4, pc}

023ff440 <getPinMode>:
 * AN_OUTPUT = 7
 * PIN_MODE_NONE = 255
 */
PinMode getPinMode(uint16_t pin)
{
  return hal_gpio_get_mode(pin);
 23ff440:	f7fd bc62 	b.w	23fcd08 <hal_gpio_get_mode>

023ff444 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff444:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff446:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff448:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff44a:	d902      	bls.n	23ff452 <pinAvailable+0xe>
    return false;
 23ff44c:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff44e:	b003      	add	sp, #12
 23ff450:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff452:	f1a0 030f 	sub.w	r3, r0, #15
 23ff456:	2b02      	cmp	r3, #2
 23ff458:	d90b      	bls.n	23ff472 <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff45a:	2801      	cmp	r0, #1
 23ff45c:	d821      	bhi.n	23ff4a2 <pinAvailable+0x5e>
 23ff45e:	f000 f947 	bl	23ff6f0 <_Z19__fetch_global_Wirev>
 23ff462:	2100      	movs	r1, #0
 23ff464:	7c00      	ldrb	r0, [r0, #16]
 23ff466:	f7fd fdc9 	bl	23fcffc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff46a:	f080 0001 	eor.w	r0, r0, #1
 23ff46e:	b2c0      	uxtb	r0, r0
 23ff470:	e7ed      	b.n	23ff44e <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff472:	4d11      	ldr	r5, [pc, #68]	; (23ff4b8 <pinAvailable+0x74>)
 23ff474:	e8d5 1f8f 	ldab	r1, [r5]
 23ff478:	f011 0101 	ands.w	r1, r1, #1
 23ff47c:	d10b      	bne.n	23ff496 <pinAvailable+0x52>
 23ff47e:	4628      	mov	r0, r5
 23ff480:	9101      	str	r1, [sp, #4]
 23ff482:	f7fc fff3 	bl	23fc46c <__cxa_guard_acquire>
 23ff486:	9901      	ldr	r1, [sp, #4]
 23ff488:	b128      	cbz	r0, 23ff496 <pinAvailable+0x52>
 23ff48a:	480c      	ldr	r0, [pc, #48]	; (23ff4bc <pinAvailable+0x78>)
 23ff48c:	f7fe f8e3 	bl	23fd656 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff490:	4628      	mov	r0, r5
 23ff492:	f7fc fff0 	bl	23fc476 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff496:	4b09      	ldr	r3, [pc, #36]	; (23ff4bc <pinAvailable+0x78>)
 23ff498:	7818      	ldrb	r0, [r3, #0]
 23ff49a:	f7fd fde7 	bl	23fd06c <hal_spi_is_enabled>
 23ff49e:	2800      	cmp	r0, #0
 23ff4a0:	d1d4      	bne.n	23ff44c <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff4a2:	3c08      	subs	r4, #8
 23ff4a4:	2c01      	cmp	r4, #1
 23ff4a6:	d805      	bhi.n	23ff4b4 <pinAvailable+0x70>
 23ff4a8:	f000 f876 	bl	23ff598 <_Z22__fetch_global_Serial1v>
 23ff4ac:	7c00      	ldrb	r0, [r0, #16]
 23ff4ae:	f7fd fd27 	bl	23fcf00 <hal_usart_is_enabled>
 23ff4b2:	e7da      	b.n	23ff46a <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff4b4:	2001      	movs	r0, #1
 23ff4b6:	e7ca      	b.n	23ff44e <pinAvailable+0xa>
 23ff4b8:	1007aef8 	.word	0x1007aef8
 23ff4bc:	1007aefc 	.word	0x1007aefc

023ff4c0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff4c0:	281b      	cmp	r0, #27
{
 23ff4c2:	b538      	push	{r3, r4, r5, lr}
 23ff4c4:	4604      	mov	r4, r0
 23ff4c6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff4c8:	d80a      	bhi.n	23ff4e0 <pinMode+0x20>
 23ff4ca:	29ff      	cmp	r1, #255	; 0xff
 23ff4cc:	d008      	beq.n	23ff4e0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff4ce:	f7ff ffb9 	bl	23ff444 <pinAvailable>
 23ff4d2:	b128      	cbz	r0, 23ff4e0 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff4d4:	4629      	mov	r1, r5
 23ff4d6:	4620      	mov	r0, r4
}
 23ff4d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff4dc:	f7fd bc06 	b.w	23fccec <hal_gpio_mode>
}
 23ff4e0:	bd38      	pop	{r3, r4, r5, pc}

023ff4e2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff4e2:	b538      	push	{r3, r4, r5, lr}
 23ff4e4:	4604      	mov	r4, r0
 23ff4e6:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff4e8:	f7fd fc0e 	bl	23fcd08 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff4ec:	28ff      	cmp	r0, #255	; 0xff
 23ff4ee:	d010      	beq.n	23ff512 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff4f0:	2806      	cmp	r0, #6
 23ff4f2:	d804      	bhi.n	23ff4fe <digitalWrite+0x1c>
 23ff4f4:	234d      	movs	r3, #77	; 0x4d
 23ff4f6:	fa23 f000 	lsr.w	r0, r3, r0
 23ff4fa:	07c3      	lsls	r3, r0, #31
 23ff4fc:	d409      	bmi.n	23ff512 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff4fe:	4620      	mov	r0, r4
 23ff500:	f7ff ffa0 	bl	23ff444 <pinAvailable>
 23ff504:	b128      	cbz	r0, 23ff512 <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff506:	4629      	mov	r1, r5
 23ff508:	4620      	mov	r0, r4
}
 23ff50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff50e:	f7fd bc09 	b.w	23fcd24 <hal_gpio_write>
}
 23ff512:	bd38      	pop	{r3, r4, r5, pc}

023ff514 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
 23ff514:	b510      	push	{r4, lr}
 23ff516:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
 23ff518:	f7fd fbf6 	bl	23fcd08 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 23ff51c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 23ff51e:	b2db      	uxtb	r3, r3
 23ff520:	2b01      	cmp	r3, #1
 23ff522:	d908      	bls.n	23ff536 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 23ff524:	4620      	mov	r0, r4
 23ff526:	f7ff ff8d 	bl	23ff444 <pinAvailable>
 23ff52a:	b120      	cbz	r0, 23ff536 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
 23ff52c:	4620      	mov	r0, r4
}
 23ff52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
 23ff532:	f7fd bc05 	b.w	23fcd40 <hal_gpio_read>
}
 23ff536:	2000      	movs	r0, #0
 23ff538:	bd10      	pop	{r4, pc}

023ff53a <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff53a:	4770      	bx	lr

023ff53c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff53c:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff53e:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ff540:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff542:	462a      	mov	r2, r5
 23ff544:	2100      	movs	r1, #0
 23ff546:	f000 f934 	bl	23ff7b2 <memset>
 23ff54a:	8025      	strh	r5, [r4, #0]
 23ff54c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff54e:	4907      	ldr	r1, [pc, #28]	; (23ff56c <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ff550:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff552:	8125      	strh	r5, [r4, #8]
 23ff554:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff556:	f000 f8f1 	bl	23ff73c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff55a:	4904      	ldr	r1, [pc, #16]	; (23ff56c <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ff55c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff55e:	4628      	mov	r0, r5
 23ff560:	f000 f8ec 	bl	23ff73c <_ZnajRKSt9nothrow_t>
    };
 23ff564:	60e0      	str	r0, [r4, #12]
}
 23ff566:	4620      	mov	r0, r4
 23ff568:	bd38      	pop	{r3, r4, r5, pc}
 23ff56a:	bf00      	nop
 23ff56c:	023ffe39 	.word	0x023ffe39

023ff570 <__tcf_2>:
 23ff570:	4770      	bx	lr

023ff572 <__tcf_1>:
 23ff572:	4770      	bx	lr

023ff574 <_Z20acquireSerial1Bufferv>:
{
 23ff574:	b510      	push	{r4, lr}
 23ff576:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ff578:	f7ff ffe0 	bl	23ff53c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ff57c:	4620      	mov	r0, r4
 23ff57e:	bd10      	pop	{r4, pc}

023ff580 <_Z20acquireSerial2Bufferv>:
 23ff580:	b510      	push	{r4, lr}
 23ff582:	4604      	mov	r4, r0
 23ff584:	f7ff ffda 	bl	23ff53c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff588:	4620      	mov	r0, r4
 23ff58a:	bd10      	pop	{r4, pc}

023ff58c <_Z20acquireSerial3Bufferv>:
 23ff58c:	b510      	push	{r4, lr}
 23ff58e:	4604      	mov	r4, r0
 23ff590:	f7ff ffd4 	bl	23ff53c <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ff594:	4620      	mov	r0, r4
 23ff596:	bd10      	pop	{r4, pc}

023ff598 <_Z22__fetch_global_Serial1v>:
{
 23ff598:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff59a:	4d0e      	ldr	r5, [pc, #56]	; (23ff5d4 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff59c:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff59e:	e8d5 1f8f 	ldab	r1, [r5]
 23ff5a2:	f011 0401 	ands.w	r4, r1, #1
 23ff5a6:	d111      	bne.n	23ff5cc <_Z22__fetch_global_Serial1v+0x34>
 23ff5a8:	4628      	mov	r0, r5
 23ff5aa:	f7fc ff5f 	bl	23fc46c <__cxa_guard_acquire>
 23ff5ae:	b168      	cbz	r0, 23ff5cc <_Z22__fetch_global_Serial1v+0x34>
 23ff5b0:	a801      	add	r0, sp, #4
 23ff5b2:	f7ff ffdf 	bl	23ff574 <_Z20acquireSerial1Bufferv>
 23ff5b6:	4621      	mov	r1, r4
 23ff5b8:	aa01      	add	r2, sp, #4
 23ff5ba:	4807      	ldr	r0, [pc, #28]	; (23ff5d8 <_Z22__fetch_global_Serial1v+0x40>)
 23ff5bc:	f7ff fbe4 	bl	23fed88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff5c0:	4628      	mov	r0, r5
 23ff5c2:	f7fc ff58 	bl	23fc476 <__cxa_guard_release>
 23ff5c6:	4805      	ldr	r0, [pc, #20]	; (23ff5dc <_Z22__fetch_global_Serial1v+0x44>)
 23ff5c8:	f000 f8ba 	bl	23ff740 <atexit>
    return serial1;
}
 23ff5cc:	4802      	ldr	r0, [pc, #8]	; (23ff5d8 <_Z22__fetch_global_Serial1v+0x40>)
 23ff5ce:	b007      	add	sp, #28
 23ff5d0:	bd30      	pop	{r4, r5, pc}
 23ff5d2:	bf00      	nop
 23ff5d4:	1007af04 	.word	0x1007af04
 23ff5d8:	1007af10 	.word	0x1007af10
 23ff5dc:	023ff53b 	.word	0x023ff53b

023ff5e0 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff5e0:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff5e2:	4c0d      	ldr	r4, [pc, #52]	; (23ff618 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff5e4:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff5e6:	e8d4 3f8f 	ldab	r3, [r4]
 23ff5ea:	07db      	lsls	r3, r3, #31
 23ff5ec:	d411      	bmi.n	23ff612 <_Z22__fetch_global_Serial2v+0x32>
 23ff5ee:	4620      	mov	r0, r4
 23ff5f0:	f7fc ff3c 	bl	23fc46c <__cxa_guard_acquire>
 23ff5f4:	b168      	cbz	r0, 23ff612 <_Z22__fetch_global_Serial2v+0x32>
 23ff5f6:	a801      	add	r0, sp, #4
 23ff5f8:	f7ff ffc2 	bl	23ff580 <_Z20acquireSerial2Bufferv>
 23ff5fc:	2101      	movs	r1, #1
 23ff5fe:	aa01      	add	r2, sp, #4
 23ff600:	4806      	ldr	r0, [pc, #24]	; (23ff61c <_Z22__fetch_global_Serial2v+0x3c>)
 23ff602:	f7ff fbc1 	bl	23fed88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff606:	4620      	mov	r0, r4
 23ff608:	f7fc ff35 	bl	23fc476 <__cxa_guard_release>
 23ff60c:	4804      	ldr	r0, [pc, #16]	; (23ff620 <_Z22__fetch_global_Serial2v+0x40>)
 23ff60e:	f000 f897 	bl	23ff740 <atexit>
	return serial2;
}
 23ff612:	4802      	ldr	r0, [pc, #8]	; (23ff61c <_Z22__fetch_global_Serial2v+0x3c>)
 23ff614:	b006      	add	sp, #24
 23ff616:	bd10      	pop	{r4, pc}
 23ff618:	1007af08 	.word	0x1007af08
 23ff61c:	1007af24 	.word	0x1007af24
 23ff620:	023ff573 	.word	0x023ff573

023ff624 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff624:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff626:	f7ff ffdb 	bl	23ff5e0 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff62a:	4b07      	ldr	r3, [pc, #28]	; (23ff648 <_Z15serialEventRun2v+0x24>)
 23ff62c:	4604      	mov	r4, r0
 23ff62e:	b153      	cbz	r3, 23ff646 <_Z15serialEventRun2v+0x22>
 23ff630:	f7ff fbc8 	bl	23fedc4 <_ZN11USARTSerial9isEnabledEv>
 23ff634:	b138      	cbz	r0, 23ff646 <_Z15serialEventRun2v+0x22>
 23ff636:	6823      	ldr	r3, [r4, #0]
 23ff638:	4620      	mov	r0, r4
 23ff63a:	691b      	ldr	r3, [r3, #16]
 23ff63c:	4798      	blx	r3
 23ff63e:	2800      	cmp	r0, #0
 23ff640:	dd01      	ble.n	23ff646 <_Z15serialEventRun2v+0x22>
        handler();
 23ff642:	e000      	b.n	23ff646 <_Z15serialEventRun2v+0x22>
 23ff644:	bf00      	nop
}
 23ff646:	bd10      	pop	{r4, pc}
 23ff648:	00000000 	.word	0x00000000

023ff64c <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ff64c:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff64e:	4c0d      	ldr	r4, [pc, #52]	; (23ff684 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ff650:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ff652:	e8d4 3f8f 	ldab	r3, [r4]
 23ff656:	07db      	lsls	r3, r3, #31
 23ff658:	d411      	bmi.n	23ff67e <_Z22__fetch_global_Serial3v+0x32>
 23ff65a:	4620      	mov	r0, r4
 23ff65c:	f7fc ff06 	bl	23fc46c <__cxa_guard_acquire>
 23ff660:	b168      	cbz	r0, 23ff67e <_Z22__fetch_global_Serial3v+0x32>
 23ff662:	a801      	add	r0, sp, #4
 23ff664:	f7ff ff92 	bl	23ff58c <_Z20acquireSerial3Bufferv>
 23ff668:	2102      	movs	r1, #2
 23ff66a:	aa01      	add	r2, sp, #4
 23ff66c:	4806      	ldr	r0, [pc, #24]	; (23ff688 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff66e:	f7ff fb8b 	bl	23fed88 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff672:	4620      	mov	r0, r4
 23ff674:	f7fc feff 	bl	23fc476 <__cxa_guard_release>
 23ff678:	4804      	ldr	r0, [pc, #16]	; (23ff68c <_Z22__fetch_global_Serial3v+0x40>)
 23ff67a:	f000 f861 	bl	23ff740 <atexit>
	return serial3;
}
 23ff67e:	4802      	ldr	r0, [pc, #8]	; (23ff688 <_Z22__fetch_global_Serial3v+0x3c>)
 23ff680:	b006      	add	sp, #24
 23ff682:	bd10      	pop	{r4, pc}
 23ff684:	1007af0c 	.word	0x1007af0c
 23ff688:	1007af38 	.word	0x1007af38
 23ff68c:	023ff571 	.word	0x023ff571

023ff690 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ff690:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ff692:	f7ff ffdb 	bl	23ff64c <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff696:	4b07      	ldr	r3, [pc, #28]	; (23ff6b4 <_Z15serialEventRun3v+0x24>)
 23ff698:	4604      	mov	r4, r0
 23ff69a:	b153      	cbz	r3, 23ff6b2 <_Z15serialEventRun3v+0x22>
 23ff69c:	f7ff fb92 	bl	23fedc4 <_ZN11USARTSerial9isEnabledEv>
 23ff6a0:	b138      	cbz	r0, 23ff6b2 <_Z15serialEventRun3v+0x22>
 23ff6a2:	6823      	ldr	r3, [r4, #0]
 23ff6a4:	4620      	mov	r0, r4
 23ff6a6:	691b      	ldr	r3, [r3, #16]
 23ff6a8:	4798      	blx	r3
 23ff6aa:	2800      	cmp	r0, #0
 23ff6ac:	dd01      	ble.n	23ff6b2 <_Z15serialEventRun3v+0x22>
        handler();
 23ff6ae:	e000      	b.n	23ff6b2 <_Z15serialEventRun3v+0x22>
 23ff6b0:	bf00      	nop
}
 23ff6b2:	bd10      	pop	{r4, pc}
 23ff6b4:	00000000 	.word	0x00000000

023ff6b8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff6b8:	4770      	bx	lr
	...

023ff6bc <_Z17acquireWireBufferv>:
{
 23ff6bc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff6be:	4b0a      	ldr	r3, [pc, #40]	; (23ff6e8 <_Z17acquireWireBufferv+0x2c>)
{
 23ff6c0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff6c2:	6003      	str	r3, [r0, #0]
 23ff6c4:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff6c6:	4909      	ldr	r1, [pc, #36]	; (23ff6ec <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff6c8:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff6ca:	2020      	movs	r0, #32
 23ff6cc:	f000 f836 	bl	23ff73c <_ZnajRKSt9nothrow_t>
	};
 23ff6d0:	2520      	movs	r5, #32
 23ff6d2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff6d4:	4905      	ldr	r1, [pc, #20]	; (23ff6ec <_Z17acquireWireBufferv+0x30>)
 23ff6d6:	4628      	mov	r0, r5
	};
 23ff6d8:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff6da:	f000 f82f 	bl	23ff73c <_ZnajRKSt9nothrow_t>
	};
 23ff6de:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff6e2:	4620      	mov	r0, r4
 23ff6e4:	bd38      	pop	{r3, r4, r5, pc}
 23ff6e6:	bf00      	nop
 23ff6e8:	00010018 	.word	0x00010018
 23ff6ec:	023ffe39 	.word	0x023ffe39

023ff6f0 <_Z19__fetch_global_Wirev>:
{
 23ff6f0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff6f2:	4d0e      	ldr	r5, [pc, #56]	; (23ff72c <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff6f4:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff6f6:	e8d5 1f8f 	ldab	r1, [r5]
 23ff6fa:	f011 0401 	ands.w	r4, r1, #1
 23ff6fe:	d111      	bne.n	23ff724 <_Z19__fetch_global_Wirev+0x34>
 23ff700:	4628      	mov	r0, r5
 23ff702:	f7fc feb3 	bl	23fc46c <__cxa_guard_acquire>
 23ff706:	b168      	cbz	r0, 23ff724 <_Z19__fetch_global_Wirev+0x34>
 23ff708:	4668      	mov	r0, sp
 23ff70a:	f7ff ffd7 	bl	23ff6bc <_Z17acquireWireBufferv>
 23ff70e:	466a      	mov	r2, sp
 23ff710:	4621      	mov	r1, r4
 23ff712:	4807      	ldr	r0, [pc, #28]	; (23ff730 <_Z19__fetch_global_Wirev+0x40>)
 23ff714:	f7ff fb86 	bl	23fee24 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff718:	4628      	mov	r0, r5
 23ff71a:	f7fc feac 	bl	23fc476 <__cxa_guard_release>
 23ff71e:	4805      	ldr	r0, [pc, #20]	; (23ff734 <_Z19__fetch_global_Wirev+0x44>)
 23ff720:	f000 f80e 	bl	23ff740 <atexit>
	return wire;
}
 23ff724:	4802      	ldr	r0, [pc, #8]	; (23ff730 <_Z19__fetch_global_Wirev+0x40>)
 23ff726:	b007      	add	sp, #28
 23ff728:	bd30      	pop	{r4, r5, pc}
 23ff72a:	bf00      	nop
 23ff72c:	1007af50 	.word	0x1007af50
 23ff730:	1007af54 	.word	0x1007af54
 23ff734:	023ff6b9 	.word	0x023ff6b9

023ff738 <_ZnwjRKSt9nothrow_t>:
 23ff738:	f7fc be85 	b.w	23fc446 <_Znwj>

023ff73c <_ZnajRKSt9nothrow_t>:
 23ff73c:	f7fc be85 	b.w	23fc44a <_Znaj>

023ff740 <atexit>:
 23ff740:	2300      	movs	r3, #0
 23ff742:	4601      	mov	r1, r0
 23ff744:	461a      	mov	r2, r3
 23ff746:	4618      	mov	r0, r3
 23ff748:	f000 b93e 	b.w	23ff9c8 <__register_exitproc>

023ff74c <atoi>:
 23ff74c:	220a      	movs	r2, #10
 23ff74e:	2100      	movs	r1, #0
 23ff750:	f000 b930 	b.w	23ff9b4 <strtol>

023ff754 <isprint>:
 23ff754:	4b02      	ldr	r3, [pc, #8]	; (23ff760 <isprint+0xc>)
 23ff756:	4418      	add	r0, r3
 23ff758:	7840      	ldrb	r0, [r0, #1]
 23ff75a:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff75e:	4770      	bx	lr
 23ff760:	023ffece 	.word	0x023ffece

023ff764 <memcpy>:
 23ff764:	440a      	add	r2, r1
 23ff766:	1e43      	subs	r3, r0, #1
 23ff768:	4291      	cmp	r1, r2
 23ff76a:	d100      	bne.n	23ff76e <memcpy+0xa>
 23ff76c:	4770      	bx	lr
 23ff76e:	b510      	push	{r4, lr}
 23ff770:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff774:	4291      	cmp	r1, r2
 23ff776:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff77a:	d1f9      	bne.n	23ff770 <memcpy+0xc>
 23ff77c:	bd10      	pop	{r4, pc}

023ff77e <memmove>:
 23ff77e:	4288      	cmp	r0, r1
 23ff780:	b510      	push	{r4, lr}
 23ff782:	eb01 0402 	add.w	r4, r1, r2
 23ff786:	d902      	bls.n	23ff78e <memmove+0x10>
 23ff788:	4284      	cmp	r4, r0
 23ff78a:	4623      	mov	r3, r4
 23ff78c:	d807      	bhi.n	23ff79e <memmove+0x20>
 23ff78e:	1e43      	subs	r3, r0, #1
 23ff790:	42a1      	cmp	r1, r4
 23ff792:	d008      	beq.n	23ff7a6 <memmove+0x28>
 23ff794:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff798:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff79c:	e7f8      	b.n	23ff790 <memmove+0x12>
 23ff79e:	4402      	add	r2, r0
 23ff7a0:	4601      	mov	r1, r0
 23ff7a2:	428a      	cmp	r2, r1
 23ff7a4:	d100      	bne.n	23ff7a8 <memmove+0x2a>
 23ff7a6:	bd10      	pop	{r4, pc}
 23ff7a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff7ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff7b0:	e7f7      	b.n	23ff7a2 <memmove+0x24>

023ff7b2 <memset>:
 23ff7b2:	4402      	add	r2, r0
 23ff7b4:	4603      	mov	r3, r0
 23ff7b6:	4293      	cmp	r3, r2
 23ff7b8:	d100      	bne.n	23ff7bc <memset+0xa>
 23ff7ba:	4770      	bx	lr
 23ff7bc:	f803 1b01 	strb.w	r1, [r3], #1
 23ff7c0:	e7f9      	b.n	23ff7b6 <memset+0x4>
	...

023ff7c4 <srand>:
 23ff7c4:	b538      	push	{r3, r4, r5, lr}
 23ff7c6:	4b10      	ldr	r3, [pc, #64]	; (23ff808 <srand+0x44>)
 23ff7c8:	4604      	mov	r4, r0
 23ff7ca:	681d      	ldr	r5, [r3, #0]
 23ff7cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff7ce:	b9b3      	cbnz	r3, 23ff7fe <srand+0x3a>
 23ff7d0:	2018      	movs	r0, #24
 23ff7d2:	f7fd fe7b 	bl	23fd4cc <malloc>
 23ff7d6:	4602      	mov	r2, r0
 23ff7d8:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff7da:	b920      	cbnz	r0, 23ff7e6 <srand+0x22>
 23ff7dc:	4b0b      	ldr	r3, [pc, #44]	; (23ff80c <srand+0x48>)
 23ff7de:	2142      	movs	r1, #66	; 0x42
 23ff7e0:	480b      	ldr	r0, [pc, #44]	; (23ff810 <srand+0x4c>)
 23ff7e2:	f7fd feb9 	bl	23fd558 <__assert_func>
 23ff7e6:	490b      	ldr	r1, [pc, #44]	; (23ff814 <srand+0x50>)
 23ff7e8:	4b0b      	ldr	r3, [pc, #44]	; (23ff818 <srand+0x54>)
 23ff7ea:	e9c0 1300 	strd	r1, r3, [r0]
 23ff7ee:	4b0b      	ldr	r3, [pc, #44]	; (23ff81c <srand+0x58>)
 23ff7f0:	2100      	movs	r1, #0
 23ff7f2:	6083      	str	r3, [r0, #8]
 23ff7f4:	230b      	movs	r3, #11
 23ff7f6:	8183      	strh	r3, [r0, #12]
 23ff7f8:	2001      	movs	r0, #1
 23ff7fa:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff7fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff800:	2200      	movs	r2, #0
 23ff802:	611c      	str	r4, [r3, #16]
 23ff804:	615a      	str	r2, [r3, #20]
 23ff806:	bd38      	pop	{r3, r4, r5, pc}
 23ff808:	1007ad88 	.word	0x1007ad88
 23ff80c:	023ffe3a 	.word	0x023ffe3a
 23ff810:	023ffe51 	.word	0x023ffe51
 23ff814:	abcd330e 	.word	0xabcd330e
 23ff818:	e66d1234 	.word	0xe66d1234
 23ff81c:	0005deec 	.word	0x0005deec

023ff820 <strchr>:
 23ff820:	b2c9      	uxtb	r1, r1
 23ff822:	4603      	mov	r3, r0
 23ff824:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff828:	b11a      	cbz	r2, 23ff832 <strchr+0x12>
 23ff82a:	428a      	cmp	r2, r1
 23ff82c:	d1f9      	bne.n	23ff822 <strchr+0x2>
 23ff82e:	4618      	mov	r0, r3
 23ff830:	4770      	bx	lr
 23ff832:	2900      	cmp	r1, #0
 23ff834:	bf18      	it	ne
 23ff836:	2300      	movne	r3, #0
 23ff838:	e7f9      	b.n	23ff82e <strchr+0xe>

023ff83a <strchrnul>:
 23ff83a:	b510      	push	{r4, lr}
 23ff83c:	4604      	mov	r4, r0
 23ff83e:	f7ff ffef 	bl	23ff820 <strchr>
 23ff842:	b918      	cbnz	r0, 23ff84c <strchrnul+0x12>
 23ff844:	4620      	mov	r0, r4
 23ff846:	f7fc fdd9 	bl	23fc3fc <strlen>
 23ff84a:	4420      	add	r0, r4
 23ff84c:	bd10      	pop	{r4, pc}

023ff84e <strcpy>:
 23ff84e:	4603      	mov	r3, r0
 23ff850:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff854:	f803 2b01 	strb.w	r2, [r3], #1
 23ff858:	2a00      	cmp	r2, #0
 23ff85a:	d1f9      	bne.n	23ff850 <strcpy+0x2>
 23ff85c:	4770      	bx	lr

023ff85e <strncmp>:
 23ff85e:	b510      	push	{r4, lr}
 23ff860:	b17a      	cbz	r2, 23ff882 <strncmp+0x24>
 23ff862:	4603      	mov	r3, r0
 23ff864:	3901      	subs	r1, #1
 23ff866:	1884      	adds	r4, r0, r2
 23ff868:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff86c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff870:	4290      	cmp	r0, r2
 23ff872:	d101      	bne.n	23ff878 <strncmp+0x1a>
 23ff874:	42a3      	cmp	r3, r4
 23ff876:	d101      	bne.n	23ff87c <strncmp+0x1e>
 23ff878:	1a80      	subs	r0, r0, r2
 23ff87a:	bd10      	pop	{r4, pc}
 23ff87c:	2800      	cmp	r0, #0
 23ff87e:	d1f3      	bne.n	23ff868 <strncmp+0xa>
 23ff880:	e7fa      	b.n	23ff878 <strncmp+0x1a>
 23ff882:	4610      	mov	r0, r2
 23ff884:	e7f9      	b.n	23ff87a <strncmp+0x1c>

023ff886 <strrchr>:
 23ff886:	b538      	push	{r3, r4, r5, lr}
 23ff888:	4603      	mov	r3, r0
 23ff88a:	460c      	mov	r4, r1
 23ff88c:	b969      	cbnz	r1, 23ff8aa <strrchr+0x24>
 23ff88e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff892:	f7ff bfc5 	b.w	23ff820 <strchr>
 23ff896:	1c43      	adds	r3, r0, #1
 23ff898:	4605      	mov	r5, r0
 23ff89a:	4621      	mov	r1, r4
 23ff89c:	4618      	mov	r0, r3
 23ff89e:	f7ff ffbf 	bl	23ff820 <strchr>
 23ff8a2:	2800      	cmp	r0, #0
 23ff8a4:	d1f7      	bne.n	23ff896 <strrchr+0x10>
 23ff8a6:	4628      	mov	r0, r5
 23ff8a8:	bd38      	pop	{r3, r4, r5, pc}
 23ff8aa:	2500      	movs	r5, #0
 23ff8ac:	e7f5      	b.n	23ff89a <strrchr+0x14>
	...

023ff8b0 <_strtol_l.constprop.0>:
 23ff8b0:	2b01      	cmp	r3, #1
 23ff8b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff8b6:	d001      	beq.n	23ff8bc <_strtol_l.constprop.0+0xc>
 23ff8b8:	2b24      	cmp	r3, #36	; 0x24
 23ff8ba:	d906      	bls.n	23ff8ca <_strtol_l.constprop.0+0x1a>
 23ff8bc:	f7fd fe3e 	bl	23fd53c <__errno>
 23ff8c0:	2316      	movs	r3, #22
 23ff8c2:	6003      	str	r3, [r0, #0]
 23ff8c4:	2000      	movs	r0, #0
 23ff8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff8ca:	460d      	mov	r5, r1
 23ff8cc:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff9b0 <_strtol_l.constprop.0+0x100>
 23ff8d0:	462e      	mov	r6, r5
 23ff8d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff8d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff8da:	f017 0708 	ands.w	r7, r7, #8
 23ff8de:	d1f7      	bne.n	23ff8d0 <_strtol_l.constprop.0+0x20>
 23ff8e0:	2c2d      	cmp	r4, #45	; 0x2d
 23ff8e2:	d132      	bne.n	23ff94a <_strtol_l.constprop.0+0x9a>
 23ff8e4:	782c      	ldrb	r4, [r5, #0]
 23ff8e6:	2701      	movs	r7, #1
 23ff8e8:	1cb5      	adds	r5, r6, #2
 23ff8ea:	2b00      	cmp	r3, #0
 23ff8ec:	d05b      	beq.n	23ff9a6 <_strtol_l.constprop.0+0xf6>
 23ff8ee:	2b10      	cmp	r3, #16
 23ff8f0:	d109      	bne.n	23ff906 <_strtol_l.constprop.0+0x56>
 23ff8f2:	2c30      	cmp	r4, #48	; 0x30
 23ff8f4:	d107      	bne.n	23ff906 <_strtol_l.constprop.0+0x56>
 23ff8f6:	782c      	ldrb	r4, [r5, #0]
 23ff8f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff8fc:	2c58      	cmp	r4, #88	; 0x58
 23ff8fe:	d14d      	bne.n	23ff99c <_strtol_l.constprop.0+0xec>
 23ff900:	786c      	ldrb	r4, [r5, #1]
 23ff902:	2310      	movs	r3, #16
 23ff904:	3502      	adds	r5, #2
 23ff906:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff90a:	f04f 0c00 	mov.w	ip, #0
 23ff90e:	f108 38ff 	add.w	r8, r8, #4294967295
 23ff912:	4666      	mov	r6, ip
 23ff914:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff918:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff91c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff920:	f1be 0f09 	cmp.w	lr, #9
 23ff924:	d816      	bhi.n	23ff954 <_strtol_l.constprop.0+0xa4>
 23ff926:	4674      	mov	r4, lr
 23ff928:	42a3      	cmp	r3, r4
 23ff92a:	dd24      	ble.n	23ff976 <_strtol_l.constprop.0+0xc6>
 23ff92c:	f1bc 0f00 	cmp.w	ip, #0
 23ff930:	db1e      	blt.n	23ff970 <_strtol_l.constprop.0+0xc0>
 23ff932:	45b1      	cmp	r9, r6
 23ff934:	d31c      	bcc.n	23ff970 <_strtol_l.constprop.0+0xc0>
 23ff936:	d101      	bne.n	23ff93c <_strtol_l.constprop.0+0x8c>
 23ff938:	45a2      	cmp	sl, r4
 23ff93a:	db19      	blt.n	23ff970 <_strtol_l.constprop.0+0xc0>
 23ff93c:	fb06 4603 	mla	r6, r6, r3, r4
 23ff940:	f04f 0c01 	mov.w	ip, #1
 23ff944:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff948:	e7e8      	b.n	23ff91c <_strtol_l.constprop.0+0x6c>
 23ff94a:	2c2b      	cmp	r4, #43	; 0x2b
 23ff94c:	bf04      	itt	eq
 23ff94e:	782c      	ldrbeq	r4, [r5, #0]
 23ff950:	1cb5      	addeq	r5, r6, #2
 23ff952:	e7ca      	b.n	23ff8ea <_strtol_l.constprop.0+0x3a>
 23ff954:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff958:	f1be 0f19 	cmp.w	lr, #25
 23ff95c:	d801      	bhi.n	23ff962 <_strtol_l.constprop.0+0xb2>
 23ff95e:	3c37      	subs	r4, #55	; 0x37
 23ff960:	e7e2      	b.n	23ff928 <_strtol_l.constprop.0+0x78>
 23ff962:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff966:	f1be 0f19 	cmp.w	lr, #25
 23ff96a:	d804      	bhi.n	23ff976 <_strtol_l.constprop.0+0xc6>
 23ff96c:	3c57      	subs	r4, #87	; 0x57
 23ff96e:	e7db      	b.n	23ff928 <_strtol_l.constprop.0+0x78>
 23ff970:	f04f 3cff 	mov.w	ip, #4294967295
 23ff974:	e7e6      	b.n	23ff944 <_strtol_l.constprop.0+0x94>
 23ff976:	f1bc 0f00 	cmp.w	ip, #0
 23ff97a:	da05      	bge.n	23ff988 <_strtol_l.constprop.0+0xd8>
 23ff97c:	2322      	movs	r3, #34	; 0x22
 23ff97e:	4646      	mov	r6, r8
 23ff980:	6003      	str	r3, [r0, #0]
 23ff982:	b942      	cbnz	r2, 23ff996 <_strtol_l.constprop.0+0xe6>
 23ff984:	4630      	mov	r0, r6
 23ff986:	e79e      	b.n	23ff8c6 <_strtol_l.constprop.0+0x16>
 23ff988:	b107      	cbz	r7, 23ff98c <_strtol_l.constprop.0+0xdc>
 23ff98a:	4276      	negs	r6, r6
 23ff98c:	2a00      	cmp	r2, #0
 23ff98e:	d0f9      	beq.n	23ff984 <_strtol_l.constprop.0+0xd4>
 23ff990:	f1bc 0f00 	cmp.w	ip, #0
 23ff994:	d000      	beq.n	23ff998 <_strtol_l.constprop.0+0xe8>
 23ff996:	1e69      	subs	r1, r5, #1
 23ff998:	6011      	str	r1, [r2, #0]
 23ff99a:	e7f3      	b.n	23ff984 <_strtol_l.constprop.0+0xd4>
 23ff99c:	2430      	movs	r4, #48	; 0x30
 23ff99e:	2b00      	cmp	r3, #0
 23ff9a0:	d1b1      	bne.n	23ff906 <_strtol_l.constprop.0+0x56>
 23ff9a2:	2308      	movs	r3, #8
 23ff9a4:	e7af      	b.n	23ff906 <_strtol_l.constprop.0+0x56>
 23ff9a6:	2c30      	cmp	r4, #48	; 0x30
 23ff9a8:	d0a5      	beq.n	23ff8f6 <_strtol_l.constprop.0+0x46>
 23ff9aa:	230a      	movs	r3, #10
 23ff9ac:	e7ab      	b.n	23ff906 <_strtol_l.constprop.0+0x56>
 23ff9ae:	bf00      	nop
 23ff9b0:	023ffecf 	.word	0x023ffecf

023ff9b4 <strtol>:
 23ff9b4:	4613      	mov	r3, r2
 23ff9b6:	460a      	mov	r2, r1
 23ff9b8:	4601      	mov	r1, r0
 23ff9ba:	4802      	ldr	r0, [pc, #8]	; (23ff9c4 <strtol+0x10>)
 23ff9bc:	6800      	ldr	r0, [r0, #0]
 23ff9be:	f7ff bf77 	b.w	23ff8b0 <_strtol_l.constprop.0>
 23ff9c2:	bf00      	nop
 23ff9c4:	1007ad88 	.word	0x1007ad88

023ff9c8 <__register_exitproc>:
 23ff9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ff9cc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffa8c <__register_exitproc+0xc4>
 23ff9d0:	4606      	mov	r6, r0
 23ff9d2:	461f      	mov	r7, r3
 23ff9d4:	460d      	mov	r5, r1
 23ff9d6:	f8d8 0000 	ldr.w	r0, [r8]
 23ff9da:	4691      	mov	r9, r2
 23ff9dc:	f000 f858 	bl	23ffa90 <__retarget_lock_acquire_recursive>
 23ff9e0:	4b26      	ldr	r3, [pc, #152]	; (23ffa7c <__register_exitproc+0xb4>)
 23ff9e2:	681c      	ldr	r4, [r3, #0]
 23ff9e4:	b934      	cbnz	r4, 23ff9f4 <__register_exitproc+0x2c>
 23ff9e6:	4c26      	ldr	r4, [pc, #152]	; (23ffa80 <__register_exitproc+0xb8>)
 23ff9e8:	601c      	str	r4, [r3, #0]
 23ff9ea:	4b26      	ldr	r3, [pc, #152]	; (23ffa84 <__register_exitproc+0xbc>)
 23ff9ec:	b113      	cbz	r3, 23ff9f4 <__register_exitproc+0x2c>
 23ff9ee:	681b      	ldr	r3, [r3, #0]
 23ff9f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ff9f4:	6863      	ldr	r3, [r4, #4]
 23ff9f6:	2b1f      	cmp	r3, #31
 23ff9f8:	dd07      	ble.n	23ffa0a <__register_exitproc+0x42>
 23ff9fa:	f8d8 0000 	ldr.w	r0, [r8]
 23ff9fe:	f000 f849 	bl	23ffa94 <__retarget_lock_release_recursive>
 23ffa02:	f04f 30ff 	mov.w	r0, #4294967295
 23ffa06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffa0a:	b35e      	cbz	r6, 23ffa64 <__register_exitproc+0x9c>
 23ffa0c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffa10:	b988      	cbnz	r0, 23ffa36 <__register_exitproc+0x6e>
 23ffa12:	4b1d      	ldr	r3, [pc, #116]	; (23ffa88 <__register_exitproc+0xc0>)
 23ffa14:	b923      	cbnz	r3, 23ffa20 <__register_exitproc+0x58>
 23ffa16:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa1a:	f000 f83a 	bl	23ffa92 <__retarget_lock_release>
 23ffa1e:	e7f0      	b.n	23ffa02 <__register_exitproc+0x3a>
 23ffa20:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffa24:	f7fd fd52 	bl	23fd4cc <malloc>
 23ffa28:	2800      	cmp	r0, #0
 23ffa2a:	d0f4      	beq.n	23ffa16 <__register_exitproc+0x4e>
 23ffa2c:	2300      	movs	r3, #0
 23ffa2e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffa32:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffa36:	6863      	ldr	r3, [r4, #4]
 23ffa38:	2201      	movs	r2, #1
 23ffa3a:	2e02      	cmp	r6, #2
 23ffa3c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffa40:	fa02 f203 	lsl.w	r2, r2, r3
 23ffa44:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffa48:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffa4c:	ea43 0302 	orr.w	r3, r3, r2
 23ffa50:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffa54:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffa58:	bf02      	ittt	eq
 23ffa5a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffa5e:	4313      	orreq	r3, r2
 23ffa60:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffa64:	6863      	ldr	r3, [r4, #4]
 23ffa66:	f8d8 0000 	ldr.w	r0, [r8]
 23ffa6a:	1c5a      	adds	r2, r3, #1
 23ffa6c:	3302      	adds	r3, #2
 23ffa6e:	6062      	str	r2, [r4, #4]
 23ffa70:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffa74:	f000 f80e 	bl	23ffa94 <__retarget_lock_release_recursive>
 23ffa78:	2000      	movs	r0, #0
 23ffa7a:	e7c4      	b.n	23ffa06 <__register_exitproc+0x3e>
 23ffa7c:	1007aff4 	.word	0x1007aff4
 23ffa80:	1007af68 	.word	0x1007af68
 23ffa84:	00000000 	.word	0x00000000
 23ffa88:	023fd4cd 	.word	0x023fd4cd
 23ffa8c:	1007adec 	.word	0x1007adec

023ffa90 <__retarget_lock_acquire_recursive>:
 23ffa90:	4770      	bx	lr

023ffa92 <__retarget_lock_release>:
 23ffa92:	4770      	bx	lr

023ffa94 <__retarget_lock_release_recursive>:
 23ffa94:	4770      	bx	lr
	...

023ffa98 <dynalib_user>:
 23ffa98:	c40d 023f c435 023f c439 023f 0000 0000     ..?.5.?.9.?.....
 23ffaa8:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23ffab8:	7574 6c61 4300 4200 4600 4d00 4900 0000     tual.C.B.F.M.I..

023ffac8 <_ZTVN5spark10LogHandlerE>:
	...
 23ffad8:	c455 023f c47d 023f                         U.?.}.?.

023ffae0 <_ZTVN5spark16SerialLogHandlerE>:
	...
 23ffae8:	c539 023f c56d 023f e5f5 023f e79d 023f     9.?.m.?...?...?.

023ffaf8 <CSWTCH.42>:
	...
 23ffb08:	00ff 0000 ff00 ff00                         ........

023ffb10 <CSWTCH.43>:
 23ffb10:	0000 0000 ff00 0000 0000 0000 0000 0000     ................
 23ffb20:	0000 0000 ff00 ff00                         ........

023ffb28 <CSWTCH.44>:
 23ffb28:	00ff 0000 0000 0000 0000 0000 0000 0000     ................
 23ffb38:	0000 0000 ff00 0000 5053 2f49 5053 3149     ........SPI/SPI1
 23ffb48:	6920 746e 7265 6166 6563 6e20 746f 6420      interface not d
 23ffb58:	6665 6e69 6465 0021 6950 6578 206c 7974     efined!.Pixel ty
 23ffb68:	6570 6e20 746f 7320 7075 6f70 7472 6465     pe not supported
 23ffb78:	0021 0000 6f4e 2074 6e65 756f 6867 6d20     !...Not enough m
 23ffb88:	6d65 726f 2079 7661 6961 616c 6c62 2165     emory available!
 23ffb98:	0000 0000                                   ....

023ffb9c <_ZTVN5spark13EthernetClassE>:
	...
 23ffba4:	d5ef 023f d5e5 023f d5db 023f d5d1 023f     ..?...?...?...?.
 23ffbb4:	d5c5 023f d5b9 023f ef39 023f ef41 023f     ..?...?.9.?.A.?.
 23ffbc4:	d5ad 023f d5a5 023f d59b 023f d591 023f     ..?...?...?...?.
 23ffbd4:	f069 023f ef71 023f ef79 023f               i.?.q.?.y.?.

023ffbe0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffbe0:	0800 1810 2820 3830                         .... (08

023ffbe8 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffbf0:	d935 023f d937 023f d8f5 023f f0bf 023f     5.?.7.?...?...?.
 23ffc00:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
 23ffc10:	6c61 0031 534a 4e4f 7453 6572 6d61 6f4c     al1.JSONStreamLo
 23ffc20:	4867 6e61 6c64 7265 6100 7070 2500 3130     gHandler.app.%01
 23ffc30:	7530 0020 205d 2500 0064 202c 2800 3a29     0u .] .%d., .():
 23ffc40:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
 23ffc50:	6564 6174 6c69 2073 203d 0d00 000a 006d     details = ....m.
 23ffc60:	0066 6e6c 6600 006e 0074 6f63 6564 6400     f.ln.fn.t.code.d
 23ffc70:	7465 6961 006c 0000                         etail...

023ffc78 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffc80:	de7d 023f de95 023f e5f5 023f e79d 023f     }.?...?...?...?.

023ffc90 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffc98:	dea9 023f debd 023f e7d5 023f d9ff 023f     ..?...?...?...?.

023ffca8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffcb0:	da11 023f da37 023f e559 023f da01 023f     ..?.7.?.Y.?...?.

023ffcc0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffcc8:	da0f 023f da45 023f dde5 023f da67 023f     ..?.E.?...?.g.?.
 23ffcd8:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 23ffce8:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

023ffcf4 <_ZTV9IPAddress>:
	...
 23ffcfc:	eb1f 023f eb0f 023f eb11 023f               ..?...?...?.

023ffd08 <_ZTV9USBSerial>:
	...
 23ffd10:	ec07 023f ec6f 023f ec45 023f d909 023f     ..?.o.?.E.?...?.
 23ffd20:	ec37 023f ec09 023f ec19 023f ec69 023f     7.?...?...?.i.?.
 23ffd30:	d9d5 023f ec29 023f ec01 023f               ..?.).?...?.

023ffd3c <_ZTV11USARTSerial>:
	...
 23ffd44:	ed0d 023f ed79 023f ed51 023f d909 023f     ..?.y.?.Q.?...?.
 23ffd54:	ed21 023f ed3d 023f ed2f 023f ed4b 023f     !.?.=.?./.?.K.?.
 23ffd64:	d9d5 023f ed0f 023f ed13 023f               ..?...?...?.

023ffd70 <_ZTV7TwoWire>:
	...
 23ffd78:	edcb 023f ee15 023f eded 023f edcd 023f     ..?...?...?...?.
 23ffd88:	edf5 023f edfd 023f ee05 023f ee0d 023f     ..?...?...?...?.
 23ffd98:	d9d5 023f                                   ..?.

023ffd9c <_ZTVN5spark9WiFiClassE>:
	...
 23ffda4:	eedb 023f eed1 023f eec7 023f ee7d 023f     ..?...?...?.}.?.
 23ffdb4:	eebb 023f eeaf 023f ef39 023f ef41 023f     ..?...?.9.?.A.?.
 23ffdc4:	eea3 023f ee9b 023f ee91 023f ee87 023f     ..?...?...?...?.
 23ffdd4:	f069 023f ef71 023f ef79 023f               i.?.q.?.y.?.

023ffde0 <CSWTCH.109>:
 23ffde0:	ae4c 1007 aee8 1007 aef0 1007               L...........

023ffdec <_ZTVN5spark12NetworkClassE>:
	...
 23ffdf4:	eef9 023f ef03 023f ef0d 023f ef17 023f     ..?...?...?...?.
 23ffe04:	ef21 023f ef2d 023f ef39 023f ef41 023f     !.?.-.?.9.?.A.?.
 23ffe14:	ef49 023f ef55 023f ef5d 023f ef67 023f     I.?.U.?.].?.g.?.
 23ffe24:	f069 023f ef71 023f ef79 023f 7525 7500     i.?.q.?.y.?.%u.u
 23ffe34:	3025 7834                                    %04x.

023ffe39 <_ZSt7nothrow>:
 23ffe39:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23ffe49:	6363 6565 6564 0064 6d2f 746e 772f 726f     cceeded./mnt/wor
 23ffe59:	736b 6170 6563 772f 726f 736b 6170 6563     kspace/workspace
 23ffe69:	472f 4343 312d 2d30 6970 6570 696c 656e     /GCC-10-pipeline
 23ffe79:	6a2f 6e65 696b 736e 472d 4343 312d 2d30     /jenkins-GCC-10-
 23ffe89:	6970 6570 696c 656e 342d 5f38 3032 3032     pipeline-48_2020
 23ffe99:	3131 3432 315f 3036 3136 3038 3436 2f31     1124_1606180641/
 23ffea9:	7273 2f63 656e 6c77 6269 6e2f 7765 696c     src/newlib/newli
 23ffeb9:	2f62 696c 6362 732f 6474 696c 2f62 6172     b/libc/stdlib/ra
 23ffec9:	646e 632e                                    nd.c.

023ffece <_ctype_>:
 23ffece:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 23ffede:	2020 2020 2020 2020 2020 2020 2020 2020                     
 23ffeee:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 23ffefe:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 23fff0e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 23fff1e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 23fff2e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 23fff3e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 23fff4e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

023fffcf <link_const_data_end>:
	...

023fffd0 <link_constructors_location>:
 23fffd0:	023fc7c5 	.word	0x023fc7c5
 23fffd4:	023fd5f9 	.word	0x023fd5f9
 23fffd8:	023fd731 	.word	0x023fd731
 23fffdc:	023fd8e5 	.word	0x023fd8e5
 23fffe0:	023fe5e5 	.word	0x023fe5e5
 23fffe4:	023fe949 	.word	0x023fe949
 23fffe8:	023fe965 	.word	0x023fe965
 23fffec:	023fee61 	.word	0x023fee61
 23ffff0:	023feee5 	.word	0x023feee5
 23ffff4:	023ff07d 	.word	0x023ff07d
